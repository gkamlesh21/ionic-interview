[
    {
        "folder": "JavaScript",
        "title": "JavaScript",
        "url": "/folder/JavaScript",
        "icon": "logo-javascript",
        "question": [
            {
                "name": "What are the different data types present in javascript?",
                "description": "<ol><li><strong>Primitive types</strong> - Primitive data types can store only a single value. <ol><li><strong>String</strong> - It represents a series of characters and is written with quotes. A string can be represented using a single or a double quote.</li><li><strong>Number</strong> - It represents a number and can be written with or without decimals.</li><li><strong>Boolean</strong> - It represents a logical entity and can have only two values : true or false. Booleans are generally used for conditional testing. </li><li><strong>Undefined</strong> - When a variable is declared but not assigned, it has the value of undefined and it’s type is also undefined</li><li><strong>Null</strong> - It represents a non-existent or a invalid value.</li></ol></li><li><strong>Non Primitive type</strong> - To store multiple and complex values, non-primitive data types are used. <ol><li><strong>Object</strong> - Used to store collection of data.</li></ol></li></ol>"
            },
            {
                "name": "What are the possible ways to create objects in JavaScript",
                "description": "<ol><li><strong>Object literal syntax:</strong> - comma-separated set of name-value pairs wrapped in curly braces. <br><pre>var object = {<br>&nbsp;&nbsp;&nbsp;&nbsp;name: \"Kamlesh\",<br>&nbsp;&nbsp;&nbsp;&nbsp;age: 34 <br>};</pre></li><li><strong>Function constructor:</strong> - Create any function and apply the new operator to create object instances,<br><br><pre>// constructor function <br>function Person () { <br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = 'John', <br>&nbsp;&nbsp;&nbsp;&nbsp;this.age = 23<br>}<br><br>// create an object<br>const person = new Person();</pre><br><br></li><li><strong>Function constructor with prototype:</strong> - This is similar to function constructor but it uses prototype for their properties and methods, <br><pre>function Person() {}<br>&nbsp;&nbsp;&nbsp;&nbsp;Person.prototype.name = \"Kamlesh\";<br>&nbsp;&nbsp;&nbsp;&nbsp;var object = new Person();</pre></li><li><strong>Object's create method:</strong> - The create method of Object creates a new object by passing the prototype object as a parameter <br><pre>var object = Object.create(null);<br>&nbsp;&nbsp;&nbsp;&nbsp;a.name = \"Kamlesh\"<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;// '{name: \"Kamlesh\"}'</pre></li><li><strong>Object constructor:</strong> - create an empty object is using the Object constructor <br><pre>var object = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;a.name = \"Kamlesh\"<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;// '{name: \"Kamlesh\"}'</pre></li><li><strong>ES6 Class syntax:</strong> - ES6 introduces class feature to create the objects <br><pre>class Person {<br>&nbsp;&nbsp;&nbsp;&nbsp;constructor(name) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>} <br><br>var object = new Person(\"Kamlesh\");</pre></li><li><strong>Singleton pattern:</strong>  - A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances. <br><pre>var object = new (function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = \"Kamlesh\";<br>})();</pre></li></ol>"
            },
            {
                "name": "What is Hoisting?",
                "description": "<p>Hoisting is a JavaScript mechanism where variables, function and class declarations are moved to the top of their scope before code execution.<br><br><img src='./assets/js/hoisting.png'><br><br><strong>Note</strong> that JavaScript only hoists declarations, not initialisation. Variables declared or initialized with the var keyword will have their declaration 'moved' up to the top of their module/function-level scope, which we call as hoisting. However, only the declaration is hoisted, the assignment (if there is one), will stay where it is.</p>"
            },
            {
                "name": "What are the tools or techniques used for debugging JavaScript code",
                "description": "<ol><li>Chrome Devtools</li><li>debugger statement</li><li>Good old console.log statement</li></ol>"
            },
            {
                "name": "Difference between (equality operator) == and === ?",
                "description": "<p> JavaScript has both strict and type-converting equality comparison. For strict comparison we use === and for type-converting comparison we use == .<br><br><strong>Strict Comparison(===)</strong><br>For strict comparison the items been compared must be the same type.</p><ul> <li>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.<br><br><img src='./assets/js/equaltwostring.png'></li><li>Two numbers are strictly equal when they are numerically equal (have the same number value). NaN is not equal to anything, including NaN. Positive and negative zeros are equal to one another.<br><br><img src='./assets/js/equaltwonum.png'></li><li>Two Boolean operands are strictly equal if both are true or both are false.<br><br><img src='./assets/js/equaltwobool.png'></li><li>Two objects are strictly equal if they refer to the same Object.<br><br><img src='./assets/js/equaltwoobj.png'></li><li>Null and Undefined types are not equal<br><br><img src='./assets/js/nullundefined.png'></li></ul><br><br><strong>Type-converting comparison</strong> - The == does a type conversion before comparing, if both items are of different types.<br><br><img src='./assets/js/equality1.png'>"
            },
            {
                "name": "Difference between variables created using let var or const?",
                "description": "<p><strong>#1. Variables</strong> declared using the <code>var</code> keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. <code>let</code> and <code>const</code> are block scoped, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).<br><img src='./assets/js/let-var-const.png'><br><br><strong>#2.</strong> <code>var</code> allows variables to be hoisted, meaning they can be referenced in code before they are declared, where as <code>let</code> and <code>const</code> will not allow this, instead they will <strong>throw an error.</strong><br><img src='./assets/js/let-var-const1.png'><br><br><strong>#3.</strong> Redeclaring a variable with <code>var</code> will not throw an error, but <code>let</code> and <code>const</code> will throw.<br><img src='./assets/js/let-var-const2.png'><br><br><strong>#4.</strong> <code>let</code> and <code>const</code> differ to each other in a waya that <code>let</code> allows reassigning of the variable's value while <code>const</code> does not.<br><img src='./assets/js/let-var-const3.png'></p>"
            },
            {
                "name": "What is Coercion in JavaScript?",
                "description": "<p>In JavaScript conversion between different two build-in data types is called coercion. Coercion comes in two forms in JavaScript: explicit and implicit.<br><br><strong>Implicit coercion:</strong> Type coercion is the automatic or implicit conversion of values from one data type to another.<br><img src='./assets/js/implicit.png'><br><br><strong>Explicit coercion:</strong> Type conversion is done explicitly in code using the inbuilt functions like Number(), String(), Boolean(), etc<br><img src='./assets/js/explicit.png'></p>"
            },
            {
                "name": "Difference between null and undefined",
                "description": "<table><thead><tr><th>Undefined</th><th>Null</th></tr></thead><tbody><tr><td>Undefined means the variable has been declared, but its value has not been assigned.</td><td>Null means an empty value or a blank value.</td></tr><tr><td>The typeof() operator returns <strong>undefined</strong> for an undefined variable.</td><td>The typeof() operator returns the type as an <strong>object</strong> for a variable whose value is assigned as null.</td></tr><tr><td>It returns <strong>NaN</strong>on performing arithmetic operations.</td><td>converts to 0 then perform the operation</td></tr><tr><td>As there is no value assigned to the variable, it becomes undefined when we assign to a variable.</td><td>As we assign null to a variable, it becomes as assigned value of that variable.</td></tr></tbody></table>"
            },
            {
                "name": "Why JavaScript 'var null' throw error but 'var undefined' doesn't?",
                "description": "<p><strong>null (var null)</strong> - In JavaScript, null is a reserved identifier, therefore we cannot use it as an identifier in JavaScript. An error can be seen if we will write:<br><br><img src='./assets/js/null.png'><br><br>The web browser throws an error for “var null” since it is a reserved identifier, The following is the error visible<br><strong>Output - SyntaxError: Unexpected token null </strong><br><br><strong>undefined (var undefined)</strong> - The undefined is not a reserved identifier, therefore if you will write the following, then no error would be thrown:<br><br><img src='./assets/js/undefined.png'><br><strong>Output: Undefined</strong></p>"
            },
            {
                "name": "Difference between “undefined” and “not defined”",
                "description": "<p>In JavaScript, <strong>“undefined”</strong> and <strong>“not defined”</strong> are the two separate terms related to memory space. The keyword <strong>“undefined”</strong> means there is a variable that is defined and contains space in memory without an assigned value. While <strong>“not defined”</strong> means the variable is not yet defined in the code.<br><br>Example of undefined:<br><pre>var x; // declaring x<br>console.log(x);<br>//output: undefined</pre><br><br>Example of not defined:<br><pre>console.log(y);<br>// Output: ReferenceError: y is not defined</pre></p>"
            },
            {
                "name": "Difference between function declaration and function expression?",
                "description": "<p>Function declaration is like most other traditional languages, but in JavaScript we use the keyword “function”.<br>In function expression we assign an anonymous function to an variable. They are very useful when we pass function as arguments to other function or return an function.<br><br><img src='./assets/js/function.png'><br><br>One of the key difference is that, we can call a function declaration even before defining it but same is not true for function expression and it will give reference error.</p>"
            },
            {
                "name": "Is JavaScript an interpreted language or compiled language?",
                "description": "<p><strong>JavaScript</strong>is a special case where you directly execute your source code. A webpage will directly execute your JavaScript. So, for that reason many people think JavaScript as a interpreted language. <strong>However there is a compilation step just before the interpretation step in JavaScript. So, JS is both compiled and interpreted language.</strong><br><br><pre>var a = 10; <br>var b = 20; <br>console.log(a+b)</pre><br><br><strong>Compilation Step</strong> – During this step the compiler mainly registers the variable declarations.<br><br>When the compiler goes to line 1, it encounters <code>var a</code> and registers it in the global scope and then goes to line 2 and registers the <code>var b</code>.<br><br><strong>Interpretation Step</strong> – During this the actual execution takes place. <br><br>the interpreter starts at line 1 and see a variable a and ask the compiler, if it have a variable “a” in Global scope and the compiler have it. So, it assigns the value 10 to it. Next the same step is repeated for line 2 and interpreter assigns 20 to variable “b”. Now once the interpreter goes to line 3, it finds console. It first looks for console at global scope from the compiler but don’t find it. So, it checks in the JavaScript global and finds it. Inside the console there are variable a and b, which it finds at global scope. It then adds them using addition operator and display the result.</p>"
            },
            {
                "name": "Is JavaScript a pass by reference or pass by value language?",
                "description": "<p>In JavaScript, <strong>primitive data types are passed by value</strong> and <strong>non-primitive data types are passed by reference.</strong><br><br>Pass-by-value creates a new space in memory and makes a copy of a value with Primitive data types such as string, number, boolean etc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are independent of each other.<pre>let a = 5;<br>let b = a;<br><br>b++;<br>console.log(a, b); //5, 6 </pre><br>In the above code snippet, the value of <code>a</code> is assigned to <code>b</code> and the variable <code>b</code> has been incremented. Since there is a new space created for variable <code>b</code>, any update on this variable doesn't impact the variable <code>a</code>.<br><br><br>where as Pass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial variable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e, updating one value will impact the other variable.<br><pre>let user1 = {<br>&nbsp;&nbsp;&nbsp;&nbsp;name: 'John',<br>&nbsp;&nbsp;&nbsp;&nbsp;age: 27<br>}; <br><br>let user2 = user1;<br>user2.age = 30;<br><br>console.log(user1.age, user2.age); // 30, 30</pre></p>"
            },
            {
                "name": "Is javascript a statically typed or a dynamically typed language?",
                "description": "<p>JavaScript is a dynamically typed language. In a dynamically typed language, the type of a variable is checked during <strong>run-time </strong>in contrast to a statically typed language, where the type of a variable is checked during <strong>compile-time.</strong><br><br>Since javascript is a loosely(dynamically) typed language, variables in JS are not associated with any type. A variable can hold the value of any data type.<br><br>For example, a variable that is assigned a number type can be converted to a string type:<br><br><pre>var a = 23; <br>var a = \"Hello World!\";</pre></p>"
            },
            {
                "name": "What is NaN in JavaScript?",
                "description": "<p>NaN suggests that the entered value is not a legal number. It is a JavaScript property, which can also be considered as a \"Not-a-Number\" value.<br><br>To determine the entered value is a number or not, you can use the Number.isNaN() method. If the result is “True”, then it would that the given value is not a number, whereas “False” would mean the value is a legal Number.<br><br><strong>Note - </strong> To check whether entered value is a NaN or not, use the Number.isNaN() method. This method returns <strong>true</strong> if the value is not a number, else <strong>false</strong> is returned.<br><pre>var a = 'z';<br><br>isNaN(a) / isNaN(\"Hello\")  // Returns true<br><br>isNaN(345)  // Returns false<br><br>isNaN('1')  // Returns false, since '1' is<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;converted to Number type which results in 0 ( a number)<br><br>isNaN(true) // Returns false, since true <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;converted to Number type results in 1 ( a number)<br><br>isNaN(false) // Returns false<br><br>isNaN(undefined) // Returns true</pre></p>"
            },
            {
                "name": "IIFE - Immediate Invoke Function Expression",
                "description": "<p>An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.<br><br>It is a design pattern which is also known as a Self-Executing Anonymous Function and contains two major parts:</p><ol> <li>The first is the anonymous function with lexical scope enclosed within the <code>Grouping Operator</code> <code>()</code>. This prevents accessing variables within the IIFE idiom as well as polluting the global scope.</li><li>The second part creates the immediately invoked function expression <code>()</code> through which the JavaScript engine will directly interpret the function.</li></ol><br><br><strong>Syntax:</strong><br><pre>(function(){ <br>&nbsp;&nbsp;&nbsp;&nbsp;// Do something;<br>})();</pre>"
            },
            {
                "name": "What do you mean by strict mode in javascript and characteristics of javascript strict-mode?",
                "description": "<p>In ECMAScript 5, a new feature called JavaScript Strict Mode allows you to write a code or a function in a \"strict\" operational environment. In <strong>'Strict mode,'</strong> almost all forms of errors, including silent errors, will be thrown. As a result, debugging becomes a lot simpler.&nbsp; Thus programmer's chances of making an error are lowered.<br><br>Characteristics of strict mode in javascript</p><ol><li>Duplicate arguments are not allowed by developers.</li><li>In strict mode, you won't be able to use the JavaScript keyword as a parameter or function name.</li><li>The <strong>'use strict'</strong> keyword is used to define strict mode at the start of the script. Strict mode is supported by all browsers.</li><li>Engineers will not be allowed to create global variables in <strong>Strict Mode.</strong></li></ol>"
            },
            {
                "name": "What is a first class function?",
                "description": "<p>In Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.<br><br>In such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener<br><br><img src='./assets/js/first-class.png'></p>"
            },
            {
                "name": "What is a first order function?",
                "description": "<p>First-order function is a function that doesn’t accept other function as an argument and doesn’t return a function as its return value.<br><br><img src='./assets/js/first-order.png'></p>"
            },
            {
                "name": "What are Higher Order Functions",
                "description": "<p>Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.<br><br><strong>Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.</strong><br><br>Higher-order functions are a result of functions being <strong>first-class citizens </strong>in javascript.<br><br><img src='./assets/js/hoc.png'></p>"
            },
            {
                "name": "What are callbacks?",
                "description": "<p><strong>Functions that are used as an argument to another function are called callback functions.</strong> For Example:<br><br><img src='./assets/js/callback.png'></p>"
            },
            {
                "name": "Why do we use callbacks?",
                "description": "<p>A callback function is a method that is sent as an input to another function (now let us name this other function \"thisFunction\"), and it is performed inside the thisFunction after the function has completed execution.<br><br>JavaScript is a scripting language that is based on events. Instead of waiting for a reply before continuing, JavaScript will continue to run while monitoring for additional events. Callbacks are a technique of ensuring that a particular code does not run until another code has completed its execution.</p>"
            },
            {
                "name": "“this” Keyword",
                "description": "<p><strong><code>this</code></strong> keyword is one of the most used keywords in JavaScript. But when it comes to regular functions and arrow functions, it behaves in entirely different ways.<br><br>In regular function, <strong><code>this</code></strong> changes according to the way that function is invoked.</p><ul><li><strong>Simple Invocation: <code>this</code></strong> equals the global object or maybe undefined if you are using strict mode.<br><img src='./assets/js/simplethis.png'></li><li><strong>Method Invocation: <code>this</code></strong> equals the object that owns the method.<br><img src='./assets/js/methodthis.png'></li><li><strong>Indirect Invocation: <code>this</code></strong> equals the first argument.<br><img src='./assets/js/indirectthis.png'></li><li><strong>Constructor Invocation: <code>this</code></strong> equals the newly created instance.<br><img src='./assets/js/constructorthis.png'></li></ul><br><br><p>But, in the arrow functions, the behavior of <strong><code>this</code></strong> changes completely.<br><br>Arrow functions don't have their own “this”, and they don’t redefine the value of “<code>this</code>” within the function. <br><br>Regardless of how you execute arrow functions, <code>this</code> inside an arrow function always refers to <code>this</code> from the outer context. This means that <code>this</code> keyword is <strong>lexically </strong>bound in arrow functions. <br>For Example: <br><img src='./assets/js/this.png'><br><br>This behavior of arrow functions makes them really useful when using callbacks inside methods.<br><br>You don't need to use workarounds like <code>const self = this</code> or <code>callback.bind(this)</code> with arrow functions, and it prevents any mistakes that can be caused by the use of <code>this</code> within callbacks.</p>"
            },
            {
                "name": "How does the \"this\" keyword work? Provide some code examples",
                "description": "<p>In JavaScript <em>this</em> always refers to the “owner” of the function we're executing, or rather, to the object that a function is a method of.<br><img src='./assets/jsCode/foo.png'></p>"
            },
            {
                "name": "Explain ”this” with call, apply and bind in JavaScript?",
                "description": "<p>Every function in JavaScript have call, apply and bind methods. These methods can be used to set the custom value of “this” to the execution context of the function.<br><br> <strong>call</strong><strong> - It's a predefined method in javascript. This method invokes a method (function) by specifying the owner object.<br/></strong>Let's say that we have an object called <strong>obj</strong>. It only has one property called <strong>num</strong>, which has a value of 3. Let's also make a function called <strong>addNumbers</strong>.<br><br> Now, in <strong>addNumbers</strong> we have this.num. But how do we pass the value obj.num to it. We need to pass it a context, which means the value of “this”. We will do this my call method by passing a first argument as obj, so the “this” is the obj now.<br><br><img src='./assets/js/call1.png'/><br><br> <strong>apply</strong><strong><br/></strong>It is totally similar to call, but the only difference is that we can pass array as the second argument. We will use the same code for apply also. But now we have an <em>arr</em>, to be passed as second argument.<br><br><img src='./assets/js/apply1.png'/><br><br> <strong>bind</strong><strong><br/></strong>Bind works in a bit different way then call and apply. It works by returning a copy of the function. We will take the returned function in <strong>bindFunc</strong> and then execute it in the next line.<br><br><img src='./assets/js/bind2.png'/></p>"
            },
            {
                "name": "When would you use the bind function?",
                "description": "<p>A good use of the <code>bind</code> function is when you have a particular function that you want to call with a specific this value. You can then use <code>bind</code> to pass a specific object to a function that uses a <code>this</code> reference.</p><br> <img src='./assets/js/bind1.png'>"
            },
            {
                "name": "Explain currying in JavaScript and implement multiply(2)(3)(4)(10) using it?",
                "description": "<p>Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument.<br><br>In other words, when a function, instead of taking all arguments at one time, takes the first one and return a new function that takes the second one and returns a new function which takes the third one, and so forth, until all arguments have been fulfilled.<br><br><img src='./assets/js/currying.png'><br><br><strong>Note:</strong> Currying works because of JavaScript concept of closures. The closure created by the nested functions to retain access to each of the arguments. So inner function which do “return a * b * c * d” have access to all arguments.</p>"
            },
            {
                "name": "What is Scope and Scope Chain in JavaScript?",
                "description": "<p>Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.<br><br>There are three types of scopes in JS: <br><strong>#1. Global Scope</strong> - Variables or functions declared in the global namespace have global scope, which means all the variables and functions having global scope can be accessed from anywhere inside the code. <br><br><strong>#2. Local or Function Scope</strong> - Any variables or functions declared inside a function have local/function scope, which means that all the variables and functions declared inside a function, can be accessed from within the function and not outside of it. <br><br><strong>#3. Block Scope</strong> - Block scope is related to the variables declared using let and const. Variables declared with var do not have block scope. Block scope tells us that any variable declared inside a block { }, can be accessed only inside that block and cannot be accessed outside of it.<br><br><strong>##Scope Chain</strong> - When a variable is used in JavaScript, the JavaScript engine will try to find the variable’s value in the current scope. If it could not find the variable, it will look into the outer scope and will continue to do so until it finds the variable or reaches global scope. <br>If it’s still could not find the variable, it will either implicitly declare the variable in the global scope (if not in strict mode) or return an error.<br><img src='./assets/js/scopechain.png'></p>"
            },
            {
                "name": "What is a closure and how do we use it?",
                "description": "<p>Closures are everywhere in JavaScript.<br><br>Closures are basically, the inner function having access to the variables in the outer function scope, even after the outer function has returned. To use a closure, simply define a function inside another function and expose it, I mean return it.<br><br>Consider the below code. The variable <strong>b</strong> have an scope in outer function. So, at when we call the outer function, it can access the value of b.<br><br>So, how does the innerFn() access the value of <strong>b</strong>. This is where the JS feature of Closures comes into play.<br><br><em>When the “var inner” is created, the JS engine not only stores the function object information but also its scope information.&nbsp;</em>So, it stores a scope of variable <strong>b</strong> inside the inner function object.<br><br>Now it doesn’t matter where you call inner, whether in this file. It will always remember the value of <strong>a</strong> and <strong>b</strong>, as if a snapshot is been taken.<br><br><img src='./assets/js/closure.png'></p>"
            },
            {
                "name": "What is an anonymous function",
                "description": "<p>An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function.<br><br><img src='./assets/js/anonymous.png'></p>"
            },
            {
                "name": "What are Object Prototypes and how do we use them in JavaScript?",
                "description": "<p>In JavaScript everything is an Object. So whenever we create an function, there is a one object which is created for that function. But actually there is another object which is created which is known as the <em>Prototype</em> object.<br><br>Now, let's look how to create an function using prototype and the benefit of it. The below code have two function <em>haveFun</em> and <em>drinkBreak</em>. The function <em>haveFun</em> is an normal function inside the Constructor function. The function <em>drinkBreak</em> is created outside and added to the Prototype Object using it's reference prototype.<br><br><img src='./assets/js/functionprototype.jpg'><br><br>Both the function seems to be doing the same thing, then what's the benefit.<br>The benefit of declaring function using prototype is that it's created once in the Prototype object. So, now whenever we create a new instance of the Constructor function the function is not created again. As in the below screenshot, you can see that <strong>emp1</strong> and <strong>emp2</strong> both have <strong>name</strong> and <strong>haveFun</strong>. But the <strong>drinkBreak</strong> is inside the <strong>__proto__</strong>, which is a reference to Prototype object.<br><br><img src='./assets/js/functionprototype1.jpg'></p>"
            },
            {
                "name": "What is memoization?",
                "description": "<p>Memoization is a form of caching where the return value of a function is cached based on its parameters. If the parameter of that function is not changed, the cached version of the function is returned.<br>Let’s understand memoization, by converting a simple function to a memoized function: <br><br><img src='./assets/js/memiozation.png'></p>"
            },
            {
                "name": "Explain recursion in JavaScript?",
                "description": "<p>Recursion is a technique for iterating over an operation by having a function call itself repeatedly until it arrives at a result.<br>Now, in recursive function there are two parts. One is <strong>termination condition</strong> and other is the <strong>recursion</strong> itself. &nbsp;The termination condition is very important or else the recursion never stops and goes into infinite loop.<br><br>Let consider the below simple example to add numbers from the current passed number backwards till 1. Say we pass 3, then 3+2+1 = 6. In the below example <em>If(n≤0)</em> is the termination condition and <em>return n + add(n-1);</em> is the recursion.<br><br><img src='./assets/js/recursive.jpg'><br><br>The recursion works as shown in the diagram below.<br>It works like loop, so the first call will go to recursion part and give “3 + add(2)”.<br><br>Now the add(2) will be called and will be expended into “2 + add(1)”.<br>After that add(1) will be called and expanded into “1 + add(0)”.<br><br>Finally the add(0) will trigger the termination condition <em>If(n≤0)&nbsp;</em>and produce 0.<br>After this everything will be added 3 + 2 + 1 + 0 to give 6.<br><br><img src='./assets/js/recursiveoutput.jpg'></p>"
            },
            {
                "name": "What are constructor functions in JavaScript?",
                "description": "<p>In JavaScript, a constructor gets called when you try to create an object using the new keyword. The purpose of a constructor is <b>If we want to create multiple objects having similar properties and methods, constructor functions are used.</b>.<br><br><img src='./assets/js/constructor.png'></p>"
            },
            {
                "name": "How to make variables private in Constructor functions?",
                "description": "<p>Now, we implement the same in JavaScript using Closures. We have two closure functions <strong>setName</strong> and <strong>getName</strong> which are basically “setters” and “getters”. Now, the variable <strong>_name</strong> is private and cannot be accessed outside the function by <em>person._name</em> and we can access it only by <em>person.getName()</em><br><br><img src='./assets/js/privatevarconstructor.jpg'></p>"
            },
            {
                "name": "What is DOM?",
                "description": "<ul><li>DOM stands for Document Object Model. &nbsp;DOM is a programming interface for HTML and XML documents.</li><li>When the browser tries to render an HTML document, it creates an object based on the HTML document called DOM. Using this DOM, we can manipulate or change various elements inside the HTML document.</li></ul>"
            },
            {
                "name": "List all DOM events ",
                "description": "<ul><li><strong>onblur</strong> - The onblur event occurs when an HTML element loses focus. event is often used on input fields. event is often used with form validation (when the user leaves a form field).</li><li><strong>onchange</strong> - The onchange event occurs when the value of an HTML element is changed.  This event is similar to the oninput event. The difference is that the oninput event occurs immediately after the value of an element has changed, while onchange occurs when the element loses focus, after the content has been changed. The other difference is that the onchange event also works on &lt;select&gt; elements.</li><li><strong>onclick</strong> - The onclick event occurs when the user clicks on an HTML element.</li><li><strong>oncontextmenu</strong> - The oncontextmenu event occurs when the user right-clicks an HTML element to open the context menu.</li><li><strong>onfocus, onfocusin</strong> - The onfocus event occurs when an element gets focus. This event is often used on input fields.</li><li><strong>onfocusout</strong> - The onfocusout event occurs when an element looses focus. This event is often used on input fields. This event is often used with form validation (when the user leaves a form field).</li><li><strong>oninput</strong> - The oninput event occurs when an element gets user input. This event occurs when the value of an &lt;input&gt; or &lt;textarea&gt; element is changed. This event is similar to the onchange event. The difference is that the oninput event occurs immediately after the value of an element has changed, while onchange occurs when the element loses focus, after the content has been changed. The other difference is that the onchange event also works on &lt;select&gt; elements.</li><li><strong>onkeydown</strong> - The onkeydown event occurs when the user presses a key on the keyboard.</li><li><strong>onkeyup</strong> - The onkeyup event occurs when the user releases a key on the keyboard.</li><li><strong>onload</strong> - The onload event occurs when an object has been loaded. onload is most often used within the <body> element to execute a script once a web page has completely loaded all content (including images, script files, CSS files, etc.). The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.</li><li><strong>onscroll</strong> - The onscroll event occurs when an element's scrollbar is being scrolled. use the CSS overflow style property to create a scrollbar for an element.</li><li><strong>onselect</strong> - The onselect event occurs after some text has been selected in an element. The onselect event is mostly used on &lt;input type=\"text\"&gt; or &lt;textarea&gt; elements.</li></ul>"
            },
            {
                "name": "Difference between DOMContentLoaded and load Events",
                "description": "<p>These two events <strong>DOMContentLoaded</strong> and <strong>load</strong> are used to check when a webpage has loaded completely. Still, there are some factors that determine the preference of one over the other.<br><br><strong>DOMContentLoaded</strong> event gets executed once the basic HTML document is loaded and its parsing has taken place. This event doesn’t wait for the completion of the loading of add-ons such as stylesheets, sub-frames and images/pictures.<br><br><img src='./assets/js/dom.png'><br><br><strong>Advantages of using DOMContentLoaded event:</strong></p><ul><li>It helps in improving user experience as it shows messages or content much faster.</li><li>It takes lesser time in loading the page.</li></ul><br><br><p><strong>load</strong> event performs its execution differently. This event gets completed once all the components i.e. DOM hierarchy along with associated features of a webpage such as CSS files, JavaScript files, images/pictures, and external links are loaded. So basically, the load event helps in knowing when the page has fully-loaded.<br><br><img src='./assets/js/load.png'><br><br><strong>Advantages of using load event:</strong></p><ul><li>This event helps in knowing when all the components of the webpage is loaded.</li></ul>"
            },
            {
                "name": "Draw a Simple JavaScript Dom (Document Object Model).",
                "description": "<p><img src='./assets/js/jsdom.png'></p>"
            },
            {
                "name": "What do you mean by Browser Object Model (BOM)?",
                "description": "<p>Browser Object Model is known as BOM. It allows users to interact with the browser. A browser's initial object is a window. As a result, you may call all of the window's functions directly or by referencing the window. The document, history, screen, navigator, location, and other attributes are available in the window object.</p>"
            },
            {
                "name": "Why Browser Object Model (BOM) introduced in JavaScript?",
                "description": "<p>To interact with the browser, the Browser Object Model has some properties and methods. Some examples include, the height and width of the window/ screen.<br><br>Some of its methods include:</p><ul><li>window.open() – To open a new window</li><li>window.close() – To close the current window</li><li>window.moveTo() – To move the current window</li><li>window.resizeTo() – To resize the current window</li></ul>"
            },
            {
                "name": "Which method is used to retrieve a character from a certain index?",
                "description": "<p>The charAt() function of the JavaScript string finds a char element at the supplied index. The index number begins at 0 and continues up to n-1, Here n is the string length. The index value must be positive, higher than, or the same as the string length.</p>"
            },
            {
                "name": "What are arrow functions?",
                "description": "<p>Arrow functions were introduced in the ES6 version of javascript. They provide us with a new and shorter syntax for declaring functions. Arrow functions can only be used as a function expression.<br><br>Let’s compare the normal function declaration and the arrow function declaration in detail:<br><br><img src='./assets/js/arrow.png'><br><br>Arrow functions are declared without the function keyword. If there is only one returning expression then we don’t need to use the return keyword as well in an arrow function as shown in the example above. Also, for functions having just one line of code, curly braces { } can be omitted.<br><br><img src='./assets/js/arrow1.png'><br><br>If the function takes in only one argument, then the parenthesis () around the parameter can be omitted as shown in the code above.<br><br><img src='./assets/js/arrow2.png'><br><br>The biggest difference between the traditional function expression and the arrow function is the handling of <strong>this </strong>keyword. By general definition, <strong>this </strong>keyword always refers to the object that is calling the function. As you can see in the code above, <strong>obj1.valueOfThis() </strong>returns obj1 since <strong>this </strong>keyword refers to the object calling the function.<br><br>In the arrow functions, there is no binding of <strong>this </strong>keyword. <strong>This</strong> keyword inside an arrow function does not refer to the object calling it. It rather inherits its value from the parent scope which is the window object in this case. Therefore, in the code above, <strong>obj2.valueOfThis() </strong>returns the window object.</p>"
            },
            {
                "name": "What advantages are using arrow functions?",
                "description": "<ul><li><em>Compactness</em>: Arrow functions are easier to read and write.</li><li><em>Clarity</em>: When almost everything is an arrow function, any regular function immediately sticks out for defining the scope. A developer can always look up the next-higher function statement to see what this <code>this </code>object is.</li><li><em>Scope safety</em>: Until arrow functions, every new function defined its own value (a new object in the case of a constructor, undefined in strict mode function calls, the base object if the function is called as an \"object method\", etc.). An arrow function does not create its own this, the <code>this </code>value of the enclosing execution context is used.</li></ul>"
            },
            {
                "name": "When should you NOT use arrow functions in ES6 ",
                "description": "<p>Arrow functions should NOT be used:</p><ul><li>When we want function hoisting - as arrow functions are anonymous.</li><li>When we want to use this/arguments in a function - as arrow functions do not have this/arguments of their own, they depend upon their outer context.</li><li>When we want to use named function - as arrow functions are anonymous.</li><li>When we want to use function as a constructor - as arrow functions do not have their own this.</li><li>When we want to add function as a property in object literal and use object in it - as we can not access this (which should be object itself).</li></ul>"
            },
            {
                "name": "Prototypal Design Pattern?",
                "description": "<p>The Prototype Pattern produces different objects, but instead of returning uninitialized objects, it produces objects that have values replicated from a template – or sample – object. Also known as the Properties pattern, the Prototype pattern is used to create prototypes.<br><br>The introduction of business objects with parameters that match the database's default settings is a good example of where the Prototype pattern comes in handy. The default settings for a newly generated business object are stored in the prototype object.<br><br>The Prototype pattern is hardly used in traditional languages, however, it is used in the development of new objects and templates in JavaScript, which is a prototypal language.</p>"
            },
            {
                "name": "What is Prototypal Inheritance?",
                "description": "<p>Prototypal inheritance is to add new capabilities to a constructor function using Prototype.<br>Let's first understand what are Constructor functions. They are basically JavaScript way to implement the concept of Classes.<br>Let's consider the example below, where we have a “Car” constructor function. In it we have a “model”, which we are also returning by getModel(). Now we can create a new instance of it by using the “new” keyword. Each instance will have its own “this” and have its own getModel().<br><br><img src='./assets/js/functionprototype2.jpg'><br><br>Now, the problem is that every time we create a new instance we get a new copy of <em>getModel().</em> Suppose we have 100 instances, then we will have 100 copies.<br><br>In JavaScript as you know everything is an Object. Whenever a function is created there are two object one is the function object another is the prototype object. Now to access the <strong>Prototype</strong> object we have a property on the function object also known as “<strong>prototype</strong>”.<br><br>We should somehow move the logic for&nbsp;<em>getModel()</em> outside our Constructor function and that is where the concept of Prototype helps.<br><br><img src='./assets/js/functionprototype3.jpg'><br><br>We get the same result and this is known as <strong>Prototypal Inheritance</strong>. Also, each new instance don’t have its own getModel(), which we can see in below console log.<br><br><img src='./assets/js/functionprototype4.jpg'></p>"
            },
            {
                "name": "JavaScript Design Patterns?",
                "description": "<p>JavaScript design patterns are repeatable approaches for errors that arise sometimes when building JavaScript browser applications. They truly assist us in making our code more stable.<br><br>They are divided mainly into 3 categories&nbsp;</p><ul><li><strong>Creational Design Pattern: </strong>The object generation mechanism is addressed by the JavaScript Creational Design Pattern. They aim to make items that are appropriate for a certain scenario.</li><li><strong>Structural Design Pattern: </strong>The JavaScript Structural Design Pattern explains how the classes and objects we've generated so far can be combined to construct bigger frameworks. This pattern makes it easier to create relationships between items by defining a straightforward way to do so.</li><li><strong>Behavioral Design Pattern: </strong>This design pattern highlights typical patterns of communication between objects in JavaScript. As a result, the communication may be carried out with greater freedom.</li></ul>"
            },
            {
                "name": "What is the rest parameter and spread operator?",
                "description": "<p>Both rest parameter and spread operator were introduced in the ES6 version of javascript.<br><br><strong>Rest parameter ( … ):</strong></p><ul><li>It provides an improved way of handling the parameters of a function.</li><li>Using the rest parameter syntax, we can create functions that can take a variable number of arguments.</li><li>Any number of arguments will be converted into an array using the rest parameter.</li><li>It also helps in extracting all or some parts of the arguments.</li><li>Rest parameters can be used by applying three dots (...) before the parameters.</li></ul><br><img src='./assets/js/rest.png'><br><br><strong>**Note- Rest parameter should always be used at the last parameter of a function:</strong></p><br><br><p><strong>Spread operator (…): </strong>Although the syntax of the spread operator is exactly the same as the rest parameter, the spread operator is used to spreading an array, and object literals. We also use spread operators where one or more arguments are expected in a function call.<br><br><img src='./assets/js/spread.png'><br><br><strong>***Note</strong> - Key differences between rest parameter and spread operator:</p><ul><li>Rest parameter is used to take a variable number of arguments and turns them into an array while the spread operator takes an array or an object and spreads it</li><li>Rest parameter is used in function declaration whereas the spread operator is used in function calls.</li></ul>"
            },
            {
                "name": "What are the benefits of using spread syntax in ES6 and how is it different from rest syntax?",
                "description": "<p>ES6's spread syntax is very useful when coding in a functional paradigm as we can easily create copies of arrays or objects without resorting to <code>Object.create</code>, <code>slice</code>, or a library function. This language feature is used often in Redux and rx.js projects.<br><br><img src='./assets/js/es6spread.png'><br><br>ES6's rest syntax offers a shorthand for including an arbitrary number of arguments to be passed to a function. It is like an inverse of the spread syntax, taking data and stuffing it into an array rather than unpacking an array of data, and it works in function arguments, as well as in array and object destructuring assignments.<br><br><img src='./assets/js/es6rest.png'></p>"
            },
            {
                "name": "What are promises JavaScript?",
                "description": "<p>They are mainly used to do asynchronous task like calling a REST api and getting the result back. So, these network calls takes time.<br><br>When the network call is been made, the promise is in <strong>pending state</strong> which means promise has neither been fulfilled nor been rejected, it is in the pending state.<br><br>Once the network call is successful the promise returns a resolve function which means the async operation is completed and in case if it fails it returns reject function meaning operation has failed.<br><br>The resolve is captured by the .then() callback function and reject captured by .catch() callback function.<br><br>Optionally we can also use the fourth state called settled state which schedules a function to be called when the promise is settled i.e. either fulfilled or rejected. The settled is captured by the .finally() callback function</p>"
            },
            {
                "name": "What are classes in javascript?",
                "description": "<p>Introduced in the ES6 version, classes are nothing but syntactic sugars for constructor functions. They provide a new way of declaring constructor functions in javascript.<br><br>Key points to remember about classes:<ul><li>Unlike functions, classes are not hoisted. A class cannot be used before it is declared.</li><li>A class can inherit properties and methods from other classes by using the extend keyword.</li><li>All the syntaxes inside the class must follow the strict mode(‘use strict’) of javascript. An error will be thrown if the strict mode rules are not followed.</li></ul><br><img src='./assets/js/class.png'></p>"
            },
            {
                "name": "What are generator functions?",
                "description": "<p>Introduced in ES6 version, generator functions are a special class of functions.<br><br><strong>They can be stopped midway and then continue from where it had stopped.</strong><br><br>Generator functions are declared with the <strong>function*</strong> keyword instead of the normal <strong>function</strong> keyword<br><br><pre>function* genFunc(){<br>&nbsp;&nbsp;&nbsp;&nbsp;// Perform operation<br>}</pre><br><br>In normal functions, we use the <strong>return</strong> keyword to return a value and as soon as the return statement gets executed, the function execution stops:<br><br> <pre> function normalFunc(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return 22;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(2); // This line of code does not get executed<br>}</pre> <br><br>In the case of generator functions, when called, they do not execute the code, instead they return a <strong>generator object</strong>. This generator object handles the execution<br><br><pre> function* genFunc(){<br>&nbsp;&nbsp;&nbsp;&nbsp;yield 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;yield 4;<br>}<br>genFunc(); // Returns Object [Generator]{}</pre><br><br>The generator object consists of a method called <strong>next()</strong> , this method when called, executes the code until the nearest <strong>yield</strong> statement, and returns the yield value.<br><br><img src='./assets/js/generator.png'><br><br>As you can see in the code above, the last line returns done:true , since the code reaches the return statement.</p>"
            },
            {
                "name": "Explain WeakSet in javascript.",
                "description": "<ul><li>Weakset contains only objects and no other type.</li><li>An object inside the weakset is referenced weakly. This means, that if the object inside the weakset does not have a reference, it will be garbage collected.</li><li>Unlike Set, WeakSet only has three methods, <strong>add() </strong>, <strong>delete() </strong>and <strong>has() </strong>.</li></ul><br><img src='./assets/js/weakset.png'>"
            },
            {
                "name": "Differences between WeakSet and Set",
                "description": "<p>The main difference is that references to objects in Set are strong while references to objects in WeakSet are weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it. Other differences are,</p><ol><li>Sets can store any value Whereas WeakSets can store only collections of objects</li><li>WeakSet does not have size property unlike Set</li><li>WeakSet does not have methods such as clear, keys, values, entries, forEach.</li><li>WeakSet is not iterable.</li></ol>"
            },
            {
                "name": "Explain WeakMap in javascript.",
                "description": "<p>In javascript, Map is used to store key-value pairs. The key-value pairs can be of both primitive and non-primitive types. WeakMap is similar to Map with key differences:</p><ul><li>The keys and values in weakmap should always be an object.</li><li>If there are no references to the object, the object will be garbage collected.</li></ul><br><img src='./assets/js/weakmap.png'>"
            },
            {
                "name": "Differences between WeakMap and Map",
                "description": "<p>The main difference is that references to key objects in Map are strong while references to key objects in WeakMap are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it. Other differences are,</p><ol><li>Maps can store any key type Whereas WeakMaps can store only collections of key objects</li><li>WeakMap does not have size property unlike Map</li><li>WeakMap does not have methods such as clear, keys, values, entries, forEach.</li><li>WeakMap is not iterable.</li></ol>"
            },
            {
                "name": "Explain Destructuring in ES6?",
                "description": "<p>Destructuring is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. You can also handle nested structure by using nested destructuring syntax.<br><br><strong>Object Destructuring - You use an object literal on the left-hand-side of an assignment expression</strong> for object destructuring.<br><br><img src='./assets/js/objdestructure2.jpg'><br><br><strong>Nested Object Destructuring</strong><br>If there is nested object as in below case, we can destructure it by adding it's value to another object syntax<br><br><img src='./assets/js/objdestructure3.jpg'><br><br><strong>Array Destructuring</strong><br>Array destructuring is similar to object destructuring, but here instead of keys you assign any variable.<br><br><img src='./assets/js/objdestructure4.jpg'><br><br><strong>Skipping Items</strong><br>It is possible to skip items in array destructuring by omitting items with comma(,).<br><br><img src='./assets/js/objdestructure5.jpg'></p></div>"
            },
            {
                "name": "Difference between prototypal and classical inheritance",
                "description": "<p>Programers build objects, which are representations of real-time entities, in traditional OO programming. Classes and objects are the two sorts of abstractions. A class is a generalization of an object, whereas an object is an abstraction of an actual thing. A Vehicle, for example, is a specialization of a Car. As a result, automobiles (class) are descended from vehicles (object).<br><br>Classical inheritance differs from prototypal inheritance in that classical inheritance is confined to classes that inherit from those remaining classes, but prototypal inheritance allows any object to be cloned via an object linking method. Despite going into too many specifics, a prototype essentially serves as a template for those other objects, whether they extend the parent object or not.</p>"
            },
            {
                "name": "What is Temporal Dead Zone?",
                "description": "<p>Temporal Dead Zone is a behaviour that occurs with variables declared using <strong>let </strong>and <strong>const </strong>keywords. It is a behaviour where we try to access a variable before it is initialized. Examples of temporal dead zone:<br><br><img src='./assets/js/deadZone.png'><br><br><strong>Example 2</strong><br><br><img src='./assets/js/deadZone1.png'><br><br>In the code above, both in the global scope and functional scope, we are trying to access variables that have not been declared yet. This is called the <strong>Temporal Dead Zone</strong>.</p>"
            },
            {
                "name": "Difference between Async/Await and Generators usage to achieve the same functionality.",
                "description": "<ul><li>Generator function are executed yield by yield i.e one yield-expression at a time by its iterator (the next method) where as Async-await, they are executed sequential await by await.</li><li>Async/await makes it easier to implement a particular use case of Generators.</li><li>The return value of Generator is always {value: X, done: Boolean} where as for Async function it will always be a promise that will either resolve to the value X or throw an error.</li><li>Async function can be decomposed into Generator and promise implementation like:</li></ul><p><img src='./assets/js/asyncAwaitGenerator.png'></p>"
            },
            {
                "name": "What is the role of deferred scripts in JavaScript?",
                "description": "<p>The processing of HTML code while the page loads are disabled by nature till the script hasn't halted. Your page will be affected if your network is a bit slow, or if the script is very hefty. When you use Deferred, the script waits for the HTML parser to finish before executing it. This reduces the time it takes for web pages to load, allowing them to appear more quickly.</p>"
            },
            {
                "name": "What is the object and array type?",
                "description": "<p>The object type refers to a compound value where you can set properties (named locations) that each hold their own values of any type.<br><br><img src='./assets/js/object.png'><br><br>An array is an object that holds values (of any type) not particularly in named properties/keys, but rather in numerically indexed positions:<br><br><img src='./assets/js/array.png'></p>"
            },
            {
                "name": "What is event bubbling and capturing in JavaScript?",
                "description": "<p>For this we need to understand Event flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object. <br><br>We will first see <strong>Event Bubbling</strong>. - In this the event propagation, the event first triggers on the innermost target element .i.e. the child element first, and then successively triggers on the ancestors i.e. parents element in the order of the elements nested hierarchy till it reaches the outermost DOM element. <br><br><strong>It is totally vice-versa of Event Bubbling</strong><br><br>Where as in <strong>Event Capturing</strong>. - the event propagation, the event first triggers on the outermost element .i.e. the parent element first, and then successively triggers on the descendants i.e. child element in the order of the elements nested hierarchy till it reaches the innermost DOM element.</p>"
            },
            {
                "name": "Explain async await in JavaScript?",
                "description": "<p>The <code>Async</code> keyword is short for 'Asynchronous' and in always positioned before a function. This is done to indicate an <code>Async</code> function and more importantly, that the function being specified as <code>Async</code> will always return a promise.<br><br>The body of an <code>Async</code> function can contain zero or more <code>Await</code> keywords. The difference between an <code>Async</code> function with one or more <code>Await</code> keywords and one without any <code>Await</code> keywords is that the non <code>Await</code> function will behave in a synchronous manner while the one containing one or more <code>Await</code> keywords will act in an asynchronous way.<br><br>Next, we have the <code>Await</code> keyword. This keyword is only valid inside <code>Async</code> functions and it primarily serves to make JavaScript wait until the promise inside the <code>Async</code> function settles and returns a result. This single keyword is responsible for converting synchronous functions into asynchronous ones, just by the act of allowing other processes to run while awaiting a value from a promise(no pun intended :) ). So note that it only makes the promise containing code block wait, while the rest of the program executes normally.</p>"
            },
            {
                "name": "Explain Promise.all with async-await?",
                "description": "<p>The <em>Promise.all &nbsp;</em>method returns a single Promise that resolves when all of the promises in the <em>iterable</em> argument have resolved or when the <em>iterable</em> argument contains no promises. It rejects with the reason of the first promise that rejects.<br><br><img src='./assets/js/promiseall.jpg'><br><br>We should use <em>Promise.all</em> in only cases like above, where the result of one Promise is not dependent on other promise.</p>"
            },
            {
                "name": "Explain nested promises JavaScript?",
                "description": "<p>Nested promises are set of promises in which , the result of one promise we call another in the .then statement. It is very useful in practical applications, where the result of fetch from an API endpoint will result in sending the data to another endpoint. Nested promises can also be done with callback functions, but the code get complicated soon.<br><br>Let's look at an example of nested promises. Here we have three functions which return promises- <em>coinTossed, gotCoinTossedResult and happyTeam</em>. Now only the <em>coinTossed</em> is returning resolve() or reject() depending on random number. The other two functions are returning only resolve() for simplicity sake.<br><br>Now, when the <em>coinTossed</em> function is run and return a resolve(), then the immediate .then block will be run or else we will go to the .catch block. In the .then we are returning the next <em>gotCoinTossedResult&nbsp;</em>and in its .then we are returning the <em>happyTeam</em>. We are passing the message from one function to other, so it will be appended.<br><br><img src='./assets/js/cointoss.png'></p>"
            },
            {
                "name": "How do we handle errors in async-await function?",
                "description": "<p>In Promises we handle any error or reject in the .catch block. Let's look at the below example, where we are sending reject() from Promise inside a function expression. So, now the error will be caught by the .catch block and then we are displaying the same in console log.<br><br><strong>try…catch block available in JavaScript</strong><br><br><img src='./assets/js/tryCatch.png'></p>"
            },
            {
                "name": "What are the limitations of JavaScript?",
                "description": "<ol> <li><strong>Writing files on server</strong> - JavaScript cannot directly write files on server. However, they can do this using server-side script</li><li><strong>Disable JavaScript</strong> - Due to security reasons, every web browser provides an option to disable JavaScript.</li><li><strong>Networking</strong> - It cannot be used for Networking applications.</li><li><strong>Browser Compatibility</strong> - Applications may behave differently in different web browsers. To support all modern browsers, you need to write cross browser codes.</li><li><strong>Security</strong> - Since the code executes on client's computer, the chances are high for vulnerability and can be exploited for malicious purposes</li><li><strong>Databases</strong> - JavaScript cannot access databases. You need AJAX and a server-side script for this.</li></ol>"
            },
            
            {
                "name": "Different ways to make an object non-extensible?",
                "description": "<p>You can mark an object non-extensible in 3 ways,</p><ol> <li><strong>Object.freeze()</strong> - simply converts an object passed as the argument into a frozen state. An object called by this method can not have any further changes on it. <ul> <li>Cannot add new properties.</li><li> Cannot remove existing properties.</li><li> Cannot change existing property values.</li><li> Cannot reconfigure any existing property. writable and configurable are set to false.</li><li> Cannot change its prototype.</li></ul> <p> Trying to make any changes mentioned above after an object being frozen will fail and will throw errors in strict mode.<br><br><strong><em>Object.isFrozen()</em></strong> is an Object method to check if an object is frozen by passing the object as the argument, where the return type is a boolean</p></li><br><li> <strong>Object.seal() </strong>simply converts an object passed as the argument into a sealed state. An object called by this method can not have any new properties being added. But it <strong>can change</strong> existing property values as long as <em>writable</em> metadata is true. <ul> <li>Cannot add new properties.</li><li> Cannot remove existing properties.</li><li> Cannot reconfigure any existing property.</li><li> Cannot convert a data property to accessor property or vice versa.</li></ul> <p><strong><em>Object.isSealed()</em></strong> is an Object method to check if an object is sealed by passing the object as the argument, where the return type is a boolean</p></li><br><li> <strong>Object.preventExtensions() </strong>simply converts an object passed as the argument into a non-extensible state. An object called by this method can not have any new properties being added. This method inherits functionality from its superset object.seal. Hence, it <strong>can change</strong> existing property values as long as <em>writable</em> metadata is true. In contrast to sealed objects, non-extensible objects can be deleted or reconfigured. <p><strong><em>Object.isExtensible()</em></strong> is an Object method to check if an object is extensible by passing the object as the argument.</p></li></ol>"
            },
            {
                "name": "Difference between const vs Object.freeze()",
                "description": "<p>In <strong>const</strong> reassignment of the variable is not allowed but the value referenced by the const variable can still be changed. <br><br>#Ex. Value is Immutable<br> <img src='./assets/js/const-object.png'> <br><br>#Binding is Mutable<br> <img src='./assets/js/const-object1.png'><br><br>#Mutable binding with object<br> <img src='./assets/js/const-object2.png'></p><br><br><p><strong>Object.freeze()</strong> prevents modification or extension to the existing value of an object. <br><br>Ex. Ignoring the value modification to an object<br> <img src='./assets/js/const-object3.png'> <br><br>#But the same work on binding<br> <img src='./assets/js/const-object4.png'></p>"
            },
            {
                "name": "Difference between Object.values() vs Object.entries()",
                "description": "<p><code>Object.values()</code> takes an object and returns an array with the values, in the same order that a for…in loop function would give us. Object.values doesn’t follow the prototype chain and only iterates over the value that are directly on the provided object.<br><img src='./assets/js/object-value.png'><br><br><strong>Object.entries()</strong> returns an array with arrays of key-value pairs:<br><img src='./assets/js/object-entries.png'></p>"
            },
            {
                "name": "Difference between native, host and user objects?",
                "description": "<ul><li>Native objects are objects that are part of the JavaScript language defined by the ECMAScript specification, such as <code>String</code>, <code>Math</code>, <code>RegExp</code>, <code>Object</code>, <code>Function</code>, etc.</li><li>Host objects are provided by the runtime environment (browser or Node), such as <code>window</code>, <code>XMLHTTPRequest</code>,<code>DOM</code> nodes etc.</li><li><code>User objects</code> are objects defined in the javascript code. For example, User object created for profile information</li></ul>"
            },
            {
                "name": "'Deep-Freeze' object in JavaScript?",
                "description": "<p>To make an object immutable, we generally use utilize <code>Object.freeze()</code>, which prevents the addition of new properties and prevent deletion and changes to existing properties to some extent. However, while <code>Object.freeze()</code> provides somewhat kind of a solution, it only handles the problem to the next nesting level, as in reality it performs a shallow freeze during its process. This means that properties that are objects or arrays can still be mutated:<br><br><img src='./assets/js/freezeexample.png'><br><br>Here to solve the issue we can use recursion method, by checking if each property is itself an object using, <code>Object.isFrozen()</code> method which is returning <code >false</code>, then apply <code>Object.freeze()</code> to it:<br><br><img src='./assets/js/deepfreezeexample.png'></p>"
            },
            {
                "name": "How do you check if a key exists in an object?",
                "description": "<ul> <li>Traditional way <br><pre>var user = {name:'test'} <br>//Test condition <br>user.name === undefined //Output <br> true</pre> </li><li> The <strong><code>hasOwnProperty()</code></strong> method returns a boolean indicating whether the object has the specified property or not in it. <br><pre>object_name.hasOwnProperty('key_name')</pre> </li><li>Using <code>'in'</code> operator - <br><pre>!(keyName in objectName);</pre></li></ul>"
            },
            
            {
                "name": "instanceof / typeof operator in JavaScript",
                "description": "<p>If you want to check the type of an object at runtime, then use the instanceof operator where the result is a boolean.<br><br>where as typeof operator is used to find the data type of a JavaScript variable where the result is a string.</p>"
            },
            {
                "name": "String Reference",
                "description": "<ul> <li><strong>charAt(x)</strong> - This function will return the character at the x position within the string.<br><img src='./assets/js/stringcharat.png'><br><br></li><li><strong>charCodeAt(x)</strong> - This function will return the unicode value of the character at position ‘x’ within the string.<br><img src='./assets/js/stringchartat.png'><br><br></li><li><strong>concat(v1,v2..)</strong> - This function combines one or more strings(argv1,v2 etc) into existing one.<br><img src='./assets/js/stringconcat.png'><br><br></li><li><strong>fromCharcode(c1,c2)</strong> - This function will return a string created by using specified sequence of unicode values(argc1,c2).<br><img src='./assets/js/stringfromcharcode.png'><br><br></li><li><strong>indexOf(substr, [start])</strong> - Searches and (if found) returns the index number of the searched character or substring within the string. If not found, -1 is returned. “Start” is an optional argument specifying the position within string to begin the search. Default is 0.<br><img src='./assets/js/stringindexof.png'><br><br></li><li><strong>lastIndexOf(substr, [start])</strong> - Searches and (if found) returns the index number of the searched character or substring within the string. Searches the string from end to the beginning. If not found, -1 is returned. “Start” is an optional argument specifying the position within string to begin the search. Default is string.length-1.<br><img src='./assets/js/stringlastindexof.png'><br><br></li><li><strong>match(regexp)</strong> - Executes a search for a match within a string based on a regular expression. It returns an array of information or null if no match is found.<br><img src='./assets/js/stringmatch.png'><br><br></li><li><strong>replace(regexp/substr, replacetext)</strong> - Searches and replaces the regular expression (or sub string) portion (match) with the replaced text instead.<br><img src='./assets/js/stringreplace.png'><br><br></li><li><strong>search(regexp)</strong> - Tests for a match in a string. It returns the index of the match, or -1 if not found.<br><img src='./assets/js/stringsearch.png'><br><br></li><li><strong>slice(start, [end])</strong> - This function returns a substring of the string based on the “start” and “end” index arguments, NOT including the “end” index itself. “End” is optional, and if none is specified, the slice includes all characters from “start” to end of the string.<br><img src='./assets/js/stringslice.png'><br><br></li><li><strong>split(delimiter, [limit])</strong> - This will split a string into many according to the specified delimiter, and returns an array containing each element. The optional “limit” is an integer that lets you specify the maximum number of elements to return.<br><img src='./assets/js/stringsplit.png'><br><br></li><li><strong>substr(start, [length])</strong> - This function returns the characters in a string beginning at “start” and through the specified number of characters, “length”. “Length” is optional, and if omitted, up to the end of the string is assumed.<br><img src='./assets/js/stringsubstr.png'><br><br></li><li><strong>substring(from, [to])</strong> - It returns the characters in a string between “from” and “to” indexes, NOT including “to” itself. “To” is optional, and if omitted, up to the end of the string is assumed.<br><img src='./assets/js/stringsubstring.png'><br><br></li><li><strong>toLowerCase()</strong> - This will return the string with all of its characters converted to lowercase.<br><img src='./assets/js/stringlowercase.png'><br><br></li><li><strong>toUpperCase()</strong> - This will return the string with all of its characters converted to uppercase.<br><img src='./assets/js/stringuppercase.png'><br><br></li><li><strong>includes()</strong> - It is used to check whether a string contains the specified string or characters.<br><img src='./assets/js/stringincludes.png'><br><br></li><li><strong>endsWith()</strong> - This function checks whether a string ends with specified string or characters.<br><img src='./assets/js/stringendwith.png'><br><br></li><li><strong>repeat()</strong> - This returns a new string with a specified number of copies of an existing string.<br><img src='./assets/js/stringrepeat.png'><br><br></li><li><strong>valueOf()</strong> - It is used to return the primitive value of a String object.<br><img src='./assets/js/stringvalueof.png'><br><br></li><li><strong>trim()</strong> - This function removes whitespace from both ends of a string.<br><img src='./assets/js/stringtrim.png'><br><br></li></ul>"
            },
            {
                "name": "toString() vs join()?",
                "description": "<p>array.toString() and array.join() does the same thing of converting an array into a string. Since toSting() does not accept any arguments its is less preferred while in join() one can pass arguments. Ex. [1,2,3].join(', ')</p>"
            },
            {
                "name": "Explain join() vs concat() in Javascript",
                "description": "<p>To join two or more strings, use the JavaScript <code>string.concat(string1, string2, ..., stringX)</code> method. A new string is returned with the joined strings.<br><br>The <code>array.join(separator)</code> method returns an array as a string. The elements will be separated by a specified separator. The default separator is comma (,).<br><br><code>join()</code> does not change the original array.</p>"
            },
            {
                "name": "Remove whitespace from both sides of a string in JavaScript",
                "description": "<p>The <code>trim()</code> method is used to remove whitespace from both sides of a string.<br><br><pre>var myStr = \" &nbsp; &nbsp; Cup of tea! &nbsp; &nbsp;\";<br>myStr.trim( ) <br><br>// Output - 'Cup of tea!'</pre>"
            },
            {
                "name": "How do you make first letter of the string in an uppercase?",
                "description": "<img src='./assets/js/first-letter-capital.png'>"
            },
            {
                "name": "How to convert string to title case with javascript?",
                "description": "<img src='./assets/js/first-letter-capital1.png'>"
            },
            {
                "name": "How do you check whether a string contains a substring?",
                "description": "<p>There are 3 possible ways to check whether a string contains a substring or not,</p><ul><li>Using includes(): String.includes() method to test a string contains a substring<br><img src='./assets/js/substring.png'></li><li>Using indexOf(): String.indexOf() which returns the index of a substring. If the index value is not equal to -1 then it means the substring exist in the main string.<br><img src='./assets/js/substring1.png'></li><li>Using RegEx: The advanced solution is using Regular expression's test method(RegExp.test), which allows for testing for against regular expressions<br><img src='./assets/js/substring2.png'></li></ul>"
            },
            {
                "name": "Search for a string in a string with JavaScript (search() / includes())",
                "description": "<p>To search for a string in a string, use the search() method. The method searches a string for a specified value. The returned value is the position of the match. However, -1 is returned if the match isn’t found.<br><br>Where as the <code>includes()</code> method returns true if a string contains a specified string, otherwise false</p>"
            },
            {
                "name": "Difference between substr() vs substring() vs slice() in JavaScript?",
                "description": "<p>The substr() and substring() methods are simpler, yet they have some differences. The 2nd argument of the substring() method is the index to halt the search, whereas the 2nd&nbsp;parameter of substr() is the maximum length.<br><br><strong>substr() method</strong> - The substr() method returns the characters in a string beginning at the specified location. It goes through the number of characters which is specified by the user. The parameters of substr(start, len):</p><ul><li>start&nbsp;− Location start extracting characters.</li><li>length&nbsp;− The count of characters to extract.</li></ul><pre>let str = \"Hello world!\"; <br> str.substr(1, 4) <br> // Console Returns \"ello\"</pre><br><br><p><strong>substring() method</strong> - The substring() method returns subset of a string. The parameters of substring(i1, i2):</p><ul><li>i1&nbsp;– Index from where you want the substring.</li><li>i2&nbsp;− Index till when you want the substring.</li></ul><pre>let str = \"Hello world!\"; <br> str.substring(1, 4) <br> // Console Returns \"ell\"</pre>"
            },
            {
                "name": "Array Reference",
                "description": "<ul> <li><strong>map( )</strong> - This method creates a new array with the results of calling a provided function on every element in this array. <br><img src='./assets/js/arraymap.png'><br><br></li><li><strong>filter( )</strong> - This method creates a new array with only elements that passes the condition inside the provided function.<br><img src='./assets/js/arrayfilter.png'><br><br></li><li><strong>sort( )</strong> - This method is used to arrange/sort array's elements either in ascending or descending order.<br><img src='./assets/js/arraysort.png'><br><br></li><li><strong>forEach( )</strong> - This method helps to loop over array by executing a provided callback function for each element in an array.<br><img src='./assets/js/arrayforeach.png'><br><br></li><li><strong>concat( )</strong> - This method is used to merge two or more arrays and returns a new array, without changing the existing arrays.<br><img src='./assets/js/arrayconcat.png'><br><br></li><li><strong>every( )</strong> - This method checks every element in the array that passes the condition, returning true or false as appropriate.<br><img src='./assets/js/arrayevery.png'><br><br></li><li><strong>some( )</strong> - This method checks if at least one element in the array that passes the condition, returning true or false as appropriate.<br><img src='./assets/js/arraysome.png'><br><br></li><li><strong>includes( )</strong> - This method checks if an array includes the element that passes the condition, returning true or false as appropriate.<br><img src='./assets/js/arrayincludes.png'><br><br></li><li><strong>join( )</strong> - This method returns a new string by concatenating all of the array's elements separated by the specified separator.<br><img src='./assets/js/arrayjoin.png'><br><br></li><li><strong>reduce( )</strong> - <p>Reduce the values of an array to a single value (going left-to-right) and for right-to-left use reduceRight().<br>The reduce() method executes a provided function for each value of the array (from left-to-right)<br>The return value of the function is stored in an accumulator (result/total)<br><img src='./assets/js/reduce.png'><br><br></li><li><strong>find( )</strong> - This method returns the value of the first element in an array that pass the test in a testing function.<br><img src='./assets/js/arrayfind.png'><br><br></li><li><strong>findIndex( )</strong> - This method returns the index of the first element in an array that pass the test in a testing function.<br><img src='./assets/js/arrayfindindex.png'><br><br></li><li><strong>indexOf( )</strong> - This method returns the index of the first occurrence of the specified element in the array, or -1 if it is not found.<br><img src='./assets/js/arrayindexof.png'><br><br></li><li><strong>fill( )</strong> - This method fills the elements in an array with a static value and returns the modified array.<br><img src='./assets/js/arrayfill.png'><br><br></li><li><strong>slice( )</strong> - This method returns a new array with specified start to end elements.<br><img src='./assets/js/arrayslice.png'><br><br></li><li><strong>reverse( )</strong> - This method reverses an array in place. Element at last index will be first and element at 0 index will be last.<br><img src='./assets/js/arrayreverse.png'><br><br></li><li><strong>push( )</strong> - This method adds one or more elements to the end of array and returns the new length of the array.<br><img src='./assets/js/arraypush.png'><br><br></li><li><strong>pop( )</strong> - Remove an item from the end of an array and returns the item(string) which was removed from that array<br><img src='./assets/js/pop.png'><br><br></li><li><strong>shift( )</strong> - This method removes an item from the start of an array and returns the item which was removed from that array<br><img src='./assets/js/arrayshift.png'><br><br></li><li><strong>unshift( )</strong> - This method adds one or more elements to the beginning of an array and returns the new length of the array.<br><img src='./assets/js/arrayunshift.png'><br><br></li></ul>"
            },
            {
                "name": "Difference between some() vs every() in javascript",
                "description": "<p>The <code>some()</code> method checks if any of the elements in an array pass a test (provided as a function)., where as the <code>every()</code> method returns true if all elements in an array passes the test (provided as a function).<br><br><code>some()</code> executes the function once for each element in the array: which means, during the execution If it finds an array element where the function is returning a <em>true</em> value against the test condition, then some() method returns true (and does not check the remaining values), Otherwise it returns false<br><br>The <code>every()</code> method executes the function once for each element present in the array: which means, during the execution If it finds an array element where the function is returning a <em>false</em> value against the test condition, then every() method returns false (and does not check the remaining values), Otherwise it returns true<br><br><strong>Both</strong> does not execute the function for empty array elements.<br><br><strong>Both</strong> does not change the original array.</p>"
            },
            {
                "name": "How to check if an object is an array or not? (object is array)",
                "description": "<p><img src='./assets/js/arrayorobject.png'></p>"
            },
            {
                "name": "List different ways of empty array in Javascript?",
                "description": "<p>In Javascript,&nbsp;there are many ways to empty an array in Javascript, below we have listed 4 major<br><br><img src='./assets/js/emptyarray.png'></p>"
            },
            {
                "name": "How do you add an element at the begining of an array? How do you add one at the end?",
                "description": "<p><img src='./assets/jsCode/addelement.png'></p>"
            },
            {
                "name": "Remove element from an array in JavaScript (splice)",
                "description": "<p>To remove a single element from an array in JavaScript, the splice() method is used. With that you can also replace, and/or add elements in an array.<br><br>We are using the splice() method to remove a single element by setting the location from where it start, and the number of elements to be removed. Here, we have set 1, therefore only a single element will get removed:</p><pre><pre>let myArr = [1,2,3,4,5];<br>let newArr = myArr.splice(3, 1);<br>console.log(myArr);<br>console.log(newArr);<br><br>// Output <br>[1, 2, 3, 5]<br>[4]</pre>"
            },
            {
                "name": "Methods to Search Through Arrays (include, find, filter)",
                "description": "<p>The <code>.includes()</code> method returns a boolean value and is perfect for telling you whether an element exists in an array or not. It gives a simple true or false answer.<br><strong>Syntax</strong>: <code>arr.includes(valueToFind, [fromIndex]); //fromIndex is optional</code><br><strong>Example</strong>: <code>const alligator = ['thick scales', 80, '4 foot tail', 'rounded snout'];<br>alligator.includes('thick scales'); // returns true</code><br><br>The <code>.find()</code> method is used to find and return the first occurence of an element in an array, under a defined testing function. and if the condition is not met, it returns <code>undefined</code><br><strong>Syntax</strong>: <code>array.find(testingFunction);</code><br><code>const trees = [<br> { name: 'birch', count: 4 },<br> { name: 'oak', count: 2 }<br> { name: 'maple', count: 5 },<br> { name: 'oak', count: 8 }<br> ];<br><br> const result = trees.find(tree => tree.name === 'oak');<br> // { name: 'oak', count, 2 }</code><br><br>The <code>.filter()</code> method is like the find() method, in that it requires a function passed and a condition for what will be returned. The main difference is, filter() always returns an array, even if there is only one matching element. But it will return all the matching elements, whereas find() only returns the first matching. The important thing with filter is that it returns all the elements matching your criteria.<br><strong>Syntax</strong>:<code>var newArray = array.filter(function(item) {<br> return condition;<br> });</code><br><code>var heroes = [ <br> {name: 'Batman', franchise: 'DC'}, <br> {name: 'Ironman', franchise: 'Marvel'}, <br> {name: 'Thor', franchise: 'Marvel'}, <br> {name: 'Superman', franchise: 'DC'} <br> ]; <br> <br> var marvelHeroes = heroes.filter(function(hero) { <br> return hero.franchise == 'Marvel'; <br> }); <br> <br> // [ {name: 'Ironman', franchise: 'Marvel'}, {name: 'Thor', franchise: 'Marvel'} ]</code></p>"
            },
            {
                "name": "What are the different types of pop-up boxes in JavaScript?",
                "description": "<p><strong>Alert Box</strong> - The alert box is for an alert or message to the user. User needs to click “OK”. The alert() method is used to add a message in the alert:<br><br><strong>Prompt Box</strong> - To input a value from the user and display it, use the prompt box. Users need to click “OK” to return the entered input, else click “Cancel” to return null.<br><br><strong>Confirm Box</strong> - The confirm box is used in JavaScript to take user's consent or accept something. User need to click “OK” to return true, else click “Cancel” to return false.</p>"
            },
            {
                "name": "Role of JSON.stringify() in JavaScript",
                "description": "<p>When data is sent to a web server, it has to be in the form of string. The <code>JSON.stringify()</code> method is used in JavaScript to convert an object to string.</p>"
            },
            {
                "name": "Anonymous functions vs JavaScript closures",
                "description": "<p><strong>JavaScript Closures</strong> - Closures are basically, the inner function having access to the variables in the outer function scope, even after the outer function has returned. To use a closure, simply define a function inside another function and expose it, I mean return it.<br><br><strong>Anonymous functions</strong> - An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function.</p>"
            },
            {
                "name": "What does “javascript:void(0)” mean?",
                "description": "<p>The javascript:void(0) evaluates an expression even if its addition to a web page brings unwanted output.<br><br>Use the void(0) to get the undefined primitive value. Here, we are preventing the page from loading on clicking the hyperlink:</p>"
            },
            {
                "name": "How to unset a JavaScript variable?",
                "description": "<p>The “undefined” is used to unset a variable in JavaScript.<br><br>Declare and initialize a variable:</p><strong>var a = 50;</strong><p>Now reassign the variable with undefined since we wish to unset it:</p><strong>a = undefined; </strong><p>The output displays undefined:</p>"
            },
            {
                "name": "Is JavaScript synchronous or asynchronous and what is event loop?",
                "description": "<p>JavaScript is a synchronous, blocking, single-threaded language. That just means that only one operation can be in progress at a time.<br><br>Many people think JavaScript is asynchronous because we can do async tasks like setTimeout, callbacks, promises in it. But the asynchronous behaviour of JavaScript(setTimeout, callbacks, promises) is not a part of JavaScript itself and built on top of JavaScript language in browser and accessed through browser APIs.<br><br>The browser have a Call Stack, Browser API and Message Queue and the order of their processing is called <strong>event loop</strong>.<br><br><img src='./assets/js/eventloop.png'><br><br>The output will be A C B , even after the setTimeout() was set to display “b” after 0 ms. This happens because of the internal working of the browser.<br><br>The main() is pushed into Call Stack, which then console logs A. Then it is popped out and the setTimeout is pushed into Call Stack. Now the setTimeout() uses Browser API, so it is pushed there and the console log C is pushed into Call Stack.</p><ul><li>Even with the delay of 0ms the exec() for setTimeout have to go to the Message Queue.</li><li>After all the statements of main() is run and the Call Stack is empty, then only the exec() from Message Queue can be pushed to the Call Stack.</li></ul><p>This is how event loop works and the asynchronous, non-blocking part of JavaScript comes from.</p>"
            },
            {
                "name": "Format numbers as currency string in JavaScript",
                "description": "<p>The number formatter would allow you to format numbers as the currency you want it to work.</p><ul> <li>USD - <br><img src='./assets/js/formatus.png'></li><li>EUR - <br><img src='./assets/js/formateur.png'></li></ul>"
            },
            {
                "name": "Difference between parseInt(string) and Number(string) in JavaScript?",
                "description": "<p>The <strong>parseInt()</strong> method parses up to the first non-digit and returns the parsed value, whereas <strong>Number()</strong> converts the string into a number, which can also be a float.<br><br><pre>console.log(parseInt(\"20demo\"));<br>//Output: 20 </pre><br><br>Using the <strong>Number(string)</strong> method, the expression returns NaN:<br><pre>console.log(Number(\"20demo\"));<br>//Output: NaN</pre><br><br>Let us now workaround for a float value with both Number(string) and parseInt(string)<br><pre>console.log(Number(\"12.99demo\"));<br>console.log(\"parseInt(\"12.99demo\"));<br>//Output: NaN / 12</pre></p>"
            },
            {
                "name": "How to detect a mobile device with JavaScript?",
                "description": "<p>To detect a mobile device, let's say Android device, use the navigator.userAgent.match. Here, we have set it in a function:<br><br><pre><strong> Android: function() {<br>&nbsp; &nbsp; &nbsp; return navigator.userAgent.match(/Android/i);<br> },<br><br>iOS: function() {<br>&nbsp; &nbsp; &nbsp; return navigator.userAgent.match(/iPhone|iPad/i);<br> },</strong></pre></p>"
            },
            {
                "name": "What is the value of typeof undefined == typeof NULL?",
                "description": "<p>The expression will be evaluated to true, since NULL will be treated as any other undefined variable.<br>Note: JavaScript is case-sensitive and here we are using NULL instead of null.</p>"
            },
            {
                "name": "How do you make synchronous / asynchronous XML HTTP request?",
                "description": "<p>Browsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing 3rd parameter as true for asynchronous and false for synchronous.<br><br><img src='./assets/js/xmlhttprequest.png'><br><br><img src='./assets/js/xmlhttprequest1.png'></p>"
            },
            {
                "name": "How would you create a private variable in JavaScript?",
                "description": "<p>To create a private variable in JavaScript that cannot be changed you need to create it as a local variable within a function. Even if the function is executed the variable cannot be accessed outside of the function. For example:<br><img src='./assets/js/private-variable.png'><br><br>To access the variable, a helper function would need to be created that returns the private variable.<br><img src='./assets/js/private-variable1.png'></p>"
            },
            {
                "name": "Difference between: `function Person(){}`, `var person = Person()`, and `var person = new Person()`?",
                "description": "<p><code>function Person(){}</code> is just a normal function declaration.<br><br><code>var person = Person()</code> invokes the <code>Person</code> as a function, and not as a constructor. Invoking as such is a common mistake if it the function is intended to be used as a constructor. Typically, the constructor does not return anything, hence invoking the constructor like a normal function will return <code>undefined</code> and that gets assigned to the variable intended as the instance.<br><br><code>var person = new Person()</code> creates an instance of the Person object using the <code>new</code> operator, which inherits from <code>Person.prototype</code><br><br><img src='./assets/js/share.png'><br><br><strong>What will happen if I write <code>Person.name = “John”;</code></strong><br>Answer : It will throw error Cannot assign to read-only property ‘name’.</p><br><p><strong>What will happen if I write </strong><br><pre>var p1 = new Person(“YYY”,21); <br>p1.name =”ZZZ”; <br>console.log(p1.name);<br>Answer: ZZZ</pre></p>"
            },
            {
                "name": "Difference between a `.forEach` vs `.map()` loop",
                "description": "<p>The main difference between <code>.forEach</code> and <code>.map()</code>, is that <code>.map()</code> utilizes <code>return statement</code> and actually returns a new Array of the same size.<br><br><strong><code>forEach</code></strong></p><ul><li>Iterates through the elements in an array.</li><li>Executes a callback for each element.</li><li>Does not return a value.</li></ul><p><img src='./assets/js/foreach.png'><br><br><strong><code>map</code></strong></p><ul><li>Iterates through the elements in an array.</li><li>'Maps' each element to a new element by calling the function on each element, creating a new array as a result.</li></ul><p><img src='./assets/js/map.png'></p>"
            },
            {
                "name": "Boolean Reference",
                "description": "<p><table class='table table-striped'><tbody><tr><th style='width:20%'>Method</th><th>Description</th></tr><tr><td>toString()</td><td>Converts a boolean value to a string, and returns the result</td></tr><tr><td>valueOf()</td><td>Returns the primitive value of a boolean</td></tr></tbody></table></p>"
            },
            {
                "name": "Class Reference",
                "description": "<p>A class is a type of function, but instead of using the keyword function to initiate it, we use the keyword class, and the properties are assigned inside a constructor() method:<br><br>Class Methods<br><table class='table table-striped'><tbody><tr><th style='width:20%'>Method</th><th>Description</th></tr><tr><td>constructor()</td><td>A special method for creating and initializing objects created within a class</td></tr></tbody></table><br><br>Class Keywords<br><table class='table table-striped'><tbody><tr><th style='width:20%'>Keyword</th><th>Description</th></tr><tr><td>extends</td><td>It is used to create a child class of another class (parent)</td></tr><tr><td>static</td><td>The <code>static</code> keyword defines static methods for classes. Static methods are called directly on the class - without creating an instance/object of the class</td></tr><tr><td>super</td><td>The <code>super</code> keyword refers to the parent class. It is used to call the constructor of the parent class and to access the parent's properties and methods.</td></tr></tbody></table><br><br>Example of extends and Super keyword<br><img src='./assets/js/super-class.png'></p>"
            },
            {
                "name": "JSON Reference",
                "description": "<p><table class='table table-striped'><tbody><tr><th style='width:30%'>Method</th><th>Description</th></tr><tr><td>parse()</td><td>When receiving the data from a web server, the data is always in a string format. But you can convert this string value to javascript object using parse() method. <code>var userString = '{'name':'John','age':31}';<br> var userJSON = JSON.parse(userString);<br> console.log(userJSON);<br>// {name: 'John', age: 31}</code></td></tr><tr><td>stringify()</td><td>When sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.<code>var userJSON = {'name': 'John', age: 31}<br> var userString = JSON.stringify(user);<br> console.log(userString); <br>// '{'name':'John','age':31}'</code></td></tr></tbody></table></p>"
            },
            {
                "name": "Difference between splice() and slice()",
                "description": "<p>The <strong>slice()</strong> method returns a new array with a copy of sliced item from the original array. Here, the first optional argument marks the beginning index and the second optional argument marks the ending index. Where as index marked with negative number starts from the end of the array. <br>###Slice method won't mutate the original array but it returns the subset as new array.<br><br>The <strong>splice()</strong> method changes the content of the array in place and can be used to add or remove items from the array. It returns the removed items in the array. The first argument marks the array position for insertion or deletion, whereas the second optional argument marks the number of elements to be deleted. <br>###Splice method modifies the original array and returns the deleted array.</p>"
            },
            {
                "name": "Difference between filter() and map()",
                "description": "<p><strong>filter()</strong>: creates a new array with elements that fall under a given condition from an existing array.<br><br><strong>map()</strong>: 'Maps' each element to a new element by calling the function on each element, creating a new array as a result.</p>"
            },
            {
                "name": "Difference between findIndex() and indexof()",
                "description": "<p><strong>findIndex()</strong>: This function returns index of the first element of the given array which satisfies the testing function.<br><br><strong>indexof()</strong>: This function is used to find the index of the first occurrence of the element provided for search as the argument to the function. If the item is present more than once, the indexOf method returns the position of the first occurence.</p>"
            },
            {
                "name": "Difference between find() and filter()",
                "description": "<p><strong>find()</strong>: The find() method returns the first value that matches from the collection. Once it matches the value in findings, it will not check the remaining values in the array collection.<br><br><strong>filter()</strong>: creates a new array with elements that fall under a given condition from an existing array.</p>"
            },
            {
                "name": "Difference between console.dir and console.log?",
                "description": "<ul><li><code>console.log(input)</code>: The browser logs in a nicely formatted manner</li><li><code>console.dir(input)</code>:  The browser logs just the object with all its properties</li></ul>"
            },
            {
                "name": "Difference between window and document?",
                "description": "<table><thead><tr><th>Window</th><th>Document</th></tr></thead><tbody><tr><td>It is the root level element in any web page</td><td>It is the direct child of the window object. This is also known as Document Object Model(DOM)</td></tr><tr><td>By default window object is available implicitly in the page</td><td>You can access it via window.document or document.</td></tr><tr><td>It has methods like alert(), confirm() and properties like document, location</td><td>It provides methods like getElementById, getElementByTagName, createElement etc</td></tr></tbody></table>"
            },
            {
                "name": "What is a Regular Expression or RegExp?",
                "description": "<p>A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations.</p><img src='./assets/js/searchStringPattern.png'>"
            },
            {
                "name": "What are modifiers in RegExp?",
                "description": "<p>Modifiers can be used to perform case-insensitive and global searches. Let's list down some of the modifiers,</p><table><thead><tr><th>Modifier</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td>Perform case-insensitive matching</td></tr><tr><td>g</td><td>Perform a global match rather than stops at first match</td></tr><tr><td>m</td><td>Perform multiline matching</td></tr></tbody></table><br><img src='./assets/js/globalmodifier.png'>"
            },
            {
                "name": "What are RegExp patterns?",
                "description": "<p>Regular Expressions provided group of patterns in order to match characters. Basically they are categorized into 3 types,</p><ul><li><strong>Brackets:</strong> These are used to find a range of characters. For example, below are some use cases,<ul><li>[abc]: Used to find any of the characters between the brackets(a,b,c)</li><li>[0-9]: Used to find any of the digits between the brackets</li><li>(a|b): Used to find any of the alternatives separated with |</li></ul></li><li><strong>Metacharacters:</strong> These are characters with a special meaning For example, below are some use cases,<ul><li>d: Used to find a digit</li><li>s: Used to find a whitespace character</li><li>b: Used to find a match at the beginning or ending of a word</li></ul></li><li><strong>Quantifiers:</strong> These are useful to define quantities For example, below are some use cases,<ul><li>n+: Used to find matches for any string that contains at least one n</li><li>n*: Used to find matches for any string that contains zero or more occurrences of n</li><li>n?: Used to find matches for any string that contains zero or one occurrences of n</li></ul></li></ul>"
            },
            {
                "name": "Object Equality - How would you compare two objects in JavaScript?",
                "description": "<p>To check that, you can get the keys for both the objects. If the number of properties doesn't match, these two objects are not equal. Secondly, you will check each property whether they have the same value. If all the properties have same value, they are equal.<br><br><img src='./assets/js/objectcompare.png'></p>"
            },
            {
                "name": "What Is Garbage Collection in JavaScript?",
                "description": "<p>This type of <em>automatic memory management</em> monitors memory allocation to reclaim and free up allocated memory blocks that are no longer needed by the JavaScript program.</p>"
            },
            {
                "name": "List the 7 Error Types in JavaScript.",
                "description": "<ul><li><strong>EvalError:</strong> Error regarding the global function <em>eval()</em></li><li><strong>InternalError:</strong> Internal error in the JS engine (stack overflow, etc)</li><li><strong>RangeError: </strong>Numeric variable or parameter is outside of valid range</li><li><strong>ReferenceError:</strong> Invalid variable reference</li><li><strong>SyntaxError:</strong> Syntax error while parsing code in <em>eval()</em></li><li><strong>TypeError:</strong> Parameter or variable not of a valid type</li><li><strong>URIError:</strong> Invalid parameters passed to <em>decodeURI()</em> or <em>encodeURI()</em></li></ul>"
            },
            {
                "name": "What’s the Difference Between the Javascript Engine & Javascript Runtime?",
                "description": "<p>The JavaScript engine converts JavaScript code into machine code that can be executed by the computer, while the JavaScript runtime is the environment in which the code is executed, such as a web browser or <strong>Node.js</strong></p>"
            },
            {
                "name": "How Can You Optimize the Performance of a Javascript Application?",
                "description": "<ul><li>Minimize use of global variables</li><li>Prioritize access to local variables</li><li>Use caching &amp; memoization</li><li>Compressing code and further uglification of code</li><li>Use object &amp; array literals instead of constructors</li><li>Avoid unnecessary function calls</li><li>Defer the load of JavaScript that is not necessary</li><li>Use web workers when you need to execute code that needs a lot of execution time</li><li>Remove unused JavaScript such as unused library which is not in use</li></ul>"
            },
            {
                "name": "How Can You Measure the Performance of a JavaScript Function?",
                "description": "<p>You can use <em>performance.now()</em> to return high-resolution timestamps in milliseconds and thus calculate the time it takes for a function to execute, as shown below.<br><img src='./assets/js/performance.png'></p>"
            },
            {
                "name": "How does a javascript engine work behind the scenes ?",
                "description": "<p>Every browser provides a JavaScript engine that runs the JavaScript code.<br><br><strong>Execution Context</strong> - When the JavaScript engine scans a script file, it makes an environment called the Execution Context that handles the entire transformation and execution of the code. <br>During the context runtime, the parser parses the source code and allocates memory for the variables and functions. The source code is generated and gets executed. <br>There are two types of execution contexts: global and function. The global execution context is created when a JavaScript script first starts to run, and it represents the global scope in JavaScript. A function execution context is created whenever a function is called, representing the function's local scope.<br><br><strong>Phases of the JavaScript Execution Context</strong> -<br>#1. In <strong>Creation Phase</strong>, the JavaScript engine creates the execution context and sets up the script's environment. The <strong>Creation Phase</strong> includes creating the global and function execution contexts, creating the scope chain, and allocating memories for the variables and functions.<br>#2. During the <strong>Execution Phase</strong>, the JavaScript engine executes the code line by line. This includes evaluating and executing statements.</p><br><br><p><strong>Call Stack</strong> - To keep the track of all the contexts, including global and functional, the JavaScript engine uses a <strong>call stack</strong>. A call stack is also known as an 'Execution Context Stack', 'Runtime Stack', or 'Machine Stack'. <br>When the engine first starts executing the script, it creates a global context and pushes it on the stack. Whenever a function is invoked, similarly, the JS engine creates a function stack context for the function and pushes it to the top of the call stack and starts executing it. <br>When execution of the current function is complete, then the JavaScript engine will automatically remove the context from the call stack and it goes back to its parent.<br><br><img src='./assets/js/callstack.png'><br><br>In this example, the JS engine creates a global execution context that enters the creation phase.<br><br>First it allocates memory for <code>funcA</code>, <code>funcB</code>, the <code>getResult</code> function, and the <code>res</code> variable. Then it invokes <code>getResult()</code>, which will be pushed on the call stack.<br><br>Then <code>getResult()</code> will call <code>funcB()</code>. At this point, <code>funcB</code>'s context will be stored on the top of the stack. Then it will start executing and call another function <code>funcA()</code>. Similarly, <code>funcA</code>'s context will be pushed. <br><br>Once execution of each function is done, it will be removed from the call stack.</p>"
            },
            {
                "name": "Difference between TypeScript and JavaScript",
                "description": "<table><tbody><tr><td><strong>TypeScript</strong></td><td><strong>JavaScript</strong></td></tr><tr><td>Superset of JavaScript developed to overcome code complexity for large projects.</td><td>A scripting language that helps create dynamic web page content.</td></tr><tr><td>Errors can be found and corrected during compile time.</td><td>Errors can be found only during run-time as it is an interpreted language.</td></tr><tr><td>Strongly typed, supports both static and dynamic typing.</td><td>Weakly typed, no option for static typing.</td></tr><tr><td>Converted into JavaScript code to be understandable for browsers.</td><td>Can be directly used in browsers.</td></tr><tr><td>Since it is a superset, all the JavaScript libraries, and other JavaScript code works without any changes.</td><td>JS libraries work by default.</td></tr><tr><td>There is support for ES3, ES4, ES5 and ES6.</td><td>No support for compiling additional ES3, ES4, ES5 or ES6 features.</td></tr><tr><td>Supports modules, generics and interfaces to define data.</td><td>No support for modules, generics or interface.</td></tr><tr><td>Functions can have optional parameters.</td><td>Functions cannot have optional parameters.</td></tr><tr><td>Numbers and strings are considered as interfaces.</td><td>Number and string are objects.</td></tr><tr><td>Powerful and intuitive language for large projects.</td><td>Neat and clean, most suitable for simple web applications.</td></tr><tr><td>Community support is still growing.</td><td>Huge community support with lots of documentation and support for solving issues.</td></tr><tr><td>Prototyping is possible</td><td>No support for prototyping.</td></tr><tr><td>Takes time to learn and code, scripting knowledge is a must.</td><td>Can be learned on the go, no prior scripting experience is needed.</td></tr><tr><td>Proper build setup (npm package) is required for static type definitions</td><td>No build setup is required.</td></tr></tbody></table>"
            },
            {
                "name": "What are the differences between ES6 class and ES5 function constructors?",
                "description": "<p>ES6 class constructors work quite the same as class constructors in other object-oriented languages. They are used to create new objects.<br><br>ES5 function constructors are also used to create objects. The above example can be modified as following through the use of function constructors.</p><table><thead><tr><th><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ES6 class constructors</strong></th><th><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ES5 function constructors</strong></th></tr></thead><tbody><tr><td>As discussed above ES6 class constructors creates objects by adding function to their prototypes (Blueprint).</td><td>ES5 function constructors also create objects along with inheritance property.&nbsp;</td></tr><tr><td>It ensures that<i> this</i> keyword used by the developer is referring to the object being created by the developer.&nbsp;</td><td>Any function can be used as a function constructor and it primarily focuses on the creation of reusable object creation code.</td></tr><tr><td>Its syntax is similar to object creation in other object-oriented programming languages.</td><td>Its syntax is unique and is not generally found in other object-oriented programming languages.</td></tr><tr><td>This can be said to be a syntax base for constructor functions and instantiate objects using a new operator.</td><td>This also uses a new operator for object creation but focuses on how the objects are being instantiated.</td></tr></tbody></table>"
            },
            {
                "name": "enums in JavaScript and typescript",
                "description": "<p>Enums in Javascript - <br><img src='./assets/js/enumjs.png'><br><br>Enums in Typescript - <br><img src='./assets/js/enumts.png'></p>"
            },
            
            
            {
                "name": "How do you clone an object?",
                "description": "<p><strong><code>var obj = {a: 1 ,b: 2}<br>var objclone = Object.assign({},obj);</code></strong><br><br>Now the value of <code>objclone</code> is <code>{a: 1 ,b: 2}</code> but points to a different object than <code>obj</code>.<br><br>Note the potential pitfall, though: <code>Object.assign()</code> will just do a shallow copy, <em>not</em> a deep copy.  This means that nested objects aren’t copied.  They still refer to the same nested objects as the original:<br><br><img src='./assets/js/objclone.png'></p>"
            },
            
            {
                "name": "What does the term Transpiling stand for?",
                "description": "<p>There's no way to polyfill new syntax that has been added to the language. So the better option is to use a tool that converts your newer code into older code equivalents. This process is commonly called&nbsp;<strong>transpiling</strong>, a term for&nbsp;<em>transforming + compiling</em>.<br><br>Typically you insert the&nbsp;<em>transpiler</em>&nbsp;into your build process, similar to your code linter or your minifier. There are quite a few great transpilers for you to choose from:</p><ul><li><p><strong>Babel</strong>: Transpiles ES6+ into ES5</p></li><li><p><strong>Traceur</strong>: Transpiles ES6, ES7, and beyond into ES5</p></li></ul>"
            },
            {
                "name": "Difference between Relative path and absolute path",
                "description": "<p>A relative path describes the location of a file relative to the current (working) directory*.</p>"
            },
            {
                "name": "Difference between Function, Method and Constructor calls in JavaScript",
                "description": "<p>In JavaScript, a <strong>function</strong> is a piece of reusable code that has the potential to take input values, perhaps do something with them, and potentially return a value.<br><br>Now, if the same function is called with the new keyword preceding it, it is known as <strong>constructor</strong> since it creates and returns a new object. (The collection of all objects that were generated using the same function constructor is then known as a class)<br><br>Likewise suppose a JavaScript Object contains as property in the form of function definition then it becomes a <strong>method</strong></p>"
            },
            {
                "name": "What are Service Workers and when can you use them?",
                "description": "<p>It’s a technology that allows your web application to use cached resources first, and provide default experience offline, before getting more data from the network later. This principle is commonly known as Offline First.<br><br>Service Workers actively use promises. A Service Worker has to be installed,activated and then it can react on fetch, push and sync events.<br><br>As of 2017, Service Workers are not supported in IE and Safari.</p>"
            }
        ]
    },
    {
        "folder": "JavaScript Coding",
        "title": "JavaScript Coding",
        "url": "/folder/JavaScript Coding",
        "icon": "logo-javascript",
        "question": [
            {
                "name": "Output - every() true/false?",
                "description": "<br><img src='./assets/jsCode/every.png'>"
            },
            {
                "name": "Output - undefined var inside for loop result - NaN",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/resultnan.png'><br><br><strong>Answer: </strong> The result is <strong>NaN</strong> because the var result  variable is immediately initialized, by setting it to undefined, Inside the loop since the result in uninitialized so the value of the variable result remains undefined. as we know, undefined isn’t converted into any number, so using it in maths calculations returns NaN. i.e., <strong>undefined + 5 = NaN</strong></p>"
            },
            {
                "name": "Output - eval method",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/eval.png'><br><br><strong>Answer: </strong> The result is <strong>B) 105</strong> because The eval function we see here can be used to calculate the Javascript in the form of string also as the as multiplication operator has greater priority than addition operator so it will first execute 10 x 10 is equal to 100 and then it at 5 to it so it becomes <strong>Number 105</strong></p>"
            },
            {
                "name": "Output - string and array when updated",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/printstringhello.png'><br><br><strong>Answer: </strong> The result is <strong>\"𝗛𝗲𝗹𝗹𝗼\" ['𝗛', '𝗮', '𝗹', '𝗹', '𝗼']</strong> because string is immutable. so this will log original str i.e., \"𝗛𝗲𝗹𝗹𝗼\", and array is mutable so this will log updated value ['𝗛', '𝗮', '𝗹', '𝗹', '𝗼']</p>"
            },
            {
                "name": "Output -  union of arrays / merge with unique value / intersection of array using prototype",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/arrayconcat.png'><br><br><strong>Answer: </strong> The result is <strong>[1, 2, 3, 4]</strong> because here the logic is in this way <br><strong>#1.</strong> First get the elements that are contained in first array using <strong>filter method</strong> and not contained in the second array using <strong>includes method</strong>, <br><strong>#2.</strong> concat the result with the element of the second array using <strong>concat method</strong></p>"
            },
            {
                "name": "Find the intersection of two arrays programatically",
                "description": "<p> The logic here is to create a hashmap with the elements of the firstArray as the keys. <br>After that, you can use the hashmap's O(1) look up time to check if the element exists in the hash <br>If it does exist, add that element to the new array.<br><br>Since we only want to push unique elements in our case... we can implement a counter to keep track of what we already added<br><br><img src='./assets/js/intersection.png'></p>"
            },
            {
                "name": "Output - remove duplicate values from an object using Map",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/arraymap.png'><br><br><strong>Answer: </strong> The result is <strong>[{ 𝗸𝗲𝘆: 𝟭 }, { 𝗸𝗲𝘆: 𝟮 }]</strong> because the element exists in map object then skip to the next element, if not, add it to the result array.</p>"
            },
            {
                "name": "Output - Sum using Currying",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/currying.png'><br><br><strong>Answer:</strong> The result is <strong>5 5</strong> because Currying is a function that takes one argument at a time and returns a new function expecting the next argument</p>"
            },
            {
                "name": "Output - Closures, Currying, and Higher-Order Functions with returning multiple values from the function",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/problem7.png'><br><br><strong>Answer: </strong> The result is <strong>6 10</strong> because <br><strong>#1.</strong> In the first statement  we get back the array [𝟲, function(z) { return 2 * 3 + z; }]. so calling mul(2)(3)[0] evaluates to the first element of the array returned by the inner function, which is the product of 2 and 3, i.e., <strong>6</strong>. <br><strong>#2.</strong> //returning index 1, which returns the function that takes z as a parameter. i.e., calls the second closure in the array with an argument of 4, and once z is passed to the function it returns 2*3 + 4 = <strong>10</strong>.</p>"
            },
            
            {
                "name": "Output - Object Key using square bracket operator",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/objectkey.png'><br><br><strong>Answer:</strong> The result is <strong>Jayesh 24</strong> because value of the key can be any expression as long as it is wrapped in brackets []. The result of an expression enclosed in brackets becomes the property name. i.e., age</p>"
            },
            {
                "name": "Ouput - replace string expression",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/replace.png'><br><br><strong>Answer:</strong> The result is <strong>jx@gmail.com logged-in</strong> replace() method is used to replace a part of a given string with a new substring</p>"
            },
            {
                "name": "output - using default value and function expression for addition",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/defaultpara.png'><br><br><strong>Answer:</strong> The result is <strong>3 6</strong> Default values allow the named parameters to get initialized with a default value or when no value is passed. Now using a value in first parameter will overwrite it and while using function add as default value expression the value becomes 3+3 = 6</p>"
            },
            {
                "name": "Output - array using reverse and then push new item",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/arrayrev.png'><br><br><strong>Answer:</strong> The result is <strong>[3,2,1,4] [3,2,1,4]</strong> <br> <strong>#1.</strong> The reverse() method reverses the array immediately; this means that the original elements of the array are swapped, and the original sequence is lost. <br><strong> #2.</strong> since reverse and push both method mutates the original array.so arr2.push will also modify the arr1. <br><strong>#3.</strong> after push operation this will log [3,2,1,4] because they’re both referencing the same array</p>"
            },
            {
                "name": "Output - using Object.is check for number, string and objects.",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/objectis.png'><br><br><strong>Answer:</strong> The result is <strong>false false</strong> <br> <strong>#1.</strong> TheObject.is() workons on strict comparison operator .i.e - === <br><strong> #2.</strong> return false since for strict equality number and string comparison will return false. <br><strong>#3.</strong> The specified objects look the same; however, they are two different objects as they refer to different memory addresses. This is why the Object.is() method marked these objects as unequal after comparing their references and return false.</p>"
            },
            {
                "name": "Output - compare string using sort method",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/stringsort.png'><br><br><strong>Answer:</strong> The result is <strong>true</strong> <br> since both str1 and str2 will be 'ehllo' after sorting and join. so this will return true</p>"
            },
            {
                "name": "Output - trim",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/trim.png'><br><br><strong>Answer:</strong> The result is <strong>\"&nbsp;&nbsp;Jayesh&nbsp;&nbsp;\" \"Jayesh\"</strong> <br> string.trim() removes sequences of whitespaces and line terminators from both the start and the end of the string. It doesn't change the original string but returns a new string without leading and trailing white spaces.</p>"
            },
            {
                "name": "Output  - Array with single and multiple arguments",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/emptyarray.png'><br><br><strong>Answer:</strong> The result is <strong>[empty x 3][1,2,3]</strong> <br> <strong>#1.</strong>  arr1 = new Array(3); will create array arr1 with a specified number of empty slots (e.g. Array(3) creates the array [empty x 3]). so this will log [𝗲𝗺𝗽𝘁𝘆 × 𝟯] <br><strong>#2.</strong>new Array(1, 2, 3); //an array with three elements</p>"
            },
            {
                "name": "Output - console.log(foo(), typeof x, typeof y);",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/scopelocalglobal.png'><br><br><strong>Answer: </strong> The result is <strong>1, undefined and number</strong> because <br><strong>#1.</strong> Of course the return value of <code>foo()</code> is 1 due to the increment operator. But the statement <code>let x = y = 0</code> declares a local variable x. Whereas y declared as a global variable accidentally. <br><strong>#2.</strong> Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the global variable <code>y</code> is available outside the function, the value is 0 and type is number.</p>"
            },
            {
                "name": "Output - Equality Coercion",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/equalityProblem.png'><br><br><strong>Solution - </strong>Output in the following order due to equality coercion:<br><img src='./assets/jsCode/equalitySolution.png'></p>"
            },
            {
                "name": "Output - null and undefined",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/equalityProblem2.png'><br><br><strong>Answer: </strong> The result is <strong>true false</strong> because here the logic is in this way <br><strong>#1.</strong> both undefined and null will return false. i.e., Boolean(null) and Boolean(undefined) both return false and the equality operator is used it compares only the values. So, == returns <strong>true</strong> <br><strong>#2.</strong> when we use the strict equality operator (===) which checks both type and value, since undefined and null are of different types (object is not equal to undefined), the strict equality operator returns <strong>false</strong>.</p>"
            },
            {
                "name": "Output - using spread operator",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/spread.png'><br><br><strong>Answer: </strong> The result is <strong>{name: 'Jayesh', admin: true}</strong> because here the logic is in this way <br>Using the && operator to return the object only when condition is true. If the object is returned then it’ll be spread into person object. And if the expression returns false then nothing gets spread, and no new keys are added to the object.<br><br><br><strong>Problem</strong><br><img src='./assets/jsCode/spread1.png'><br><br><strong>Answer: </strong> The result is <strong>{0: 'Jayesh', 1: 'Virat'}</strong> becaue her the spread syntax will unpack the values of an array into a new Object where the indexes of the array becomes the object's key and the elements in the array become object's values</p>"
            },
            {
                "name": "Output of Boolean values using OR operator",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/console.png'><br><br><strong>Answer: </strong> The result is <strong>{} \"\" []</strong> because here the logic is in this way <br><strong>#1.</strong>const one = false || { } || null; // <strong>Boolean(false) || Boolean({}) || Boolean(null) = false || true || false = true;</strong> since one of them is true so this will returns the first true operand value <strong>i.e., {}</strong> <br><strong>#2.</strong>const two = null || false || \"\"; // <strong>Boolean(null) || Boolean(false) || Boolean(\"\") = false || false || false = false;</strong> since all falsy so this will returns the last operand value <strong>i.e., \"\"</strong><br><strong>#3.</strong> const three = [ ] || 0 || true; // <strong>Boolean([]) || Boolean(0) || Boolean(true) = true || false || true = true;</strong> since one of them is true so this will returns the first true operand value <strong>i.e., []</strong></p>"
            },
            {
                "name": "Output - Union of duplicate values in two Array ",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/arrayfilter.png'><br><br><strong>Answer: </strong> The result is <strong>[1,2,3]</strong> because here the logic is in this way <br><strong>#1.</strong> using filter we are checking array 1 which includes values in array 2 and only returning that matched value</p>"
            },
            {
                "name": "Output - display value using ?? / nullish operator ",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/displayamount.png'><br><br><strong>Answer: </strong> The result is <strong>0</strong> because here due to hoisting - amount is <strong>undefined</strong> inside arrow function so this will evaluate <strong>0</strong></p>"
            },
            {
                "name": "Output - Baba / NaN / banana",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/baba.png'><br><br><strong>Answer: </strong> The result is <strong>banana BANANA</strong> here the logic is in this way <br><strong>#1.</strong> 'b' + 'a' +( + 'b') + 'a' // here due to <strong>unary plus (+) operator precedence</strong>, <strong>(+'b')</strong> will try to convert 'b' to a number. Since 'b' is not a number, the result is NaN (\"Not a Number\") <br><strong>#2.</strong> 'b' + 'a' + NaN + 'a' // here, adding NaN to \"ba\" turns NaN into the string \"NaN\" due to type conversion, this gives 'baNaN'. <br><strong>#3.</strong> the result 'ba'+'NaN'+'a' will become 'baNaNa'.</p>"
            },
            {
                "name": "Output - concat",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/merge.png'><br><br><strong>Answer: </strong> The result is <strong>[1,2] [1,2,3,4]</strong> here the logic is in this way <br><strong>#1.</strong> Array.concat() returns a new array and does not modify the existing arrays. <br><strong>#2.</strong> returns a new array res having the merge result</p>"
            },
            
            {
                "name": "Output - global variable value in inner and outer function",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/problem8.png'><br><br><strong>Answer: </strong> The result is <strong>JC JC</strong> because here the variable name is declared outside of the function getName and is a global variable. It means the variable name can be used anywhere in the program. Now the value of a global variable name can be changed inside a function.</p>"
            },
            {
                "name": "Output - prototype in function declaration and expression",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/proto3.png'><br><br><strong>Answer: </strong> The result is <strong>{constructor: f} undefined</strong> because <strong>Regular functions</strong> are working well with objects using the <strong>new keyword</strong>. They have the constructor function by which values can be initialized during object creation. It can be managed using the prototype chaining. However, arrow function does not have constructor function, prototype chaining. That means, unlike <strong>regular functions</strong>, arrow functions can never be called with the new keyword because they do not have the [[Construct]] method. As such, the prototype property also does not exist for arrow functions.</p>"
            },
            {
                "name": "Output - What is the result of X, Y, Z / A, B C object?",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/xyzObjectProblem.png'><br><br><strong>Solution - </strong><br><img src='./assets/jsCode/xyzObject.png'><br><br>Adding objects as properties of another object should be done carefully.<br><br>Writing x[y]={name:”Vivek”}, is same as writing x[‘object Object’]={name:”Vivek”},<br><br>While setting a property of an object, javascript coerces the parameter into a string.<br><br>Therefore, since y is an object, it will be converted to ‘object Object’.<br><br>Both x[y] and x[z] are referencing the same property.</p>"
            },
            {
                "name": "Output - Console results of string and numbers?",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/stringNumberConsole.png'><br><br><strong>Solution - </strong><br><img src='./assets/jsCode/stringNumberConsoleResult.png'></p><br><br><p><strong>Problem</strong><br><img src='./assets/jsCode/stringNumberConsole1.png'><br><br><strong>Solution - </strong><br><img src='./assets/jsCode/stringNumberConsoleResult1.png'></p><p><strong>Problem</strong><br><img src='./assets/jsCode/stringNumberConsole2.png'><br><br><strong>Solution - </strong><br><img src='./assets/jsCode/stringNumberConsoleResult2.png'></p>"
            },
            {
                "name": "Output - Hoisting a variable and random function",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/hoistingProblem.png'><br><br><strong>Solution - </strong>Output is <strong>NaN</strong><p>random() function has functional scope, since x is declared and hoisted in the functional scope.<br><br>Rewriting the random function will give a better idea about the output:<br><img src='./assets/jsCode/hoistingSolution.png'></p>"
            },
            {
                "name": "Output - What is the issue with the below code and how it can be fixed? (console sort)",
                "description": "<p><strong>Problem</strong><br><strong>const array=[1,2,15,4,30,7,45];<br>console.log(array.sort());</strong><br><br>The sort() method is used to sort the elements of an array. But the output of the above is not what expected out of sort() function.<br><br>This is because the default sort is according to tring Unicode points. The fix to it is by adding an anonymous function and tell to sort according to ascending or descending order. <br><br><img src='./assets/jsCode/sort.png'><br><br><strong>Sorting Programatically</strong><br><img src='./assets/jsCode/sortprogram.png'></p>"
            },
            {
                "name": "Output - How to shuffle an array in JavaScript?",
                "description": " <ul> <li><img src='./assets/jsCode/shuffle.png'></li><li><strong>[3,5,1,95,8,23].sort( ()=>Math.random()-0.5)</strong></li><li><img src='./assets/jsCode/shuffle1.png'></li></ul>"
            },
            {
                "name": "Output - What should be the value of “i” so that we get the mentioned result?",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/printi.png'><br><br><strong>Answer</strong><br><br>Everything is ok, but the last one produce NaN(Not a Number) because “<em>0 divide by 0 will produce infinity”</em><br><br>So, we need a number which is like zero but gives 1 if we divide it by itself. Fortunately there is such a number in JavaScript. The number is the minimum value that is allowed in JavaScript and is represented by <strong>Number.MIN_VALUE</strong><br><br><img src='./assets/jsCode/printians.png'></p>"
            },
            {
                "name": "Output - What are the different way to access “this” inside an inner function for below code?",
                "description": "<p><img src='./assets/jsCode/problem1.png'><br><br><strong>Solution 1</strong> - Use call method to use the outer “this” inside the innerFunc().<br><br><img src='./assets/jsCode/solution1.png'><br><br><strong>Solution 2</strong> - Use bind method to use the outer “this” inside the innerFunc().<br><br><img src='./assets/jsCode/solution2.png'><br><br><strong>Solution 3</strong> - Use a “that” variable in&nbsp;cleanRoom() for accessing “this” inside innerFunc(). Basically “that” is nothing but the outer “this”.<br><br><img src='./assets/jsCode/solution.png'><br><br><strong>Solution 4</strong> - Use arrow function in the innerFunc(). Arrow functions have special meaning for “this” and it is that, it takes the value of “this” from the enclosing scope and is very useful in this case.<br><br><img src='./assets/jsCode/solution3.png'></p>"
            },
            {
                "name": "Output - What is the output of the below code and why?(identity)",
                "description": "<p><img src='./assets/jsCode/problem2.png'><br><br><strong>Problem</strong>What is the issue with the code and how can it be fixed?<br><br>The output logged will be:</p><strong><code>undefined<br>Johnny Deep</code></strong><p>The first console.log prints <strong>undefined</strong> because heroIdentity()is been invoked in the global context (i.e., the window object) where the <strong>_name</strong> property doesn’t exists.<br><br>The other way to fix it is by binding, it to hero object by using bind.</p><strong><code>var heroIdentity = hero.getIdentity.bind(hero);</code></strong>"
            },
            {
                "name": "Output - What is the output of the below code and why? (arguments / method)",
                "description": "<p><img src='./assets/jsCode/method.png'><br><br>The output logged will be:</p><strong><code>10<br>2</code></strong><p>When inside the method, fn() is called the “this” of the function fn is at window level. So, “this.length” will produce <strong>10</strong>.<br>Now, when <code>arguments[0]()&nbsp;</code>is called, then <code>arguments[0]()&nbsp;</code> is equivalent to “fn” and function fn is called. But “this” now is the arguments array, which is of length 2 because it contains two arguments (fn, 1). So, “this.length” will produce <strong>2</strong>.</p>"
            },
            {
                "name": "Output - What is the output of the below code and why? (console proto)",
                "description": "<p><strong>Problem</strong></p><strong>console.log(('hello').__proto__.__proto__.__proto__);</strong></p><br><p><strong>Answer</strong> - The output logged will be: <code>null</code><br><br>The reason is for prototype chaining. The __proto__ of ‘hello’ is the global String.</p><strong>console.log(('hello').__proto__);</strong><p><img src='./assets/jsCode/proto1.png'><br><br>Then the __proto__ of it is the global Object.</p><strong>console.log(('hello').__proto__.__proto__);</strong><p><img src='./assets/jsCode/proto2.png'><br><br>Now, the Object is the final thing from which everything in JavaScript is created and it points to <strong>null</strong>.</p>"
            },
            {
                "name": "Output - Find the missing number in the array",
                "description": "<p><img src='./assets/jsCode/missingNumber.png'></p>"
            },
            {
                "name": "Output - Find the min and max values in the array",
                "description": "<p><img src='./assets/jsCode/minmax.png'><br><br><img src='./assets/jsCode/minmax1.png'><br><br><img src='./assets/jsCode/minmax2.png'></p>"
            },
            {
                "name": "Output - Capitalize all words in a sentence",
                "description": "<p><img src='./assets/jsCode/capitalize.png'><br><br><img src='./assets/jsCode/capitalize1.png'><br><br><img src='./assets/jsCode/capitalize2.png'><br><br><img src='./assets/jsCode/capitalize3.png'></p>"
            },
            {
                "name": "Output - Find the duplicate values in an string / find a character with maximum occurrence in a string",
                "description": "<ul><li><strong>Using filter + indexOf</strong><br><img src='./assets/jsCode/duplicateValue4.png'></li><li><strong>Using classical for loop</strong><br><img src='./assets/jsCode/duplicateValue5.png'></li></ul>"
            },
            {
                "name": "Output - Find the duplicate values in an array",
                "description": "<ul> <li><strong>By simply Traversing the Array</strong> <br><img src='./assets/jsCode/duplicateValue.png'></li><li><strong>Using filter + indexOf</strong> <br><img src='./assets/jsCode/duplicateValue1.png'></li><li><strong>Using reduce + includes</strong> <br><img src='./assets/jsCode/reduceinclude.png'></li><li><strong>Using includes</strong> <br><img src='./assets/jsCode/duplicateValue2.png'></li><li><strong>Using ES6 \"Set\"</strong> <br><img src='./assets/jsCode/duplicateValue3.png'></li></ul>"
            },
            {
                "name": "Output - Remove duplicates from an array",
                "description": "<ul><li><strong>Using empty array / helper array</strong> <br><img src='./assets/jsCode/duplicate.png'></li><li><strong>Using Object</strong> <br><img src='./assets/jsCode/duplicate1.png'></li><li><strong>Using filter + indexOf</strong> <br><img src='./assets/jsCode/duplicate2.png'></li><li><strong>Using ES6 \"Set\"</strong> <br><pre>var arr=[...new Set(arr)]</pre></li><li><strong>Using ES6 \"Set\" with from()</strong> <br><pre>var temp.from(new Set(arr))</pre><br>Here, the <strong>from()</strong> method returns an Array object from any object which has a capability of defining length property or any iterable object.</li></ul>"
            },
            {
                "name": "Output - Reverse each word in the sentence",
                "description": "<p><img src='./assets/jsCode/reverse4.png'><br><br><img src='./assets/jsCode/reverse5.png'><br><br><img src='./assets/jsCode/reverse6.png'><br><br><img src='./assets/jsCode/reverse2.png'><br><br><img src='./assets/jsCode/reverse.png'><br><br><img src='./assets/jsCode/reverse1.png'><br><br><strong>Reversing word greater than 5 letters</strong><br><img src='./assets/jsCode/reverse3.png'><br><br><img src='./assets/jsCode/reverseString.png'><br><br>Here, <strong>The <code>split()</code> method splits a string into an array of substrings, and returns the new array. If an empty string (\"\") is used as the separator, the string is split between each character, where as the <code>reverse()</code> method reverses the order of the elements in an array, and the <code>join()</code> method returns an array as a string.</strong></p>"
            },
            {
                "name": "Output - setTimeout Inside For Loop",
                "description": "<p><code>// setTimeout inside a For loop<br><br>for(var i = 0;i &lt; 5; i++){<br>&nbsp;&nbsp;&nbsp;setTimeout(function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('count ', i);<br>&nbsp;&nbsp;&nbsp;}, 3000);<br>}</code><br><br>//Console<br><br><code>count  5<br>count  5<br>count  5<br>count  5<br>count  5</code><br><br>The <em>setTimeout</em> function callback isn’t triggered until the for loop execution has completed. When the for loop has finished executing the value of i is 5. Now when the <em>setTimeout</em> call begins to execute it uses the last set value of i which is 5. Hence 5 is printed in all the <em>setTimeout</em> callbacks.</p>"
            },
            {
                "name": "Output - setTimeout Inside For Loop Using IIFE",
                "description": "<p>You can use IIFE to create a new scope for each setTimeout callback without polluting the global scope. Simply wrap up the setTimeout code inside a IIFE.</p><br><img src='./assets/jsCode/settimeoutforloop.png'>"
            },
            {
                "name": "Output - setTimeout Inside For Loop Using let Keyword",
                "description": "<p>The let keyword creates a separate scope for each iteration making it possible to print the consecutive variable value.</p><br><img src='./assets/jsCode/settimeoutforloop1.png'>"
            },
            {
                "name": "Output - indexOf",
                "description": "<p><img src='./assets/jsCode/problem3.png'><br><br><strong>Answer</strong>: The first answer is 1 because 2 is at position 1, second and third is -1 because the index does not use for object and arrays. If you want to find and element in array use map and then check the index. The last line answer is 4 because the string is consider as an array of char in javascript.</p>"
            },
            {
                "name": "Output - filter.call()",
                "description": "<p><img src='./assets/jsCode/problem4.png'><br><br>Answer: This will start reading after 5. The beauty of this question is how it is written. Sometimes look like a puzzle. It will return set of array <strong><em>[“W”, “o”, “r”, “l”, “d”]</em></strong></p>"
            },
            {
                "name": "Output - printMessage",
                "description": "<p><img src='./assets/jsCode/problem5.png'><br><br>Answer: Here, We are creating two objects printVal1 and printVal2. printVal1.printMessage() clearly logs In printVal1 …because message is initialize as “In printVal1 …”. In the next line assigning method printMessage to printVal2 Object. In printVal2 message is initialize as “In printVal2 …”. So code block will log: <strong>In printVal1 … and In printVal2 …</strong></p>"
            },
            {
                "name": "Output - return statement",
                "description": "<p><img src='./assets/jsCode/problem6.png'><br><br>Answer - when you see this example closely there is return and rest of the code is written after that. So JavaScript just return from second line of code. Code after line 2 will not be executed.</p>"
            },
            {
                "name": "Output - ===",
                "description": "<p><strong>Problem</strong><br><strong>console.log(0.1+0.2===0.3)</strong><br><br>Answer: when adding 0.1 and 0.2 in javascript it will not be 0.3. It will be more than a fraction value of 0.3.<br> Only this will work <strong>(0.1+0.2).toFixed(1)==0.3</strong></p><br><br><p><strong>Problem</strong><br><img src='./assets/jsCode/equalityProblem1.png'><br><br><strong>Answer</strong> The triple-equal operator <code>===</code> behaves like any traditional equality operator would: evaluates to true if the two expressions on either of its sides have the same type and the same value. The double-equal operator, however, tries to coerce the values before comparing them. It is therefore generally good practice to use the <code>===</code> rather than <code>==</code>.  The same holds true for <code>!==</code> vs <code>!=</code>.</p>"
            },
            {
                "name": "Output - Fibonacci series",
                "description": "<p>Fibonacci series is a series that generates subsequent series of numbers by the addition of the two previous numbers. ... The first two terms of the Fibonacci series are zero and one, respectively. And the next terms are the addition of the two previous terms.<br><br><img src='./assets/jsCode/fibonacci.png'></p>"
            },
            {
                "name": "Output - Swap number without temp",
                "description": "<p><img src='./assets/jsCode/swaping.png'></p>"
            },
            {
                "name": "Output - Sum of two / sumFinder",
                "description": "<p><strong>Problem</strong> - From a unsorted array, check whether there are any two numbers that will sum up to a given number?<br><br><strong>Answer</strong><br><img src='./assets/jsCode/sumoftwo.png'></p>"
            },
            {
                "name": "Output - Sum of two largest numbers in the array",
                "description": "<p><img src='./assets/jsCode/sumoftwo1.png'></p>"
            },
            {
                "name": "Output - delete operator with Emp Object prototype",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/delete1.png'><br><br><p><strong>Answer</strong> - Above code will output <strong>xyz</strong> as output. Here <strong>emp1</strong> object got company as prototype property. <strong>delete</strong> operator doesn't delete prototype property.<br><br><strong>emp1</strong> object doesn't have <strong>company</strong> as its own property. You can test it like:<br><br><img src='./assets/jsCode/delete2.png'><br><br>However, we can delete company property directly from <strong>Employee</strong> object using <strong>delete Employee.company</strong> or we can also delete from <strong>emp1</strong> object using <strong>__proto__</strong> property <strong> delete emp1.__proto__.company</strong>.</p>"
            },
            {
                "name": "How to merge two sorted Arrays into a Sorted Array?",
                "description": "<p><img src='./assets/jsCode/merge-two-sorted-array-algorithm.png'><br><br><img src='./assets/jsCode/merge-two-sorted-array-algorithm1.png'></p>"
            },
            {
                "name": "Output - let and var inside setTimeout",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/jsCode/letvaroutput.png'></p><br><p><strong>Answer</strong> - Outputs 2 and 12. Since, even though let variables are not hoisted, due to the async nature of javascript, the complete function code runs before the setTimeout function. Therefore, it has access to both x and y.</p>"
            },
            {
                "name": "Output - In what order will the numbers 1-4 be logged to the console",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/jsCode/order.png'></p><br><p><strong>Answer</strong> - 2<br>4<br>3<br>1 // After two seconds<br><br>Even though the second timeout function has a waiting time of zero seconds, the javascript engine always evaluates the setTimeout function using the Web API, and therefore, the complete function executes before the setTimeout function can execute.</p>"
            },
            {
                "name": "Output - hero / getPower / powerlevel",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/jsCode/powerlevel.png'></p><br><p><strong>Answer</strong> - undefined<br>42<br><br>Reason - The first output is <strong>undefined </strong>since when the function is invoked, it is invoked referencing the global object:<br><br><code>window.getPower() = getPower();</code></p>"
            },
            {
                "name": "Write the code to find the vowels",
                "description": "<p><img src='./assets/jsCode/vowels.png'></p>"
            },
            {
                "name": "Output - setTimeout Inside For Loop Using const variable",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/jsCode/const.png'></p><br><p><strong>Answer</strong> - <br><img src='./assets/jsCode/const1.png'></p>"
            },
            {
                "name": "Output - Given two strings, return true if they are anagrams of one another",
                "description": "<p><strong>Problem</strong> - For example: Mary is an anagram of Army</p><br><p><strong>Answer</strong> - <br><img src='./assets/jsCode/anagram.png'></p>"
            },
            {
                "name": "Output - typeof f()",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/typeoff.png'></p><br><p><strong>Answer</strong> - You can see function expression instead function declaration inside if statement. So it always returns true. Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.</p>"
            },
            {
                "name": "Output - delete operator",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/delete3.png'></p><br><p><strong>Answer</strong> - The output would be 0. The delete operator is used to delete properties from an object. Here x is not an object but a local variable. delete operators don’t affect local variables.</p>"
            },
            {
                "name": "Output - delete operator with x object - foo bar",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/delete.png'></p><br><p><strong>Answer</strong> - The output would be undefined. The delete operator is used to delete the property of an object. Here, x is an object which has the property foo, and as it is a self-invoking function, we will delete the foo property from object x. After doing so, when we try to reference a deleted property foo, the result is undefined.</p>"
            },
            {
                "name": "Output - delete operator deleting an array index",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/delete4.png'><br><br><strong>Answer: </strong> The result is <strong>[undefined/empty, 'b', 'c', 'd'], undefined, 4</strong> because The <code>delete</code> operator will delete the object property but it will not reindex the array or change its length. So the number or elements or length of the array won't be changed. If you try to print myChars then you can observe that it doesn't set an undefined value, rather the property is removed from the array.</p>"
            },
            {
                "name": "Output - return value of Duplicate paramater to function",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/duplicate3.png'><br><br><strong>Answer: </strong> The result is <strong>3, 2, 3</strong> because In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has duplicate parameters on 1st and 3rd parameters. The value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd argument overrides the first parameter. In strict mode, duplicate parameters will throw a Syntax Error. <br><br><br><strong>Problem</strong><br><img src='./assets/jsCode/duplicate4.png'><br><br><strong>Answer: </strong> The result is <strong>SyntaxError: Duplicate parameter name not allowed in this context</strong> because Unlike regular functions, the arrow functions doesn't not allow duplicate parameters in either strict or non-strict mode. So you can see <code>SyntaxError</code> in the console.</p>"
            },
            {
                "name": "Output - What is the output of the below code and why? compare",
                "description": "<p><strong>Problem</strong><br><pre>console.log(10 == [10], 10 == [[[[[[[10]]]]]]]);</pre><br><br><strong>Answer: </strong> The result is <strong>True, True</strong> because As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as below <br><pre>10 === Number([10].valueOf().toString()); // 10</pre><br>So it doesn't matter about number brackets([]) around the number, it is always converted to a number in the expression.</p>"
            },
            {
                "name": "Output - named function expression - foo bar typeof",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/namedexpression.png'></p><br><p><strong>Answer</strong> - The output would be Reference Error. A function definition can have only one reference variable as its function name.</p>"
            },
            {
                "name": "Write a function that would allow you to do this? addSix / createBase / closures",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/addsix.png'></p><br><p><strong>Answer</strong> - You can create a closure to keep the value passed to the function createBase even after the inner function is returned.<br><img src='./assets/jsCode/addsixfunc.png'></p>"
            },
            {
                "name": "FizzBuzz Challenge",
                "description": "<p><strong>Problem</strong>Create a for loop that iterates up to <code>100</code> while outputting <strong>\"fizz\"</strong> at multiples of <code>3</code>, <strong>\"buzz\"</strong> at multiples of <code>5</code> and <strong>\"fizzbuzz\"</strong> at multiples of <code>3</code> and <code>5</code>.</p><br><p><strong>Answer</strong> - <br><img src='./assets/jsCode/fizzbuzz.png'></p>"
            },
            {
                "name": "How would you use a closure to create a private counter?",
                "description": "<p>You can create a function within an outer function (a closure) that allows you to update a private variable but the variable wouldn't be accessible from outside the function without the use of a helper function.<br><img src='./assets/jsCode/closureconter.png'></p>"
            },
            {
                "name": "Output - Value of b in expression var a=b=5",
                "description": "<p>The code above will output 5 even though it seems as if the variable was declared within a function and can't be accessed outside of it. This is because <br><strong><code>var a = b = 5</code></strong><br> is interpreted the following way: <br><strong><code>var a = b;<br>b = 5;</code></strong><br><br>But <code>b</code> is not declared anywhere in the function with var so it is set equal to <strong>5</strong> in the <strong>global scope</strong>.</p><br><br><p><strong>Another Case Problem</strong><br><img src='./assets/jsCode/aandb.png'></p><br><p><strong>Answer</strong> - <br><strong>a defined? false <br>b defined? true</strong> - since the statement <code>var a = b = 3;</code> is shorthand for the statements <code>b = 3;</code> and <code>var a = b;</code>, <code>b</code> ends up being a global variable (since it is not preceded by the <code>var</code> keyword) and is therefore still in scope even outside of the enclosing function.</p>"
            },
            {
                "name": "Output - 3>2>1 - returns false while 3>2>0 return true",
                "description": "<p>Let's pick this apart. First, it evaluates <strong>+(3 &gt; 2)</strong>. Yes, three is greater than two. Therefore, you now have expression like this <strong> +(true) &gt; 1</strong><br><br><strong>true</strong> is coerced into a number. That number happens to be <strong>1</strong>. <strong>1 &gt; 1</strong> is obviously false. Therefore, the result is: <strong>false</strong></p><br><br><p>Whereas in other case expression 1 > 0, and hence the result is true</p>"
            },
            {
                "name": "Output - 1<2<3 returns true",
                "description": "<p>Let's pick this apart. First, it evaluates <strong>+(1 &lt; 2)</strong>. Yes, one is less than two. Therefore, you now have expression like this <strong> +(true) &lt; 3</strong><br><br><strong>true</strong> is coerced into a number. That number happens to be <strong>1</strong>. <strong>1 &lt; 3</strong> is obviously true. Therefore, the result is: <strong>true</strong></p>"
            },
            {
                "name": "Output - 1<3>2 and 1>3<2",
                "description": "Result - false / true"
            },
            {
                "name": "Output - console 'this foo bar self'",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/outputfoobar.png'></p><br><p><strong>Answer</strong> - <br><img src='./assets/jsCode/outputfoobar1.png'><br>In the outer function, both <code>this</code> and <code>self</code> refer to <code>myObject</code> and therefore both can properly reference and access <code>foo</code>.<br>In the inner function, though, <code>this</code> no longer refers to <code>myObject</code>.  As a result, <code>this.foo</code> is undefined in the inner function, whereas the reference to the local variable <code>self</code> remains in scope and is accessible there.</p>"
            },
            {
                "name": "Output - Palindrome",
                "description": "<p><img src='./assets/jsCode/palindrome.png'><br><br><img src='./assets/jsCode/palindrome1.png'></p>"
            },
            {
                "name": "Output - object property",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/objref.png'></p><br><p><strong>Answer</strong> - When setting an object property, JavaScript will implicitly <strong>stringify</strong> the parameter value. In this case, since <code>b</code> and <code>c</code> are both objects, they will <em>both</em> be converted to <code>\"[object Object]\"</code>. As a result, <code>a[b]</code> and<code>a[c]</code> are both equivalent to <code>a[\"[object Object]\"]</code> and can be used interchangeably.  Therefore, setting or referencing <code>a[c]</code> is precisely the same as setting or referencing <code>a[b]</code>.</p>"
            },
            {
                "name": "Output - Testing knowledge on \"this\"",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/this.png'></p><br><p><strong>Answer</strong> - <strong><code><br>10<br>2</code></strong><br><br>When setting an object property, JavaScript will implicitly <strong>stringify</strong><br><br>In the first place, as <code>fn</code> is passed as a parameter to the function <code>method</code>, the scope (<code>this</code>) of the function <code>fn</code> is <code>window</code>.  <code>var length = 10;</code> is declared at the <code>window</code> level. It also can be accessed as <code>window.length</code> or <code>length</code> or <code>this.length</code> (when <code>this === window</code>.)<br><br>Now, we know that we can access any number of arguments in a JavaScript function using the <code>arguments[]</code> array.<br><br>Hence <code>arguments[0]()</code> is nothing but calling <code>fn()</code>. Inside <code>fn</code> now, the scope of this function becomes the <code>arguments</code> array, and logging the length of <code>arguments[]</code> will return <code>2</code>.</p>"
            },
            {
                "name": "Output - try catch",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/varhoisting.png'></p><br><p><strong>Answer</strong> - <strong><code><br>1<br>undefined<br>2</code></strong><br><br><code>var</code> statements are hoisted (without their value initialization) to the top of the global or function scope it belongs to, even when it’s inside a <code>with</code> or <code>catch</code> block. However, the error’s identifier is only visible inside the <code>catch</code> block. It is equivalent to:<br><img src='./assets/jsCode/varhoisting1.png'></p>"
            },
            {
                "name": "Output - not hoisted / girl / 21 / 20",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/hoisting.png'></p><br><p><strong>Answer</strong> - Neither 21, nor 20, the result is <code>undefined</code>. It’s because JavaScript initialization is not hoisted.<br><br>(Why doesn’t it show the global value of 21? The reason is that when the function is executed, it checks that there’s a local <code>x</code> variable present but doesn’t yet declare it, so it won’t look for global one.)</p>"
            },
            {
                "name": "Output - closures / outer / inner",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/closure.png'></p><br><p><strong>Answer</strong> - Output to the console will be “3”.<br><br>There are three closures in the example, each with it’s own <code>var b</code> declaration. When a variable is invoked closures will be checked in order from local to global until an instance is found. Since the <code>inner</code> closure has a <code>b</code> variable of its own, that is what will be output.</p>"
            },
            {
                "name": "Output - Check if a given string is a isomorphic",
                "description": "<p>For two strings to be isomorphic, all occurrences of a character in string A can be replaced with another character to get string B. There must be one-to-one mapping for every char of string A to every char of string B.<br><img src='./assets/jsCode/isomorphic.png'></p><ul><li><strong>Step 1</strong> - Check if the same lenght. If not, they cannot be isomorphic</li><li><strong>Step 2</strong> - If the letter does not exist, create a map and map it to the value of the second letter</li><li><strong>Step 3</strong> - Eles if letterA already exists in the map, but it does not map to letterB, that means that A is mapping to more than one letter.</li><li><strong>Step 4</strong> - If after iterating through and conditions are satisfied, return true. They are isomorphic</li></ul>"
            },
            {
                "name": "Output - this in global/window object",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/closure1.png'></p><br><p><strong>Answer</strong> - <br><strong><code>global/window object<br>object \"b\"<br>global/window object</code></strong><br><br><br>Since we are using the arrow function inside <strong>func2, this </strong>keyword refers to the global object.<br><br><strong>Code 3 </strong>- Outputs in the following order:</p>"
            },
            {
                "name": "Output - this in IIFE",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/this1.png'></p><br><p><strong>Answer</strong> - <br><strong><code>\"Vivek\"<br>blank_value/undefined<br>\"Vivek\"</code></strong> - Only in the IIFE inside the function <strong>f</strong>, <strong>this </strong>keyword refers to the global/window object.</p>"
            },
            {
                "name": "Write the code for dynamically inserting new components / append nodes to the list.",
                "description": "<p><strong>Answer</strong><br><img src='./assets/js/append.png'></p>"
            },
            {
                "name": "Output of the following code? bar boolean",
                "description": "<p><strong>Problem</strong><br><img src ='./assets/jsCode/bartrue.png'><br><br><strong>Answer<br>1<br>truexyz<br>2<br>1</strong></p>"
            },
            {
                "name": "True False Rapid Fire",
                "description": "<p><strong>Question: </strong>Is<code>'false'</code>is!1?<br><strong>Answer: </strong>No.Because,it's a string with length greater than 0. Only empty string is false.</p><p><strong>Question: </strong> Is <code>' '</code> is false?<br><strong>Answer: </strong> No. Because, it's not an empty string.There is a white space in it.</p><p><strong>Question: </strong>What about<code>{}</code>?<br><strong>Answer: </strong> Its Truthy. It's an object. An object without any property is an object can't be falsy.</p><p><strong>Question: </strong>Tell me about<code>[]</code>?<br><strong>Answer: </strong>This is also truthy.It's an array object (array is child of object) is truthy.</p><p><strong>Question: </strong>You talked bout <code>''</code> to be falsy. What about <code>new String('')</code>?<br><strong>Answer: </strong> Though you are passing empty string to the string constructor, it is creating an String object. More precisely a instance of String object. It becomes an object. Hence, it is not false. so, it is truthy.</p><p><strong>Question: </strong> Tell me about <code>new Boolean(false)</code><br><strong>Answer: </strong> truthy. As it creates an instance of the Boolean object which is an object. Object is truthy.</p><p><strong>Question: </strong> <code>Boolean(function(){})</code><br><strong>Answer: </strong> <code>true</code> if you pass a truthy value to Boolean, it will be true.</p><p><strong>Question: </strong> <code>Boolean(/foo/)</code><br><strong>Answer: </strong> <code>true</code></p><p><strong>Question: </strong> <code>true%1</code><br><strong>Answer: </strong> 0. When you are trying to find reminder of true, true becomes 1 and reminder of 1 while dividing by 1 is 0. you will get same result if you doe <code>false%1</code></p><p><strong>Question: </strong> <code>''%1</code><br><strong>Answer: </strong>0</p>"
            },
            {
                "name": "Rapid Fire",
                "description": "<p><strong>Question: </strong> What is <code>typeof []</code><br><strong>Answer: </strong> Object. Actually Array is derived from Object. If you want to check array use <code>Array.isArray(arr)</code></p><p><strong>Question: </strong> What is <code>typeof arguments</code><br><strong>Answer: </strong> Object. arguments are array like but not array. it has length, can access by index but can't push pop, etc.</p><p><strong>Question: </strong> What is <code>2+true</code><br><strong>Answer: </strong> 3. The plus operator between a number and a boolean or two boolean will convert boolean to number. Hence, true converts to 1 and you get result of 2+1</p><p><strong>Question: </strong> What is <code>'6'+9</code><br><strong>Answer: </strong> 69. If one of the operands of the plus (+) operator is string it will convert other number or boolean to string and perform a concatenation. For the same reason, <code>'2'+true</code> will return '2true'</p><p><strong>Question: </strong> What is the value of <code>4+3+2+'1'</code><br><strong>Answer: </strong> 91 . The addition starts from the left, 4+3 results 7 and 7+2 is 9. So far, the plus operator is performing addition as both the operands are number. After that 9 + '1' where one of the operands is string and plus operator will perform concatenation.</p><p><strong>Question: </strong> What is the value of <code>'1'+2+4</code><br><strong>Answer: </strong> '124'. For this one '1' + 2 will produce '12' and '12'+4 will generates '124'.</p><p><strong>Question: </strong> What is the value of <code>-'34'+10</code><br><strong>Answer: </strong> -24. minus(-) in front of a string is an unary operator that will convert the string to a number and will make it negative. Hence, -'34' becomes, -34 and then plus (+) will perform simple addition as both the operands are number.</p><p><strong>Question: </strong> What is the value of <code>+'dude'</code><br><strong>Answer: </strong> NaN. The plus (+) operator in front of a string is an unary operator that will try to convert the string to number. Here, JavaScript will fail to convert the 'dude' to a number and will produce NaN.</p><p><strong>Question: </strong> What is <code>console.log(10 + \"10\", 10 - \"10\");</code><br><strong>Answer:  1010, 0</strong> The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both operands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.</p><p><strong>Question: </strong> What is <code>let [a, ...b,] = [1, 2, 3, 4, 5]; console.log(a, b);</code><br><strong>Answer:  SyntaxError</strong> When using rest parameters, trailing commas are not allowed and will throw a SyntaxError. If you remove the trailing comma then it displays <strong>[1, 2, 3, 4, 5]</strong></p><p><strong>Question: </strong> If you have <code>var y=1, x=y=typeof x;</code> What is the value of x?<br><strong>Answer: </strong> 'undefined'</p><p><strong>Question: </strong> for <code>var a=(2, 3, 5);</code> what is the value of a?<br><strong>Answer: </strong> 5. The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.</p><p><strong>Question: </strong> for <code>var a=(1, 5 - 1) * 2</code> what is the value of a?<br><strong>Answer: </strong> 8</p><p><strong>Question: </strong> What is the value of <code>!'bang'</code><br><strong>Answer: </strong> false. <code>!</code> is NOT. If you put <code>!</code> in front of truthy values, it will return false. Using !! (double bang) is a tricky way to check anything truthy or falsy by avoiding implicit type conversion of==comparison.</p><p><strong>Question: </strong> What is the value of <code>parseFloat('12.3.4')</code><br><strong>Answer: </strong> 12.3</p><p><strong>Question: </strong> What is the value of <code>Math.max([2,3,4,5]);</code><br><strong>Answer: </strong> NaN</p><p><strong>Question: </strong> <code>3 instanceof Number</code><br><strong>Answer: </strong> false</p><p><strong>Question: </strong><code>null==undefined</code><br><strong>Answer: </strong> true</p><p><strong>Question: </strong>What is the value of <code>!!function(){};</code><br><strong>Answer: </strong> true</p><p><strong>Question: </strong> What is the value of <code>typeof bar</code><br><strong>Answer: </strong> 'undefined'</p><p><strong>Question: </strong> What is the value of <code>typeof null</code><br><strong>Answer: </strong> 'object'</p><p><strong>Question: </strong> If <code> var a=2, b=3</code> what would be value of <code>a &amp;&amp; b</code><br><strong>Answer: </strong> 3</p><p><strong>Question: </strong> What would be consoled <code>var foo='outside'; function logIt(){console.log(foo); var foo='inside';}logIt();</code><br><strong>Answer: </strong> undefined</p><p><strong>Question: </strong> What is <code>-5%2</code><br><strong>Answer: </strong>-1. the result of remainder always get the symbol of first operand</p><p><strong>Question: </strong> Why <code>.1+.2 !=.3</code><br><strong>Answer: true - floating point errors in internally representing certain numbers. 0.1 + 0.2 does not nicely come out to 0.3</strong></p><p><strong>Question: </strong> What is <code>console.log([1, 2] + [3, 4]);</code><br><strong>Answer:  1,23,4</strong> The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.</p><p><strong>Question: <code>42..toString()</code></strong><br><strong>Anwser:</strong> <code>'42'</code></p><p><strong>Question: </strong> <code>4.2..toString</code><br><strong>Anwser:</strong> //SyntaxError: Unexpected token .</p><p><strong>Question: </strong><code>42 . toString()</code><br><strong>Anwser:</strong> <code>'42'</code></p><p><strong>Question: </strong> <code>typeof(NaN)</code><br><strong>Anwser:</strong>'number'</p><p><strong>Question: </strong> <code>2 in [1,2]</code><br><strong>Anwser:</strong> false. Because 'in' returns whether a particular property/index available in the Object. In this case object has index 0 and 1 but don't have 2. Hence you get false.</p>"
            },
            {
                "name": "Output - Recursion example Flatten array",
                "description": "<p><strong>Algorithm steps:</strong></p><ul><li>First, we iterate through the given array.</li><li>Then check each element:<ul><li>if it is not an array then push the elements in an updated array.</li><li>if it is an array then again call the same function <code>flatten()</code> i.e. recursion. Then we will combine our updated array and return values of <code>flatten()</code> using the spread operator in ES6. This will keep flatting the updated array.</li></ul></li></ul><p><strong>Solution 1</strong><br><img src='./assets/jsCode/flattenforloop.png'><br><br><strong>Solution 2</strong><br><img src='./assets/jsCode/flatten.png'></p>"
            },
            {
                "name": "Output - Recursion example 'display countdown numbers'",
                "description": "<p><strong>Algorithm steps:</strong></p><ul><li>First, we iterate through the given number.</li><li>Then we decrease the number by 1 and store that value in a variable</li><li>Then we evaluate the new stored value against the condition greater than 0, if it is then we again trigger the countdown function.</li></ul><p><img src='./assets/jsCode/recursioncountdown.png'></p>"
            },
            {
                "name": "Output - Find Factorial",
                "description": "<p>The factorial function says to multiply all the whole numbers from the chosen number down to one. In more mathematical terms, the factorial of a number <strong>(n!) is equal to n(n-1)</strong>.<br><br><img src='./assets/jsCode/factorial.png'></p>"
            },
            {
                "name": "Output - Find out prime factors of the number",
                "description": "<p><strong>Solution 1</strong><br><img src='./assets/jsCode/factors1.png'><br><br><strong>Solution 2</strong><br><img src='./assets/jsCode/factors.png'></p>"
            },
            {
                "name": "Output - Perfect number using Javascript",
                "description": "<p>In number theory, a perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself<br><i>Example</i> : The first perfect number is 6, because 1, 2, and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6. The next perfect number is 28 = 1 + 2 + 4 + 7 + 14.<br><br><img src='./assets/jsCode/perfectnumber.png'></p>"
            },
            {
                "name": "Output - digits from a string with numbers",
                "description": "<p><strong>var strNum = \"only123!\"; </strong><br><br>To fetch the digits from the above string, the following RegExp is used: <img src='./assets/jsCode/regexp.png'><br><br><img src='./assets/jsCode/findnumber.png'></p>"
            },
            {
                "name": "Output - non-digit characters from a string",
                "description": "<p><strong>var strNum = \"DEMO989#@#@\";</strong><br><br>The following RegExp is used to get a non-digits:&nbsp;<img src='./assets/jsCode/regexp1.png'><br><br><img src='./assets/jsCode/findalphabets.png'></p>"
            }
        ]
    },
    {
        "folder": "Angular",
        "title": "Angular",
        "url": "/folder/Angular",
        "icon": "logo-angular",
        "question": [
            {
                "name": "What is Angular Framework?",
                "description": "<p>Angular is a open-source framework for building complex web applications using the Model-View-Controller (MVC) pattern using HTML and TypeScript. It  facilitates creating sophisticated, efficient and complex single page applications.<br><br> Angular gives features like Dependency Injection, Declarative Templates, end-to-end tooling with cli which bootstrap a new development environment by creating, compiling, bundling and deploying the application in one go</p>"
            },
            {
                "name": "Difference between AngularJS and Angular?",
                "description": "<p>Angular is a completely revived component-based framework in which an application is a tree of individual components.</p><img src='./assets/angular/angularjsvsangular.png' />"
            },
            {
                "name": "What is typescript?",
                "description": "<p>TypeScript is a superset of JavaScript created by Microsoft that adds optional types, classes, async/await, and many other features, and compiles to plain JavaScript. Angular 2+ versions are entirely built in TypeScript and acts its primary language.</p>"
            },
            {
                "name": "Advantages of typescript over javascript?",
                "description": "<ul><li>TypeScript is able to find compile time errors at the development time only and it makes sures less runtime errors. Whereas javascript is an interpreted language.</li><li>TypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile time. This is not available in javascript.</li><li>TypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may not be supported in some browsers.</li></ul>"
            },
            {
                "name": "Differences between javascript and typescript?",
                "description": "<table><thead><tr><th>typescript</th><th>javascript</th></tr></thead><tbody><tr><td>Object oriented programming language</td><td>Scripting language</td></tr><tr><td>Supports static typing</td><td>It has dynamic typing</td></tr><tr><td>Modules Supported</td><td>Modules Not supported</td></tr><tr><td>It has interfaces concept</td><td>Doesn't support interfaces</td></tr><tr><td>Functions support optional parameters</td><td>No support of optional parameters for functions</td></tr></tbody></table>"
            },
			{
                "name": "What is a TypeScript Map file?",
                "description": "<p><code>.map</code> files are source map files that let tools map between the emitted JavaScript code and the TypeScript source files that created it. Many debuggers (e.g. Visual Studio or Chrome's dev tools) can consume these files so you can debug the TypeScript file instead of the JavaScript file.</p>"
            },
			{
                "name": "What are the key components / building blocks of Angular?",
                "description": "<p></p><ol><li><strong>Component:</strong> These are the basic building blocks of angular application to control HTML views.</li><li><strong>Modules:</strong> An angular module is set of angular basic building blocks like component, directives, services etc. An application is divided into logical pieces and each piece of code is called as 'module' which perform a single task.</li><li><strong>Templates:</strong> This represent the views of an Angular application.</li><li><strong>Services:</strong> It is used to create components which can be shared across the entire application.</li><li><strong>Metadata:</strong> This can be used to add more data to an Angular class.</li></ol>"
            },
			{
                "name": "What is NgModule / Module / declarations / exports / imports / provider / bootstrap ?",
                "description": "<p>An <strong>NgModule</strong> is defined by a class decorated with @NgModule(). The @NgModule() decorator is a function that takes a single metadata object, whose properties describe the module. The most important properties are as follows.</p><p><strong>#1. declarations:</strong> This array is used to define components, directives, and pipes in the respective module You should add only those, which belong to this module. The Component cannot belong to more than one module.<br><br><strong>#2. exports:</strong> If you want other modules to use the component, pipes, directives of this NgModule, then those must be specified here. Remember: Only those components declared here are visible to the other ngModules, when they import this module.<br><br><strong>#3. imports:</strong> If you want this ngModule require any feature or functionality, then those modules need to be imported here. Any components, directives, and pipes that are defined and exported in that module can be used in this module.<br><br><strong>#4. providers:</strong> In this array <strong>Services</strong>, which you want to add to the global collection of services are added here. The services are then available for injection via <strong>dependency injection</strong>.<br><br><strong>#5. bootstrap:</strong> The main component of this module, which needs to be loaded when the module is loaded is specified here. This is a must if you are the first module (<strong> called the root module) </strong>that is loaded when the Angular App starts. It is the responsibility of the root module to load the first view and it is done by specifying the component here. <br><br>If the module is not the root module, then you should keep this blank</p><br><br><p>There's <strong>two types of modules</strong>. First, there's your <code>'Root module'</code>, which is the entry point of your app. You can technically put everything in your app into just one module.</p><p>Then there's <code>'Feature modules'</code>, which are used for separation of concerns during development, but also for things like lazy-loading of parts of the app. This is more of an issue for larger apps, but it doing it early can certainly help you set things up \"right\".</p>"
            },
            {
                "name": "What are directives? and its types",
                "description": "<p>Directives add behaviour to an existing DOM element or an existing component instance. We write a directive when we want to write reusable behaviour to supplement existing DOM elements.</p><ul><li><strong>Components</strong> — These are directives with a template.</li><li><strong>Structural directives</strong> — These directives change the DOM layout by adding and removing DOM elements. Ex. *ngFor, *ngIf, *ngSwitchCase,</li><li><strong>Attribute directives</strong> — These directives change the appearance or behavior of an element, component, or another directive. [ngClass],[ngStyle], [ngModel],  [routerLinkActive] etc</li></ul><br><p><img src='./assets/angular/custom-directive.png'><br><code>&lt;div appHighlight&gt;Highlight me&lt;/div!&gt;</code></p>"
            },
            {
                "name": "Give an example for attribute directives?",
                "description": "<p><img src='./assets/angular/attrdirective.png'><br><br>To apply - &lt;p&gt; appHighlight>Highlight me!&lt;/p&gt;</p>"
            },
            {
                "name": "What are components?",
                "description": "<p>Components are the most basic UI building block of an Angular app which form a tree of Angular components. The components basically represent itself as subset of directives. The only thing differing is that components always have a template and only one component can be instantiated per an element in a template.</p><img src='./assets/angular/component.png' />"
            },
			{
                "name": "What are dynamic components?",
                "description": "<p>Dynamic components are the components in which components location in the application is not defined at build time.i.e, They are not used in any angular template. But the component is instantiated and placed in the application at runtime.<br><img src='./assets/angular/dynamic-component.png'><br><img src='./assets/angular/dynamic-component1.png'></p>"
            },
			{
                "name": "Difference between Component and Directives?",
                "description": "<p>In a short note, A component(@component) is a directive-with-a-template</p><ul><li>To register a <strong>Component</strong> we use <strong>@Component</strong> meta-data annotation and for <strong>Directive</strong> we use <strong>@Directive</strong> meta-data</li><li><strong>Directives</strong> add behaviour to an existing DOM element or an existing component instance.</li><li><strong>A component</strong>, rather than adding/modifying behaviour, actually creates its own view (hierarchy of DOM elements) with attached behaviour.</li></ul><br><p><strong>Conclusion:</strong> We write a component when you want to create a reusable set of DOM elements of UI with custom behaviour.<br>We write a directive when you want to write reusable behaviour to supplement existing DOM elements.</p>"
            },
			{
                "name": "Difference between Angular Component and Module?",
                "description": "<p><em>Components</em> control views (html). They also communicate with other components and services to bring functionality to your app.</p><p><em>Modules</em> consist of one or more components. They do not control any html. Your modules declare which components can be used by components belonging to other modules, which classes will be injected by the dependency injector and which component gets bootstrapped. Modules allow you to manage your components to bring modularity to your app.</p>"
            },
			{
                "name": "What is a template / choose between inline and external template file? ",
                "description": "<p>A template is a HTML view where you can display data by binding controls to properties of an Angular component.<br><br>You can store your component's template in one of two places. You can define it inline using the <strong>template</strong> property, or you can define the template in a separate HTML file and link to it in the component metadata using the <strong>@Component</strong> decorator's <strong>templateUrl</strong> property.</p>"
            },
			{
                "name": "What are Pipes? Pure and Impure Pipes",
                "description": "<p>Angular Pipes takes data as input and formats or transform the data to display in the template. We use them to change the appearance of the data before presenting it to the user. The most common use case of pipes is displaying the dates in the correct format as per the user’s locale.<br><br>A <strong>pipe</strong> takes in data as input and transforms it to a desired output. One can create its own custom pipes. Example of pipes such are <code>DatePipe</code>, <code>UpperCasePipe</code>, <code>LowerCasePipe</code>, <code>CurrencyPipe</code>, and <code>PercentPipe</code>.</p><br><p>A <strong>pure pipe</strong> is only called when Angular detects a change in the value or the parameters passed to a pipe. For example, any changes to a primitive input value (String, Number, Boolean, Symbol) or a changed object reference (Date, Array, Function, Object). An <strong>impure pipe</strong> is called for every change detection cycle no matter whether the value or parameters changes. i.e, An impure pipe is called often, as often as every keystroke or mouse-move.</p>"
            },
			{
                "name": "What is a parameterized pipe?",
                "description": "<p>A pipe can accept any number of optional parameters to fine-tune its output. The parameterized pipe can be created by declaring the pipe name with a colon ( : ) and then the parameter value. If the pipe accepts multiple parameters, separate the values with colons. Let's take a birthday example with a particular format(dd/MM/yyyy)</p>&lt;div&gt;Birthday is {{ birthday | date:'dd/MM/yyyy'}}&lt;/div&gt;"
            },
            {
                "name": "How do you chain pipes?",
                "description": "<p>&lt;div&gt;Birthday is {{ birthday | date:'dd/MM/yyyy' | uppercase}}&lt;/div&gt;</p>"
            },
            {
                "name": "What is slice pipe?",
                "description": "<p>The slice pipe is used to create a new Array or String containing a subset (slice) of the elements. The syntax looks like as below,</p><p><code>{{ value_expression | slice : start [ : end ] }}<br><br><li *ngFor='let i of greeting | slice:0:5'>{{i}}</li></code></p>"
            },
			{
                "name": "Write code for custom pipe for change the string to title case?",
                "description": "<p><img src='./assets/expertAngular/titlecasePipe.png'></p>"
            },
            {
                "name": "How pipe change detection works for primitive and references objects ?",
                "description": "<p><strong>Detecting pure changes to primitives and object references</strong> - With a pure pipe, Angular ignores changes within composite objects, such as a newly added element of an existing array, because checking a primitive value or object reference is much faster than performing a deep check for differences within objects. Angular can quickly determine if it can skip executing the pipe and updating the view. <br>However, a pure pipe with an array as input may not work the way you want. <br>The app shows unexpected behavior: - This happens because whenever you add a new data to the array and that too by does so by pushing it onto the heroes array: The change detector ignores changes to elements of an array, so the pipe doesn't run. The reason Angular ignores the changed array element is that the reference to the array hasn't changed. Since the array is the same, Angular does not update the display. <br>One way to get the behavior you want is to change the object reference itself. You can replace the array with a new array containing the newly changed elements, and then input the new array to the pipe. <br> if you mutate(eg: push, pop) the input array, the pure pipe doesn't execute. If you replace the input array, the pipe executes and the display is updated.</p><p><strong>Detecting impure changes within composite objects</strong> - To execute a custom pipe after a change within a composite object, such as a change to an element of an array, you need to define your pipe as impure to detect impure changes. because Angular executes an impure pipe every time it detects a change with every keystroke or mouse movement.</p>"
            },
            {
                "name": "What are lifecycle hooks available?",
                "description": "<p>Angular application goes through an entire set of processes or has a lifecycle right from its initiation to the end of the application</p><ul><li><strong>ngOnChanges:</strong> When the value of a data-bound input property of the component or directive changes, then this method is called.</li><li><strong>ngOnInit:</strong> This hook is fired only once and immediately after ngOnChanges creation (during the first change detection). This is a perfect place where you want to add any initialisation logic for your component.  Here you have access to every input property of the component. You can use them in  http get requests to get the data from the back end server or run some initialization logic etc.</li><li><strong>ngDoCheck:</strong> The Angular invokes the ngDoCheck hook event during every change detection cycle. This hook is invoked even if there is no change in any of the properties. Angular invokes it after the ngOnChanges & ngOnInit hooks.</li><li><strong>ngAfterContentInit:</strong> This hook is called after the Component's projected content has been fully initialized. Angular also updates the properties decorated with the ContentChild and ContentChildren before raising this hook. This hook is also raised, even if there is no content to project.</li><li><strong>ngAfterContentChecked:</strong> This hook is called during every change detection cycle after Angular finishes checking of component's projected content. Angular also updates the properties decorated with the ContentChild and ContentChildren before raising this hook. Angular calls this hook even if there is no projected content in the component <br><br>This hook is very similar to the ngAfterContentInit hook. Both are called after the external content is initialized, checked & updated. Only difference is that ngAfterContentChecked is raised after every change detection cycle. While ngAfterContentInit during the first change detection cycle.</li><li><strong>ngAfterViewInit:</strong> This hook is called after the Component's View & all its child views are fully initialized. Angular also updates the properties decorated with the ViewChild & ViewChildren properties before raising this hook.<br><br>The View here refers to the template of the current component and all its child components & directives.<br><br>This hook is called during the first change detection cycle, where angular initializes the view for the first time<br><br>At this point all the lifecycle hook methods & change detection of all child components & directives are processed & Component is completely ready </li><li><strong>ngAfterViewChecked:</strong> The Angular fires this hook after it checks & updates the component's views and child views. This event is fired after the ngAfterViewInit and after that during every change detection cycle<br><br>This hook is very similar to the ngAfterViewInit hook. Both are called after all the child components & directives are initialized and updated. Only difference is that ngAfterViewChecked is raised during every change detection cycle. While ngAfterViewInit during the first change detection cycle.</li><li><strong>ngOnDestroy:</strong> This hook is called just before the Component/Directive instance is destroyed by Angular<br><br>You can Perform any cleanup logic for the Component here. This is the correct place where you would like to Unsubscribe Observables and detach event handlers to avoid memory leaks.</li></ul>"
            },
			{
                "name": "Difference between constructor and ngOnInit?",
                "description": "<ul><li>The main difference between constructor and ngOnInit is that ngOnInit is lifecycle hook and runs after constructor which is class method.</li><li>The constructor is a default method of the class in typescript/javascript engine that is executed when the class is instantiated, whereas ngOnInit method is specific to Angular</li><li>Constructor is automaticlly called at the time of creating object of the class, whereas ngOninit Invoked by Angular when component is initialized</li><li>Common purpose of Constructor that it is used for Injecting dependencies, whereas in ngOninit the actual business logic performed here</li></ul>"
            },
            {
                "name": "What is a data binding?",
                "description": "<p>Data binding is a core concept in Angular that allows to define communication between a component and the DOM</p><ul><li> <strong>From the Component to the DOM</strong>: <br>#Interpolation: {{ value }}: Adds the value of a property from the component<br>#Property binding: [property]='value': The value is passed from the component to the specified property or simple HTML attribute</li><li><strong>From the DOM to the Component</strong>: Event binding: (click)='functionName()': When a specific DOM event happens (eg.: click, change, keyup), call the specified method in the component</li><li><strong>Two-way binding: Two-way data binding: [(ngModel)]='value'</strong>: Two-way data binding allows to have the data flow both ways from view to componenet and component to the view.</li></ul>"
            },
			{
                "name": "Defining Metadata with a Decorator in Angular",
                "description": "<p>The whole purpose of Angular decorators is to store metadata about a class, method, or property. When you configure a component, you are providing a metadata for that class that tells Angular that you have a component, and that component has a specific configuration. Each decorator has a base configuration with some default values. When the decorator is created using the relevant factory, the default configuration is passed.</p><p>There are four types of decorators in Angular:</p><ol><li>Class Decorators</li><li>Property Decorators</li><li>Method Decorators</li><li>Parameter Decorators</li></ol><p><strong>Class Decorators</strong> - Class Decorators are the top-level decorators that are used to define the purpose for the classes. They provide information to Angular that a particular class is a component, or module. <br><img src='./assets/expertAngular/classDecorator.png'></p><p><strong>Property Decorators</strong> - Property decorators are used to decorate the specific properties within the classes. Take a look at <code>@Input()</code>. Imagine that you have a property within the class that you want to have an input binding. for which Angular's compiler will automatically create an input binding from the property name and link them. <br><img src='./assets/expertAngular/propertyDecorator.png'></p><p><strong>Method Decorators</strong> - A Method Decorator decorates specific methods within your class with functionality. This is declared just before a method declaration. A good example of this is <code>@HostListener</code>. This tells Angular that when an event on your host happens, you want the decorated method to be called with the event. <br><img src='./assets/expertAngular/methodDecorator.png'></p><p><strong>Parameter Decorators</strong> - Parameter decorators are used to decorate parameters in your class constructors. For example- <code>@Inject</code>. It tells Angular that what you want that parameter to be initiated with. <br><img src='./assets/expertAngular/parameterDecorator.png'></p>"
            },
			{
                "name": "What are the class decorators in Angular?",
                "description": "<p>A class decorator is a decorator that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type.<br>The following list of decorators comes under class decorators,</p><ul><li>@Component()</li><li>@Directive()</li><li>@Pipe()</li><li>@Injectable()</li><li>@NgModule()</li></ul>"
            },
            {
                "name": "What are class field decorators?",
                "description": "<p>The class field decorators are the statements declared immediately before a field in a class definition that defines the type of that field. Some of the examples are: @input and @output,<br><img src='./assets/angular/class-field.png'></p>"
            },
            {
                "name": "Differences between an Annotation and a Decorator in Angular?",
                "description": "<p>Annotations and Decorators both share the same @ symbol in Angular, they both are different language features.</p><p><strong>Annotations:</strong> These are hard-coded language feature. Annotations are only metadata set on the class that is used to reflect the metadata library. When user annotates a class, the compiler creates an attribute on that class called annotations, stores an annotation array in it, then tries to instantiate an object with the same name as the annotation, passing the metadata into the constructor. Annotations are not predefined in AngularJs so we can name them on our own. <strong>Example:</strong> Here component is annotated as <strong>ComponentAnnotation</strong> and further used. <br><img src='./assets/angular/annotation.png'></p><p><strong>Decorators:</strong> A decorator is a function that adds metadata to a class, its members, or its method arguments. A decorator is just a function that gives you access to the target that needs to be decorated. There are four type of decorators all of them are mentioned below: #Class decorators like @Component, @NgModule, #Property decorators like @Input and @Output, #Method decorators like @HostListener, #Parameter decorators like @Injectable</p>"
            },
			{
                "name": "What is angular CLI?",
                "description": "<p>Angular CLI(<strong>Command Line Interface</strong>) is a command line interface use to build angular apps using nodejs style (commonJs) modules. You need to install using below npm command,<br><br><code>npm install @angular/cli@latest</code></p><p>List Of Commands: <br><strong>#1. Creating New Project:</strong> ng new <br><strong>#2. Generating Components, Directives &amp; Services:</strong> ng generate class / component / directive / pipes / service <br><strong>#3. Running the Project:</strong> ng serve</p>"
            },
			{
                "name": "What is a service?",
                "description": "<p>A service is used when a common functionality needs to be shared with multiple modules. Services allow separation of concerns i.e. by allowing you to extract common functionality out of components. is the main reason why Angular services came into existence. Angular services are instantiated only once during the lifetime of an application.</p>"
            },
			{
                "name": "What is dependency injection in Angular?",
                "description": "<p><strong>Dependency Injection (DI) is a technique in which a class receives its dependencies from external sources rather than creating them itself</strong>.<br><br>The Angular dependency injection is now the core part of the Angular 2+ versions. It allows us to inject dependencies into the Component, Directives, Pipes, or Services.</p>"
            },
            {
                "name": "What is a provider token?",
                "description": "<p>The Dependency Injection system in Angular uses tokens to uniquely identify a Provider. There are three types of tokens that you can create in Angular. They are Type Token, String Token, and Injection Token.</p><br><p><strong>DI Tokens</strong> - We declare the Provider in with providers metadata. This is how it looks like. <br><img src='./assets/expertAngular/provider.png'><br>The syntax has two properties. <strong><code>provide (provide: ProductService)</code></strong> & <strong><code>provider (useClass: ProductService)</code></strong><br>The first property is <code>Provide</code> holds the <strong>Token or DI Token</strong>. The Tokens act like a key. The DI systems need the key to locate the <code>provider</code> in the <code>Providers</code> array. <br><img src='./assets/expertAngular/Angular-Provider.png'><br>The Token can be either a <strong>type</strong>, a <strong>string</strong> or an instance of <strong>InjectionToken</strong>.</p><br><p><strong>Type Token</strong> - Here the type being injected is used as the token. <br>For Example, we would like to inject the instance of the <code>ProductService</code>, we will use the <code>ProducService</code><br><img src='./assets/expertAngular/Angular-Provider.png'><br>The <code>ProductService</code> is then injected into the component by using the following code.<br><img src='./assets/expertAngular/provider1.png'><br>You can keep the same token (ProductService) and change the class to another implementation of the Product service. For Example in the following code, we change it to <code>BetterProductService</code>.<br><img src='./assets/expertAngular/provider2.png'><br>Angular does not complain if we use the token again. In the following example token <code>ProductService</code> used twice. In such a situation last to register wins <code>(BetterProductService)</code>.</p><br><p><strong>String token</strong> - You can use the Type token only if you have Type representation. But that is not the case always. Sometimes we need to inject simple string values or simple object literal, where there is no type.<br><img src='./assets/expertAngular/provider3.png'><br>You can then use the Inject the <code>ProductService</code> using the <code>@Inject</code> method<br><img src='./assets/expertAngular/provider4.png'><br><br><strong>Example</strong><br><img src='./assets/expertAngular/provider5.png'><br><img src='./assets/expertAngular/provider6.png'></p>"
            },
            {
                "name": "What is a factory provider?",
                "description": "<p>A Provider works as an instructor for the dependency injection system to resolve the dependencies.</p><p>With <strong>Factory provider</strong> you can configure the Injector to return a value by invoking a specific function. <br><img src='./assets/expertAngular/factory.png'></p><p>The <code>provide</code> property configures the token that will be used in dependency injection and the <code>useFactory</code> is pointing to the function that will be used to return the desired value. The <code>deps</code> property configures the tokens that will be passed to your factory function.</p><p><strong>When to use it?</strong> - Factory provider can be very handy when you need to create a dependent value dynamically, based on information you won't have until run time. You can make an informed decision on which value to return based on other services and application state.</p><p><strong>Example:</strong> - Let’s try to guess which mobile device a user is logged in from. We will try to use information such as the browser user-agent, screen width, and screen height. Let’s define three token that will be used later on to identify the device name. <br>The InjectionTokenclass — Creates a token that can be used in Angular dependency injection. InjectionToken is parameterized on T which is the type of object which will be returned by the Injector. This provides an additional level of type safety. <br><img src='./assets/expertAngular/factory1.png'></p><p>Now we can come up with an algorithm to detect the device name based on the three tokens we defined above. We pass an arrow function to the useFactory that has 3 dependencies, in order to resolve those dependencies, we pass in a dependency array (dep) with the listed tokens. <br><img src='./assets/expertAngular/factory2.png'><br>Finally, we will consume the device name in our Angular component.<br><img src='./assets/expertAngular/factory3.png'></p><p>The Inject parameter decorator indicates to Angular DI that this parameter (deviceName) should be resolved from a defined token — DeviceName.</p>"
            },
            {
                "name": "How do you configure injectors with providers at different levels?",
                "description": "<p>You can configure injectors with providers at different levels of your application by setting a metadata value. The configuration can happen in one of three places,</p><ol><li>In the <code>@Injectable()</code> decorator for the service itself</li><li>In the <code>@NgModule()</code> decorator for an NgModule</li><li>In the <code>@Component()</code> decorator for a component</li></ol>"
            },
			{
                "name": "What is purpose / use of Async pipe?",
                "description": "<p>The async pipe can make a huge difference in your change detection strategy for your Angular app. In Angular, the async pipe is a pipe that essentially does these three tasks:</p><ul><li>It subscribes to an observable or a promise and returns the last emitted value.</li><li>Whenever a new value is emitted, it marks the component to be checked. That means Angular will run Change Detector for that component in the next cycle.</li><li>It unsubscribes from the observable when the component gets destroyed.</li></ul>"
            },
            {
                "name": "What is interpolation?",
                "description": "<p>It is represented by double curly braces({{}}). The text between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property.</p>"
            },
			{
                "name": "What are template expressions?",
                "description": "<p><code>{{ templateExpression }}</code><br><br>The content inside the double braces is called <strong>Template Expression</strong></p><p>The Angular first evaluates the Template Expression and converts it into a string. Then it replaces Template expression with the result in the original string in the HTML. Whenever the template expression changes, the Angular updates the original string again</p>"
            },
			{
                "name": "What are template statements?",
                "description": "<p>A template statement responds to an event raised by a binding target such as an element, component, or directive. The template statements appear in quotes to the right of the = symbol like (event)=\"statement\"</p>"
            },
            {
                "name": "How does an Angular application work?",
                "description": "<p>An Angular application is a Single Page Application, or SPA. This means that the entire application lives within a single page, and all of the resources (HTML, CSS, JavaScript, etc.) are loaded when the page is first loaded. Angular uses MVC, architecture pattern to manage its data and views. The Model is the data that the application uses, the View is what the user sees, and the Controller is responsible for managing communication between the Model and the View.</p><p>When a user interacts with an Angular application, the Angular framework will automatically update the View to reflect any changes in the data. This means that Angular applications are very responsive and fast, as the user does not need to wait for the page to reload in order to see updated data.</p><p>The following is is an example of coding from an angular.json file:<br><img src='./assets/angular/angularJson.png'></p>"
            },
            {
                "name": "What is a bootstrapping module in angular? / runtime / polyfills / styles / vendor / main",
                "description": "<p>The process of loading the index.html page, app-level module, and app-level component is called bootstrapping, or loading the app.<br><br>Angular takes the following steps to bootstrap the application:</p><ol><li><strong>Load index.html</strong> - The starting point of any Angular web application is the <strong>index.html</strong>. This page refers to all the necessary JavaScript files for the application.</li><li><strong>Load Angular, Other Libraries, and App Code</strong> - To run our application, we use the <code>Angular CLI</code> command <code>ng serve</code> or <code>npm start</code>. You can see that the compiler included five script files. They are <code>runtime</code>, <code>polyfills</code>, <code>styles</code>, <code>vendor</code>, &amp; <code>main</code>. All these files have two versions one is <code>es5</code> &amp; the other one <code>es2015</code><br><strong>#1. runtime.js:</strong> It contains the script that is responsible for the webpack to run<br><strong>#2. polyfills.js</strong> – It contains the scripts which is responsible for supporting the variety of the latest modern browsers<br><strong>#3. styles.js</strong> – This file contains the global style rules bundled as javascript file.<br><strong>#4. vendor.js</strong> – It contains the scripts from the Angular core library and any other 3rd party library. <br><strong>#5. main.js</strong> – It contains the code of the application.</li><li><strong>Execute main.js File</strong> - The code inside the <code>main.js</code> file is the entry point for the application. This file imports the module <code>platformBrowserDynamic</code> from the library <code>@angular/platform-browser-dynamic</code>. Here, <code>platformBrowserDynamic</code> is the module responsible for loading the Angular app in the desktop browser. Similar to this module, the module <code>platformNativeScriptDynamic</code> loads the app in a mobile device. Angular is flexible enough to run in a browser, server, web-worker, or mobile device. </li><li><strong>Load App/Root Module</strong> - The <code>root module</code> has one <code>root component</code>. This <code>root component</code> is loaded when the <code>root modules</code> are loaded by Angular. Apart from the root component, this module also has reference to all external modules imported using the <code>imports</code> array. Then comes <code>declarations</code> array that contains the list of components, directives, & pipes that belong to this Angular Module, The <code>providers</code> array, is where we register the services we create.<br><br> The <code>bootstrap</code> property or key of the <code>NgModule</code> decorator specifies which component should be loaded by Angular when the root module loads. Angular reads the bootstrap metadata and loads the app-level component, called <code>AppComponent</code></li><li><strong>Load App/Root Component</strong> - The TypeScript class of the app-level component, called <span><code>AppComponent</code></span>, is decorated with the <span><code>@Component</code></span> class decorator. The <span><code>@Component</code></span> class decorator provides the metadata about the class to Angular. It has the following three properties: <br> <code>#1. selector <br>#2. templateURL <br>#3. styleUrls.</code><br>If you are injecting a service into this component, then you will have a fourth property, as well, that references the service that will be injected into this class's constructor. The fourth property is called <span><code>providers</code></span>. It is an array of service classes that will be injected into this component.</li><li>Process Template - The <span><code>templateURL</code></span> property points to the HTML template file, which will be rendered to the browser when this component is processed. The <span><code>selector</code></span> property specifies the CSS selector, where the template will be inserted into the HTML.<br><br>Once <code>platformBrowserDynamic</code> is done with all preparation, it is ready to instantiate the app-level component or root component. <code>platformBrowserDynamic</code> then just iterates through the bootstrap components array and asks <code>ApplicationRef</code> to actually bootstrap each component.</li></ol>"
            },
			{
                "name": "What is HttpClient and its benefits?",
                "description": "<p>Front-end applications communicate with backend services over HTTP protocol using either XMLHttpRequest interface or the fetch() API. Angular provides a simplified client HTTP API known as <strong>HttpClient</strong> which is based on top of XMLHttpRequest interface. This client is avaialble from <code>@angular/common/http</code> package.<br><br><code>import { HttpClientModule } from '@angular/common/http';</code></p><p>The major advantages of HttpClient can be listed as below,</p><ol><li>Contains testability features</li><li>Provides typed request and response objects</li><li>Intercept request and response</li><li>Supports Observalbe APIs</li><li>Supports streamlined error handling</li></ol><br><p>Below are the steps need to be followed for the usage of HttpClient. <br><strong>#1.</strong> Import HttpClient into root module<br><strong>#2.</strong> Inject the HttpClient into the application: Let's create a userProfileService(userprofile.service.ts) as an example. It also defines get method of HttpClient<br><strong>#3.</strong> Create a component for subscribing service: Let's create a component called UserProfileComponent(userprofile.component.ts) which inject UserProfileService and invokes the service method,</p>"
            },
            {
                "name": "How to consume / fetch an JSON REST api?",
                "description": "<p>We are required to import and setup HttpClient service in Angular project to consume REST APIs.</p><p>To work with HttpClient service in Angular, you need to import the <code>HttpClientModule</code> in <code>app.module.ts</code>from @angular/common/http package file. Then Within your Service file inject HttpClient service in constructor method after that you can hit the remote server via HTTP's POST, GET, PUT and DELETE methods. <br><img src='./assets/expertAngular/httpService1.png'><br><img src='./assets/expertAngular/httpService.png'></p>"
            },
            {
                "name": "Which service is used for hitting an api?",
                "description": "<p>inject HttpClient service in constructor method after that you can hit the remote server via HTTP's POST, GET, PUT and DELETE methods.</p>"
            },
            {
                "name": "Differentiate between get and post?",
                "description": "<p>Both GET and POST method is used to transfer data from client to server in HTTP protocol but Main difference between POST and GET method is that GET carries request parameter appended in URL string while POST carries request parameter in message body which makes it more secure way of transferring data from client to server.</p>"
            },
            {
                "name": "What is a header?",
                "description": "<p>Headers let the client and the server share additional information about the HTTP request or response. For example, we use the content-type header to indicate the media type of the resource like JSON, text, blob, etc. Another important header is where you send the bearer token using the Authorization header 'Authorization', 'Bearer <yourTokenhere>'</p>"
            },
            {
                "name": "Where do we put http params in the request ?",
                "description": "<p>In an HTTP <strong>GET</strong> request, parameters are sent as a query string: <br><code>http://example.com/page?parameter=value&also=another</code></p><p>In an HTTP <strong>POST</strong> request, the parameters are not sent along with the URI. This is placed in the request body after the HTTP headers.</p>"
            },
            {
                "name": "What are different type of response type available in angular?",
                "description": "<p>The return type varies based on the <strong>observe</strong> and <strong>responseType</strong> values that you pass to the call.</p><p>By default returns Observable of <strong>JSON response type</strong></p>"
            },
            {
                "name": "What is role of observe/HttpObserve in request ?",
                "description": "<p><code>HttpClient.get</code> method can use <strong>observe</strong> property to define whether we want complete <strong>response or body only or events only</strong>. We need to assign values for observe property such as <br><strong>observe : 'response/body/events'</strong></p><p><strong>#1. Observe body</strong> - which is default <br><strong>#2. Observe response</strong> - accessing complete response, including headers <br><strong>#3. Observe events</strong> - exposes events that capture progress of both the request and response. </p><p>If you are uploading a file with HttpClient's <code>post</code> method and want the progress report, sending reportProgress as true alone will do nothing, you also have to configure observe events.<br><img src='./assets/expertAngular/observe.png'></p>"
            },
            {
                "name": "How to request a typed response?",
                "description": "<p>To specify the response object type, first define an interface with the required properties by using a interface.<br><img src='./assets/expertAngular/typedrequest1.png'></p><p>Then, specify that interface as the HttpClient.get() call's type parameter in the service.<br><img src='./assets/expertAngular/typedrequest.png'></p>"
            },
            {
                "name": "How to make and consume a jsonp request?",
                "description": "<p>JSONP is a method of performing API requests which go around the issue of <code>CORS</code>. <br>We can only use JSONP with APIs that support JSONP.</p><p><strong>Steps to use</strong></p><ol><li>Import HttpClientModule and HttpClientJsonpModule into your module.</li><li>Inject HttpClient into your service.</li><li>Pass the callback key as the second argument for the <code>jsonp</code> method.</li></ol><p><strong>app.module.ts</strong><br><img src='./assets/expertAngular/jsonp.png'><br><br><strong>example.service.ts</strong><br><img src='./assets/expertAngular/jsonp1.png'></p>"
            },
            {
                "name": "How to request non json data ? like download a file.",
                "description": " <p>In the httpOptions we have to pass <code>\"responseType: 'text'\"</code> if we want to download a text file in case of pdf file it will be <code>\"responseType: 'blob'\"</code></p>"
            },
            {
                "name": "How can we apply caching in request?",
                "description": "<p><strong>Using HttpInterceptor in Angular</strong> - We’ll create our <code>HttpInterceptor</code> so that whenever we place a GET request, the request will pass through the interceptors in the chain. Our interceptor will check the request to determine whether it has been cached. If yes, it will return the cached response. If not, it will pass the request along to the remainder of the chain to eventually make an actual server request. The interceptor will watch for the response when it receives the response and cache it so that any other request will return the cached response.<br><img src='./assets/expertAngular/cacheflow.png'></p><p><strong>Implementation of Caching</strong> - First, we will create a service named \"<strong>HttpCacheService</strong>\" which does the below actions. </p><ol><li>Used to retrieve saved response of a particular URL.</li><li>For any new outgoing request, used to save the URL and its response.</li><li>Invalidate a particular URL response.</li><li>Invalidate the entire cache.</li></ol><br><img src='./assets/expertAngular/cacheservice.png'><p>We will implement an HTTP interceptor named \"<strong>CacheInterceptor</strong>\"<br><img src='./assets/expertAngular/cacheinterceptor.png'></p>"
            },
            {
                "name": "How to apply debouncing in request?",
                "description": "<p><strong>3 Ways to Debounce HTTP Requests in Angular</strong></p><p><strong>#1. Using RxJS</strong> - We can use RxJS <code>debounce</code> operator to delay calls - debounce emits a value form the source Observable only after a particular life span determined by another Observable has passed without another source emission.<br><img src='./assets/expertAngular/debounceTime.png'><br><strong>Note</strong> - emits the `searchText` into the stream. This will cause the operators in its pipe function (defined in the ngOnInit method) to be run. `debounce` runs and then `map`. If the time interval of 1 sec in debounce hasn't elapsed, map will not be called, thereby saving the server from being called.</p><p><strong>#2. Using lodash/underscore debounce method</strong> - The lodash and underscore utility libraries export the debounce function that we can use to debounce methods/functions execution.<br><img src='./assets/expertAngular/lodash.png'><br><img src='./assets/expertAngular/underscore.png'></p><p><strong>#3. Using decorators</strong> - <br><img src='./assets/expertAngular/debouncedecorator.png'></p>"
            },
            {
                "name": "How to handle more than one api request",
                "description": "<p><strong>Call The APIs with RXJS forkJoin</strong> - This operator is best when you only care about the final emitted value of each which means it only emits once when all of the observables emits at least once or complete.<br><img src='./assets/expertAngular/forkJoin.png'></p>"
            },
            {
                "name": "How to read the full response from HttpClient?",
                "description": "Inorder to get full response, you should use observe option from HttpClient,<br><img src='./assets/expertAngular/observe1.png'>"
            },
            {
                "name": "How do you perform Error handling for HttpClient?",
                "description": "<p>If the request fails on the server or failed to reach the server due to network issues then HttpClient will return an error object instead of a successful reponse. In this case, you need to handle in the component by passing error object as a second callback to subscribe() method.<br><br><img src='./assets/angular/errorhandlinghttp.png'></p><p>It is always a good idea to give the user some meaningful feedback instead of displaying the raw error object returned from HttpClient.</p>"
            },
            {
                "name": "What are Http Interceptors?",
                "description": "<p>Http Interceptors are part of @angular/common/http, which inspect and transform HTTP requests from your application to the server and vice-versa on HTTP responses. These interceptors can perform a variety of implicit tasks, from authentication to logging.</p><p>The syntax of HttpInterceptor interface looks like as below,<br><code>interface HttpInterceptor { <br> intercept(req: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt;{ <br>return next.handle(req); } <br>}</code></p><p>You can use interceptors by declaring a service class that implements the intercept() method of the HttpInterceptor interface.<br><code>@Injectable() <br> export class MyInterceptor implements HttpInterceptor { <br> constructor() {} <br> intercept(req: HttpRequest<any>, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; { <br> return next.handle(req);<br>... <br> } <br> } <br></code></p><p>After that you can use it in your module,<br><img src='./assets/angular/import-httpinterceptors.png'></p>"
            },
            {
                "name": "10 ways / applications to use Http Interceptors in Angular",
                "description": "<p>It provides a way to intercept HTTP requests and responses to transform or handle them before passing them along.</p><ul><li><strong>Authentication</strong> -  This is one of the most common use cases for interceptors and for a good reason. There are several things connected to authentication we can do: #Add bearer token, #Refresh Token, #Redirect to the login page</li><li><strong>Caching</strong> - Since interceptors can handle requests by themselves, without forwarding to next.handle(), we can use it for caching requests. What we do is use the URL a the key in our cache that is just a key-value map. And if we find a response in the map, we can return an observable of that response, by-passing the next handler. This increases performance since you don't have to go all the way to the backend when you already have the response cached.</li><li><strong>Fake backend</strong> - A mock or fake backend can be used in development when you do not have a backend yet. We mock the response depending on the request. And then return an observable of HttpResponse.</li><li><strong>URL</strong> - Manipulating the URL. for example, want to change HTTP to HTTPS. It's as easy as cloning the request and replacing http:// with https:// at the same time. Then we send the cloned, HTTPS request to the next handler. <br><img src='./assets/angular/interceptorUrl.png'></li><li><strong>Loader</strong> - We could set a loader centrally in an interceptor so that we show a loader whenever there are active requests and while we are waiting for a response. <br><br>For this, we can use a loader service that has a show and a hide function. Before we handle the request, we call the show method and through finalize we can hide the loader when done. <br><img src='./assets/angular/interceptorLoader.png'></li><li><strong>Conversion</strong> - When the API returns a format we do not agree with, we can use an interceptor to format it the way we like it. This could be converting from XML to JSON or like in this example property names from PascalCase to camelCase. If the backend doesn't care about JSON/JS conventions we can use an interceptor to rename all the property names to camelCase. <br><img src='./assets/angular/interceptorConverting.png'></li><li><strong>Manipulating Headers</strong> - Some things are: Authentication/authorization, Caching behavior; for example, If-Modified-Since, XSRF protection <br><img src='./assets/angular/interceptorHeader.png'></li><li><strong>Notifications</strong> - Here we have many different cases where we could show messages. In my example, I show 'Object created' every time we get a 201 created status back from the server. <br><img src='./assets/angular/interceptorNotification.png'></li><li><strong>Errors</strong> - There are two use cases for errors that we can implement in the interceptor: First, we can retry the HTTP call. Secondly, we can check the status of the exception. And depending on the status, we can decide what we should do.</li><li><strong>Profiling</strong> - Because interceptors can process the request and response together, they can do things like time and log an entire HTTP operation. So we can capture the time of the request and the response and log the outcome with the elapsed time. <br><img src='./assets/angular/interceptorProfiling.png'></li></ul>"
            },
            {
                "name": "How to handle JWT Authentication token in angular?",
                "description": "<p>JSON Web Tokens (JWTs) provide one way to solve this issue. Your Angular app can talk to a backend that produces a token. The Angular app can then pass that token in an Authorization header to the backend to prove they’re <strong>authenticated</strong>. The backend should verify the JWT and grant access based on its validity.</p><ul><li><strong>Step 1</strong>: Creating Login page directly on the application. which will send post request for the api with username and password as arguments to a service. on the success method set the response of the token to your web storage such as local or session or cookies</li><li><strong>Step 2</strong>: Create a separate Authentication service. Which will have the logic build for the http post request with the username and password in the body to the api</li><li><strong>Step 3</strong>: Create a seperate Guard Service(CLI <code>ng generate guard guardName</code>). With the default method <code>canActivate()</code> build the logic to return <code>true</code> if the user is logged in as it can only return a boolean value</li><li><strong>Step 4</strong>: Create a token interceptor service(CLI <code>ng generate interceptor interceptorName</code>). With the default intercept method inject the set the token in the http headers, to the backend for validation with the key and value 'Authorization', 'bearer ' + tokenValue</li><li><strong>Step 5</strong>: Calling the HTTP_INTERCEPTORS within the provider of your root module with object configs such as <code>{<br> provide: HTTP_INTERCEPTORS,<br> useClass: TokenInterceptorService,<br> multi: true<br> }</code></li><li><strong>Step 6</strong>: Calling the auth guard service within the routing module and implement the canActivate object to the route path which want to be secured.<br><code>{ <br> path: 'dashboard', <br> canActivate: [AuthGuard], <br> component: DashboardComponent <br> }</code></li></ul>"
            },
            {
                "name": "How to manage token expire scenario by renew it using refresh token without impact of user experience?",
                "description": "<p><strong>Refresh Tokens</strong> are credentials used to obtain access tokens.  Refresh tokens are issued to the client by the authorization server and are used to obtain a new access token when the current access token becomes invalid or expires, or to obtain additional access tokens with identical scope.</p><p>When you initially receive the access token you are very much likely to get a refresh token<br>{<br>\"access_token\": \"AYjcyMzY3ZDhiNmJkNTY\",<br>\"refresh_token\": \"RjY2NjM5NzA2OWJjuE7c\",<br>\"token_type\": \"bearer\",<br>\"expires\": 3600<br>}</p><p>When the access token is about to get expired a POST request will be made to the service’s token endpoint.</p><p>When we are building the logic within our token interceptor for cloning/adding the authorization bearer token in the request headers then, at that time we have to add an additional logic for checking if the token is expired or not, then here based on the response with a status code 401 we can make another post request to the refreshToken api(along with the refresh_token value in the body of that post request) which will validate at the backend server for the refresh_token send in the body and that backend server will return a new response with the access token and most probably another refresh token as well which is optional, and this new access token is then again cloned with the authorization bearer and added back to the request header of the token interceptor. This way the cycle continues and the user has to avoid login again and again even after the access token expires.</p>"
            },
            {
                "name": "In provider array we use multi true what it does ?",
                "description": "<p>The multi is useful when you register multiple providers for the same token</p><p>So the thumb rule is if you are registering multiple providers for the same TOKEN then always use multi=true to avoid the first provider from not being injected. When it's injected, you can use it in the constructor of the class.</p><p><img src='./assets/expertAngular/multi.png'><br><br>In Simple Terms - When we use <strong>multi: true</strong> then it informs the Angular that the type of token/provider used is multi provider where multiple values can be provided for that single token in Dependency Injection. Therefore, when the dependency of this token is asked then it will provide us a list of all registered and provided values in the form of array.</p>"
            },
            {
                "name": "Explain Template-driven and Reactive Forms in Angular ? Among them which is best and why?",
                "description": "<p><strong>Template-driven</strong> - In Template Driven Forms we specify behaviors/validations using directives and attributes in our template and let it work behind the scenes. All things happen in Templates hence very little code is required in the component class. How to use Template-driven forms.</p><ol><li>The form is set up&nbsp;using <code>ngForm</code> directive</li><li>controls are set up using the <code>ngModel</code> directive</li><li><code>ngModel</code> also provides the two-way data binding</li><li>The Validations are configured in the template via directives</li></ol><br><p><strong>Reactive Forms</strong> - Reactive forms are forms where we define the structure of the form in the component class. i.e. we create the form model with <code>Form Groups</code>, <code>Form Controls</code>, and <code>FormArrays</code>. We also define the validation rules in the component class. Then, we bind it to the HTML form in the template. This is different from the template-driven forms, where we define the logic and controls in the HTML template. <br>How to use Reactive Forms</p><ol><li>Import <code>ReactiveFormsModule</code></li><li>Create Form Model in component class using FormGroup, FormControl &amp; FormArrays</li><li>Create the HTML Form resembling the Form Model.</li><li>Bind the HTML Form to the Form Model</li></ol><br><p><strong>Reasons to use Reactive Forms</strong></p><ol><li><strong>Immutability</strong> - Reactive form keeps the data model pure by providing it as an immutable data structure. It uses an immutable approach to manage the state of a form.</li><li><strong>Predictability</strong> - Reactive form is predictable because it access synchronously to the data model. Reactive forms are built around observable streams to track changes in the form. And that predictability makes testing easy.</li><li><strong>Scalability</strong> - Due to the fact that reactive form is synchronous makes scaling easier. It is reusable and helps a lot with large-scale forms. Template-driven form is not reusable because it provides asynchronous access to the form model and therefore the scalability is tough with it.</li></ol>"
            },
            {
                "name": "How does data flow differently in template and reactive forms?",
                "description": "<p><strong>Data flow in Reactive forms</strong> - In Reactive form, each form element in the view is directly linked to a form model (FormControl instance). Any updation from the view to the model and the model to the view are synchronous and are not dependent on the UI. </p><p><strong>Data flow from View to Model</strong><br><img src='./assets/expertAngular/dfReactiveForm.png'></p><ul><li>First, the user types a value into the input element. In this example, the input element is Favorite Color and the typed value is Blue.</li><li>Then, the form input element emits an \"input\" event with the latest typed value. </li><li>Then the control value accessor(who listen for events on the form input element) immediately relays the new value to the FormControl instance.</li><li>After receiving the value theFormControl instance emits the new value through the valueChanges observable.</li><li>Any subscribers to the valueChanges observable receive the new value.</li></ul><p><strong>Data flow from Model to View</strong><br><img src='./assets/expertAngular/dfReactiveForm1.png'></p><ul><li>First, the user calls the favoriteColorControl.setValue() method. This method updates the FormControl value.</li><li>Then, the FormControl instance emits the new value through the valueChanges observable.</li><li>Then, subscribers to the valueChanges observable receive the new value.</li><li>At last, the control value accessor on the form input element updates the element with the new value.</li></ul><br><p><strong>Data flow in Template-driven forms</strong> - Every form element of the template-driven forms is linked to a directive to manage the form model internally.Let's take a graphical example to understand how data flows in template-driven angular forms when an input field's value is changed from the view and then from the model.</p><br><p><strong>Data flow in Template-driven forms</strong> - Every form element of the template-driven forms is linked to a directive to manage the form model internally.</p><p><strong>Data flow from View to Model:</strong><br><img src='./assets/expertAngular/dfTemplateForm.png'></p><ul><li>First, the user types Blue into the input element.</li><li>Then, the input element emits an \"input\" event having the value Blue.</li><li>Then, the control value accessor attached to the input triggers the setValue() method on the FormControl instance.</li><li>After the setValue() method, the FormControl instance emits the new value through the valueChanges observable.</li><li>Subscribers to the valueChanges observable receive the new value.</li><li>After that, the control value accessor also calls the NgModel.viewToModelUpdate() method which emits an ngModelChange event.</li><li>Here, component template <strong>uses two-way data binding</strong> for the favoriteColor property, the favoriteColor property in the component is updated to the value emitted by the ngModelChange event (Blue).</li></ul><p><strong>Data flow from Model to View:</strong><br><img src='./assets/expertAngular/dfTemplateForm1.png'></p><ul><li>First, the favoriteColor is updated to anew value in the component. </li><li>Change detection starts.</li><li>During change detection, the ngOnChanges lifecycle hook is called on the NgModel directive instance because the value of one of its inputs has changed.</li><li>The ngOnChanges() method queues an async task to set the value for the internal FormControl instance.</li><li>Change detection is complete now.</li><li>Then, the task to set the FormControl instance value is executed.</li><li>The FormControl instance emits the latest value through the valueChanges observable.</li><li>Any subscribers to the valueChanges observable receive the new value.</li><li>The control value accessor updates the form input element in the view with the latest favoriteColor value.</li></ul>"
            },
            {
                "name": "In Which form of approach data model is immutable?",
                "description": "<p>Reactive forms provide synchronous access to the data model, immutability with observable operators, and change tracking through observable streams.</p>"
            },
            {
                "name": "Differences between Template-driven and Reactive Forms",
                "description": "<ol><li>Template-driven forms make use of the \"FormsModule\", while reactive forms are based on \"ReactiveFormsModule\".</li><li>Template-driven forms are asynchronous in nature, whereas Reactive forms are mostly synchronous.</li><li>In a template-driven approach, most of the logic is driven from the template, whereas in reactive-driven approach, the logic resides mainly in the component or typescript code.</li></ol>"
            },
            {
                "name": "What are the different ways to group form controls?",
                "description": "<ol><li><strong>FormGroup</strong>: It defines a form with a fixed set of controls those can be managed together in an one object. It has same properties and methods similar to a FormControl instance. This FormGroup can be nested to create complex forms as below.</li><li><strong>FormArray:</strong> It defines a dynamic form in an array format, where you can add and remove controls at run time. This is useful for dynamic forms when you don’t know how many controls will be present within the group.</li></ol>"
            },
            {
                "name": "What is use of remove Control?",
                "description": "<p>The <code>removeControl</code> removes the control from the <code>FormGroup</code> at runtime by given control name.</p><p>Example <br><code>removeControl(name: string): void <br></code></p><p>The name is name of control to remove from FormGroup. Find the code to use it. <br><code>this.personForm.removeControl('nationality'); </code></p>"
            },
            {
                "name": "How do you update specific properties of a form model?",
                "description": "<p>You can use <code>patchValue()</code> method to update specific properties defined in the form model. For example,you can update the name and street of certain profile on click of the update button.<br><img src='./assets/angular/patchvalue.png'><br><img src='./assets/angular/patchvalue1.png'><br><br>You can also use <strong>setValue</strong> method to update properties. But with this method one has to update all the properties of the control and cant skip any one value</p>"
            },
            {
                "name": "What is the purpose of FormBuilder?",
                "description": "<p>FormBuilder is used as syntactic sugar for easily creating instances of a FormControl, FormGroup, or FormArray. This is helpful to reduce the amount of boilerplate needed to build complex reactive forms. It is available as an injectable helper class of the <code>@angular/forms</code> package.<br><img src='./assets/angular/formbuilder.png'></p>"
            },
            {
                "name": "What are the types of validator functions? (sync / async)",
                "description": "<p>In reactive forms, the validators can be either synchronous or asynchronous functions,</p><ol><li><strong>Sync validators:</strong> These are the synchronous functions which take a control instance and immediately return either a set of validation errors or null. Also, these functions passed as second argument while instantiating the form control. The main use cases are simple checks like whether a field is empty, whether it exceeds a maximum length etc.</li><li><strong>Async validators:</strong> These are the asynchronous functions which take a control instance and return a Promise or Observable that later emits a set of validation errors or null. Also, these functions passed as second argument while instantiating the form control. The main use cases are complex validations like hitting a server to check the availability of a username or email.</li></ol><br><br><img src='./assets/angular/validatortype.png'><br>"
            },
            {
                "name": "How to put custom validation in template driven forms?",
                "description": "<p><strong>Validator Interface</strong> - Building a Validator in template-driven forms is similar to building an Angular directive. The directive must implement the Validator interface <br><img src='./assets/expertAngular/validatorInterface.png'></p><p>The directive must implement the <code>validate</code> function. Notice that the <code>validate</code> function has the same signature as the ValidatorFn Interface. Whenever the <code>Validator</code> directive is invoked angular looks for the <code>validate</code> method and invokes it.</p><p><strong>Validate Function</strong></p><p>A <code>Validator</code> is just a function, which must implement ValidatorFn Interface.<br><img src='./assets/expertAngular/validatorInterfaceFn.png'></p>"
            },
            {
                "name": "How to put custom validation in reactive forms ?",
                "description": "<p><strong>Create the validation service</strong> By using the validatorFn and AbstractControl Class of the angular forms module <br><img src='./assets/expertAngular/customValidatorService.png'><br><img src='./assets/expertAngular/customValidatorService1.png'><br><img src='./assets/expertAngular/customValidatorService2.png'></p><p>Then Create reactive form template which will import the custom validation service and bind the validator functions with the formControlName <br><img src='./assets/expertAngular/customValidatorService3.png'></p>"
            },
            {
                "name": "What is cross field validation?",
                "description": "<p>It is validating one form control based on the value of another</p><p>First of all, I will create and export an arrow function that accepts a <code>FormGroup</code> parameter and returns a <code>ValidatorFn</code>. <br>With this parameter we are now able to validate more than one controls and, of course, compare their values. <br><img src='./assets/expertAngular/passwordMatch.png'></p><p>The function takes a <code>FormGroup</code> parameter and returns: <br>#1. a {[key]: [value]} expression, if an error exists <br>#2 null if it's valid</p><p><strong>Apply errors to each control</strong> - If we want to show the error to the two fields, we also need to apply it to both form controls. <br><img src='./assets/expertAngular/passwordMatch1.png'></p><p><strong>Using the custom Validator</strong> - Our validator is ready for use! The only thing left is to call it in our form like follows:<br><img src='./assets/expertAngular/passwordMatch2.png'></p>"
            },
            {
                "name": "Implement async validator for template driven form?",
                "description": "<p>Creating a Async Validator requires some basic rules to be followed</p><ol><li>The function must implement the&nbsp;<code>AsyncValidatorFn</code>&nbsp;Interface, which defines the signature of the validator function.</li><li>The function must return either an <code>observable</code>or a <code>promise</code></li><li>Return&nbsp;<code>null</code>&nbsp;for valid, or an&nbsp;<code>ValidationErrors</code>&nbsp;if the input is invalid</li></ol>"
            },
            {
                "name": "Difference between pristine, dirty and touched ?",
                "description": "<p><strong>pristine:</strong> The pristine class tells that the form has not been modified by the user. This returns true if the form has not been modified by the user.</p><ul><li><strong>Return type:</strong> Return Boolean True if the form/input field is not modified by the user else it returns False.</li></ul><p><strong>dirty:</strong> The dirty class tells that the form has been made dirty (modified ) by the user. It returns true if the user has modified the form.</p><ul><li><strong>Return type:</strong> Return Boolean True if the form/input field is modified by the user else it returns False.</li></ul><p><strong>touched:</strong> A controls is said to be touched if the the user focused on the control and then focused on something else. For example by clicking into the control and then pressing tab or clicking on another control in the form.</p><ul><li><strong>Return type:</strong> Return Boolean True if the input field has been touched by the user, otherwise it's false.</li></ul><br><p>The difference between touched and dirty is that with touched the user doesn't need to actually change the value of the input control.</p>"
            },
            {
                "name": "How do you optimize the performance of async validators?",
                "description": "<p>Since all validators run after every form value change, it creates a major impact on performance with async validators by hitting the external API on each keystroke. This situation can be avoided by delaying the form validity by changing the updateOn property from change (default) to submit or blur. The usage would be different based on form types,</p><ol><li><strong>Template-driven forms:</strong> Set the property on <code>ngModelOptions</code> directive <br><img src='./assets/angular/updateon.png'></li><li><strong>Reactive-forms:</strong> Set the property on FormControl instance<br><img src='./assets/angular/updateon1.png'></li></ol>"
            },
            {
                "name": "What is RxJS",
                "description": "<p>The <strong>RxJS</strong> (Reactive Extensions Library for JavaScript) is a javascript library, that allows us to work with asynchronous data streams<br><br>The Angular uses the RxJS library heavily in its framework to implement Reactive Programming. Some of the examples where reactive programming used are</p><ul><li>Reacting to an <code>HTTP request in Angular</code></li><li><code>Value changes</code> / <code>Status Changes</code> in Angular Reactive Forms</li><li>The Router and Forms modules use observables to listen for and respond to user-input events.</li><li>You can define custom events that send observable output data from a child to a parent component.</li><li>The HTTP module uses observables to handle AJAX requests and responses.</li></ul><p>The RxJs has two main players <br>#1. Observable <br>#2. Observers ( Subscribers)</p>"
            },
            {
                "name": "What are Promises?",
                "description": "<p><strong>Promise </strong>is an object that may produce a single value some time in the future, either a resolved value or a reason that it’s not resolved(e.g. may be due to a network error) or in a pending state.</p><p>A Promise in programming produces either result which can be:</p><ol><li><strong>Fulfilled</strong>, which means you get a <em>result value.</em></li><li><strong>Rejected</strong>, which means the result you get is an <em>error</em>.</li><li><strong>Pending</strong>, which means that it works but the result is <em>undefined</em>.</li></ol>"
            },
            {
                "name": "What are observables?",
                "description": "<p>Observables belongs to RxJS library, to perform asynchronous programming in Angular application we can use either Observable or Promise. When we send and receive data over HTTP, we need to deal it asynchronously because fetching data over HTTP may take time. Observable is subscribed by using async pipe or by using subscribe method</p><p>Some methods of Observable class are subscribe, map, mergeMap, switchMap, exhaustMap, debounceTime, of, retry, catch, throw etc<br><br>To understand observable in simple words - Observables are declarative statment — that is, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications(using async pipe or subscribe method) until the function completes, or until they unsubscribe. <br>Ex. consider observables as newsletters and a subscriber. For each subscriber a new newsletter is created. They are then only send to those subscribed people who have subscibed to that newletter, and not to anyone else on the network.</p>"
            },
            {
                "name": "How to create observable?",
                "description": "<p>First of all, we need to import Observable from rxjs.</p><p>Then, we create an Observable by calling the new Observable constructor that takes one argument. In the following example, we create an Observable that emits a number every second to a subscriber.<br><img src='./assets/expertAngular/observable.png'></p><p>As it is, nothing will happen because we need to subscribe to an Observable to consume its values.</p><p><strong>Subscribing to the Observable</strong> - Remember that an Observable delivers three types of notifications to the Observer:</p><ul><li><strong>next</strong>: sends data (i.e. Numbers, Strings, Objects, etc.)</li><li><strong>error</strong>: sends a JavaScript Error or exception. Nothing else will be delivered afterwards.</li><li><strong>complete</strong>: does not send a value. Nothing else will be delivered afterwards. We will start by subscribing to the Observable.</li></ul><p>Every time we call observable.subscribe, the call triggers an execution that is independent and unique to that given subscriber.<br><img src='./assets/expertAngular/observablesubscribe.png'></p>"
            },
            {
                "name": "What are observable creation functions?",
                "description": "<p> RxJS provides creation functions for the process of creating observables from things such as promises, events, timers and Ajax requests. Let us explain each of them with an example,</p><br><img src='./assets/angular/observablecreation.png'><br><img src='./assets/angular/observablecreation1.png'>"
            },
            {
                "name": "What is subscribing / Observer?",
                "description": "<p>An Observable instance begins publishing values only when someone subscribes to it. So you need to subscribe by calling the <strong>subscribe()</strong> method of the instance, passing an observer object to receive the notifications.</p><p><strong>If you do not supply handler for observer</strong> - Normally an observer object can define any combination of next, error and complete notification type handlers. If you don't supply a handler for a notification type, <strong>the observer just ignores notifications of that type.</strong></p><p>Let's take an example of creating and subscribing to a simple observable, with an observer that logs the received message to the console.<br><br><img src='./assets/angular/subscribing.png'></p>"
            },
            {
                "name": "What is next, error and complete?",
                "description": "<p>An observable can send three types of notifications: <code>Next</code>, <code>Error</code>, <code>Complete</code>.</p><ul><li><code>Next</code> notification sends a value such as a <em>Number</em>, a <em>String</em>, an <em>Object</em>, etc.</li><li><code>Error</code> notification sends a JavaScript Error or exception. Nothing else will be delivered afterwards.</li><li><code>Complete</code> notification does not send a value. Nothing else will be delivered afterwards. We will start by subscribing to the Observable.</li></ul>"
            },
            {
                "name": "What is multicasting?",
                "description": "<p>Multi-casting is the practice of broadcasting to a list of multiple subscribers in a single execution.<br><br><img src='./assets/angular/multicasting.png'></p>"
            },
            {
                "name": "How do you perform error handling in observables?",
                "description": "<p>You can handle errors by specifying an error callback on the observer instead of relying on try/catch which are ineffective in asynchronous environment.<br><br><img src='./assets/angular/errorhandling.png'></p>"
            },
            {
                "name": "Difference between Promise and Observables?",
                "description": "<table><tbody><tr><td><strong>Promise</strong></td><td><strong>Observable</strong></td></tr><tr><td>Promises handle asynchronous events and emits only one value, Here even if it has second value to return it will only provide a single value<br> <code>const numberPromise = new Promise((resolve) => {<br> resolve(5);<br> resolve(10);<br> });<br><br> numberPromise.then(value => console.log(value));<br> // still prints only 5</code></td><td>Can provide multiple values over a period of time using map()<br><code>const numberObservable = new Observable((observer) => {<br> observer.next(5);<br> observer.next(10);<br> });<br><br> numberObservable.subscribe(value => console.log(value));<br> // prints 5 and 10</code></td></tr><tr><td>Executes immediately as soon as created</td><td>Executes only when the observable is subscribed using subscribe()</td></tr><tr><td>Used with .then()</td><td>Has chaining of methods and subscription to handle complex applications</td></tr><tr><td>Cannot be canceled</td><td>Can be canceled by using the unsubscribe() method</td></tr><tr><td>Does not provide any operators</td><td>Provides the map, switchMap, filter, reduce, retry, and retryWhen operators</td></tr></tbody></table><br><img src='./assets/angular/promise-observables.png'>"
            },
            {
                "name": "What is Hot and Cold observable?",
                "description": "<p>When the data is produced by the Observable itself, we call it a cold Observable. For example, observables created using the <code>of, from, range, interval and timer</code> operators will be cold. The data is created from within the observable itself, and there truly is not data being produced until the observable is subscribed to.</p><p> When the data is produced outside the Observable, we call it a hot Observable. For example, observables created with the <code>fromEvent</code> operator for either user events (clicks, mouse moves,…) or WebSocket events are hot observables. The data is being produced regardless of if there's a subscriber or not. If there's no subscriber when the data is being produced, the data is simply lost.</p>"
            },
            {
                "name": "What is share operator?",
                "description": "<p>The share operator is known as a multicast operator. Share also manages the underlining subscriptions and disconnects when all the subscribers stop listening. It then restart the stream if a new subscriber subscribes again.</p>"
            },
            {
                "name": "Debouncing in Angular?",
                "description": "<p>Debouncing in JavaScript is a practice used to improve browser performance. It is used to ensure that time-consuming tasks do not fire so often, that it stalls the performance of the web page. In other words, it limits the rate at which a function gets invoked.<br>Example on click event when pressed continously. it may hang the processing of the function logic or subscription of the data over the api. SO to avid this add debounce so that the next request is only triggered when the debounced interval is reached and then subscribe the data</p>"
            },
            {
                "name": "Difference between of and from?",
                "description": "<p><em><strong>of</strong></em> will emit all values at once</p><p><em><strong>from</strong></em> will emit all values one by one</p><p><em><strong>of</strong></em> with <em><strong>spread</strong></em> operator = <em><strong>from</strong></em> operator<br><img src='./assets/expertAngular/offrom.png'></p><p>Based on Simple observation you can realize that in case of from it actually processes the input that you have passed to this function, where as in case of off there is no such processing it will just return the value as it is. Like wise in case of from if you pass a promise it will wait for that promise to completed and only then it will return the value of it and here the of operator will not do that.</p>"
            },
            {
                "name": "Observable operators",
                "description": "<p><strong>pipe:</strong> RxJS pipe is used to combine functional operators into a chain. pipe is an instance method of Observable as well as a standalone RxJS function. pipe can be used as Observable.pipe or we can use standalone pipe to combine functional operators.</p><p><strong>tap:</strong> It is used for side effects inside a stream. So this operator can be used to do something inside a stream and returning the same observable as it was used on. tap is the pipeable operator and it is the changed name of the RxJS do operator.</p><p><strong>map:</strong> The map is a pipeable operator. It is used to to transform the each value emitted by the source observable. simply it creates new observable after manipulating the each items of source observable..</p><p><strong>switchMap:</strong> RxJS switchMap emits Observable after applying the given function to each item emitted by source Observable. The Observable emitted by given function that is also called inner Observable, is returned by switchMap operator. switchMap starts emitting items emitted by inner Observable. When a new inner Observable is emitted, the switchMap stops emitting items from previous inner Observable and starts emitting items from latest inner Observable. It continues to do in the same way for all subsequent inner Observable. switchMap is a RxJS pipeable operator and it is used within pipe function of Observable</p><p><strong>mergeMap:</strong> Merge map operator is often get used when the requirement is to merge response from two observables. This rxjs operator return an observable after merging the response from two observables, things to notice here is that second observable does not execute until merged observable emits some response.<br><strong>Example</strong>Suppose source Observable is emitting 3 elements consecutively to mergeMap and every element is processed by an inner Observable inside mergeMap. Now suppose all the three elements from source Observable has entered into mergeMap before inner Observable for first element is not completed. Then mergeMap will wait to complete the inner Observable for all the three elements and then their Observable responses will be merged into one Observable response and returned it by mergeMap as output.</p><p><strong>filter:</strong> RxJS filter filters values emitted by source Observable. We need to pass a predicate to filter as an argument and if predicate returns true, only when filter will emit value. The values of source Observable for which predicate returns false , will not be emitted by filter. Angular 6 integrates RxJS 6 which has been shipped with pipeable operators that is used independent of Observable. RxJS pipeable operators are used independent of Observable within the pipe method of Observable.</p><p><strong>debounceTime:</strong> debounceTime is a RxJS operator that emits latest value from the source Observable after a given time span has passed without another source emission. It behaves same as RxJS delay but emits only the latest value. debounceTime delays the values emitted by source Observable for the given due time and within this time if a new value arrives, the previous pending value is dropped. In this way debounceTime keeps track of most recent value and emits that most recent value when the given due time is passed.</p><p><strong>retry:</strong> retry operator returns source Observable with the exception of an error. When source Observable calls error then retry operator resubscribe it for the maximum of given number of time. If Observable starts emitting elements and suppose at any point it calls error before completion, then retry operator will resubscribe the source Observable and starts emitting from start again. Suppose we have used retry(3) in our code, it means for any error in source Observable, it will be resubscribed up to 3 times. If in first attempt of resubscribe by retry(3), it completes normally then no other attempt to resubscribe will be made.</p><p><strong>forkJoin</strong> - This operator is best when you have such scenarios where you want to get the only last value while having group of observable execution. This is not a best choice to used for multiple API calls because there if we have error in any of the API’s then if the error is not handle properly it might get you in trouble so it is not considered as a best approach,</p><p><strong>combineLatest</strong> - operator is used to execute multiple observable at once , it only emits the latest value from each source observable. To run combinelatest operator we must have value in observable and combinelatest operator will not execute until each of source observable emits at least one value.<br><img src='./assets/expertAngular/combinelatest.png'><br><img src='./assets/expertAngular/combinelatest1.png'></p><p><strong>map & pluck</strong> - Map and Pluck are most used and very useful operators. Map operator in RxJS works similar to JS map. Pluck is used when we just need to pass single field value to the subscription instead of sending entire JSON object.<br><img src='./assets/expertAngular/mappluck.png'></p><p><strong>zip</strong> - Zip operator will wait for all observable to emit and then it zips those values into an array as an output.<br><img src='./assets/expertAngular/zip.png'><br><img src='./assets/expertAngular/zip1.png'></p><p><strong>bufferTime</strong> - It is used to buffer the emitted data of the originating Observable for a specific time period and collects values from the past as an array, and emits those arrays periodically in time.</p>"
            },
            {
                "name": "What are the utility functions / method provided by RxJS?",
                "description": "<p>The utility functions provided by Angular are:</p><ul><li><strong>map()</strong> : Used to map values of different data types</li><li><strong>filter()</strong> : Used for filtering streams</li><li><strong>concat()</strong> : Used to concatenate multiple strings</li><li><strong>merge()</strong>: Used to recursively descend into object properties in the source copy, while forming a deep copy of the same.</li></ul>"
            },
            {
                "name": "What is Subject?",
                "description": "<p>A Subject is a special type of Observable that allows values to be multicasted to many Observers. Subjects are like EventEmitters. Every Subject is an Observable and an Observer. You can subscribe to a Subject, and you can call next to feed values as well as error and complete.<br><br><img src='./assets/angular/subject.png'></p>"
            },
            {
                "name": "What is BehaviorSubject",
                "description": "<p>The BehaviorSubject holds the value that needs to be shared with other components. These components subscribe to data which is simple returning the BehaviorSubject value without the functionality to change the value.</p>"
            },
            {
                "name": "Difference between Subject and BehaviorSubject?",
                "description": "<p><strong>Subject</strong> does not return the current value on Subscription. It triggers only on .next(value) call and return/output the value.<br> var subject = new Rx.Subject();<br>subject.next(1); //Subjects will not output this value<br> subject.subscribe({<br> next: (v) => console.log('observerA: ' + v)<br> });<br> subject.subscribe({<br> next: (v) => console.log('observerB: ' + v)<br> });<br> subject.next(2);<br> subject.next(3);<br>// observerA: 2<br> // observerB: 2<br> // observerA: 3<br> // observerB: 3</p><p><strong>BehaviorSubject</strong> holds one value. When it is subscribed it emits the value immediately. In Short its behavior is like a eventEmitter<br> <code>var bSubject= new Rx.BehaviorSubject(0); <br> // 0 is the initial value<br><br>bSubject.subscribe({<br> next: (v) => console.log('observerA: ' + v) <br>// output initial value, then new values on `next` triggers<br> });<br><br> bSubject.next(1); <br> // output new value 1 for 'observer A'<br><br> bSubject.next(2); <br> // output new value 2 for 'observer A', current value 2 for 'Observer B' on subscription<br><br> bSubject.subscribe({<br> next: (v) => console.log('observerB: ' + v) <br>// output current value 2, then new values on `next` triggers<br> });<br> bSubject.next(3);<br><br> // observerA: 0<br> // observerA: 1<br> // observerA: 2<br> // observerB: 2<br> // observerA: 3<br> // observerB: 3 </code></p>"
            },
            {
                "name": "Difference between ReplaySubject and BehaviorSubject?",
                "description": "<p><strong>BehaviorSubject</strong> A variant of Subject that requires an initial value and emits its current value whenever it is subscribed to.</p> <p><strong>ReplaySubject</strong> A variant of Subject that “replays” or emits old values to new subscribers. It buffers a set number of values and will emit those values immediately to any new subscribers in addition to emitting new values to existing subscribers.</p>"
            },
            {
                "name": "Difference between BehaviorSubject vs Observable?",
                "description": "<p>BehaviorSubject is a type of subject, a subject is a special type of observable so you can subscribe to messages like any other observable. The unique features of BehaviorSubject are:</p><ul><li>It needs an initial value as it must always return a value on subscription even if it hasn’t received a <code>next()</code></li><li>Upon subscription it returns the last value of the subject. A regular observable only triggers when it receives an <code>onnext</code></li><li>at any point you can retrieve the last value of the subject in a non-observable code using the <code>getValue()</code> method.</li></ul><p>Unique features of a subject compared to an observable are:</p><ul><li>It is an observer in addition to being an observable so you can also send values to a subject in addition to subscribing to it.</li></ul><p>In addition you can get an observable from behavior subject using the <code>asobservable()</code> method on BehaviorSubject.</p><p>In Angular services, I would use BehaviorSubject for a data service as a angular service often initializes before component and behavior subject ensures that the component consuming the service receives the last updated data even if there are no new updates since the component's subscription to this data.</p>"
            },
            {
                "name": "What are custom elements?",
                "description": "<p>Custom elements (or Web Components) are a Web Platform feature which extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. The browser maintains a CustomElementRegistry of defined custom elements, which maps an instantiable JavaScript class to an HTML tag. Currently this feature is supported by Chrome, Firefox, Opera, and Safari, and available in other browsers through polyfills.</p>"
            },
            {
                "name": "Explain how custom elements works internally?",
                "description": "<ul><li><strong>App registers custom element with browser:</strong> Use the <code>createCustomElement()</code> function to convert a component into a class that can be registered with the browser as a custom element.</li><li><strong>App adds custom element to DOM:</strong>  Add custom element just like a built-in HTML element directly into the DOM.</li><li><strong>Browser instantiate component based class:</strong> Browser creates an instance of the registered class and adds it to the DOM.</li><li><strong>Instance provides content with data binding and change detection:</strong> The content with in template is rendered using the component and DOM data. The flow chart of the custom elements functionality would be as follows <br><img src='./assets/angular/customElementFlow.png'></li></ul>"
            },
            {
                "name": "What are the mapping rules between Angular component and custom element?",
                "description": "<p>The Component properties and logic maps directly into HTML attributes and the browser's event system. Let us describe them in two steps,</p><ol><li>The <code><strong>createCustomElement()</strong></code> API parses the component input properties with corresponding attributes for the custom element. For example, component <code><strong>@Input('myInputProp')</strong></code> converted as custom element attribute <code><strong>my-input-prop</strong></code>.</li><li>The Component outputs are dispatched as HTML Custom Events, with the name of the custom event matching the output name. For example, component <code><strong>@Output() valueChanged = new EventEmitter()</strong></code> converted as custom element with dispatch event as 'valueChanged'.</li></ol>"
            },
            {
                "name": "Define typings for custom elements?",
                "description": "<p>You can use the <code>NgElement</code> and <code>WithProperties</code> types exported from @angular/elements.</p><p><pre>const container = document.createElement('my-container') as NgElement & WithProperties<{message: string}> <br>container.message = 'Welcome to Angular elements!'; <br>container.message = true;  // <-- ERROR: TypeScript knows this should be a string. <br>container.greet = 'News';  // <-- ERROR: TypeScript knows there is no `greet` property on `container`.</pre></p>"
            },
            {
                "name": "What is basehref tag ? where we need to put it?",
                "description": "<p>Base Href is used to set a base path for all your requests made relatively. <br><br>During navigation, the base href tag is used by the Angular router as a base path to the component, template, and module files.<br><br>It is passed in the head section of the index.html file of your angular application</p>"
            },
            {
                "name": "Angular Router/Routing?",
                "description": "<p><strong>THE ROUTER-OUTLET</strong> works as a placeholder which is used to load the different components based on the activated component or current route state. Navigation can be done using router-outlet directive and the activated component will take place inside the router-outlet to load its content. Here only the part marked by the router outlet will be changed between the views.</p><p><strong>ROUTES AND PATHS</strong>: Routes are definitions (objects) comprised from at least a path and a component (or a redirectTo path) attributes. The path refers to the part of the URL that determines a unique view that should be displayed, and component refers to the Angular component that needs to be associated with a path.<br> Each Route maps a URL path to a component.<br>The path can be empty which denotes the default path of an application and it's usually the start of the application.<br>The path can take a wildcard string (). The router will select this route if the requested URL doesn't match any paths for the defined routes. This can be used for displaying a “Not Found” view or redirecting to a specific view if no match is found.</p><p><strong>ROUTE PARAMS</strong>: Angular Router allows you to access parameters in different ways: #Using the ActivatedRoute service and #Using the ParamMap observable. You can create a route parameter using the colon syntax Ex. <code>{ path:  'contacts/:id', component:  ContactDetailComponent}</code></p><p><strong>ROUTE GUARDS</strong>: A route guard is a feature of the Angular Router that allows developers to run some logic when a route is requested, and based on that logic, it allows or denies the user access to the route. It's commonly used to check if a user is logged in and has the authorization before he can access a page. <b>You can add a route guard by implementing the CanActivate interface available from the @angular/router package and extends the canActivate() method which holds the logic to allow or deny access to the route.</b> Ex. <code>{ path:  'contacts/:id, canActivate:[MyGuard], component:  ContactDetailComponent}</code></p><p><strong>ROUTER LINKS / NAVIGATION DIRECTIVE</strong>: The RouterLink is a directive on the anchor tags give the router control over those elements. Since the navigation paths are fixed, you can assign string values to router-link directive. Ex. <code>&lt;a routerLink='/contacts'&gt;Contacts&lt;/a&gt;</code></p><p><strong>ACTIVE ROUTER LINKS</strong> - RouterLinkActive is a directive that toggles css classes for active RouterLink bindings based on the current RouterState. i.e, The Router will add CSS classes when this link is active and remove when the link is inactive. Ex. <code>&lt;a routerLink='/contacts routerLinkActive='active' '&gt;Contacts&lt;/a&gt;</code></p><br><img src='./assets/angular/defineroutes.png'><br><br>"
            },
            {
                "name": "What is Router/Routing Guard in Angular? protect a component",
                "description": "<p><strong>ROUTE GUARDS</strong>: A route guard is a feature of the Angular Router that allows developers to run some logic when a route is requested, and based on that logic, it allows or denies the user access to the route. It's commonly used to check if a user is logged in and has the authorization before he can access a page. <b>You can add a route guard by implementing the CanActivate interface available from the @angular/router package and extends the canActivate() method which holds the logic to allow or deny access to the route.</b> Ex. <code>{ path:  'contacts/:id, canActivate:[MyGuard], component:  ContactDetailComponent}</p><br><br><p><strong>To protect a component being activated through the router?</strong></p><ul><li>Create a guard service: <code>ng g guard auth</code></li><li>Create <code>canActivate()</code> or <code>canActivateChild()</code> methods</li><li>Use the guard when defining routes</li></ul><p><img src='./assets/angular/authguard.png' /></p>"
            },
            {
                "name": "Router Guard Types",
                "description": "<p>Guards are processed in the following order:</p><ul><li>canDeactivate</li><li>canLoad</li><li>canActivateChild</li><li>canActivate</li><li>resolve</li></ul><br><p><strong>CanActivate</strong> - decides, if a route can be activated ( or component gets rendered). We use this guard, when we want to check on some condition, before activating the component or showing it to the user. This allows us to cancel the navigation. <br>Use cases for the CanActivate Guard <ul><li>Checking if a user has logged in</li><li>Checking if a user has permission</li></ul></p><br><p><strong>CanDeactivate</strong> - is called, whenever we navigate away from the route before the current component gets deactivated. The best use case for <code>CanDectivate</code> guard is the data entry component. The user may have filled the data entry and tries to leave that component without saving his work. The <code>CanDeactivate</code> guard gives us a chance to warn the user that he has not saved his work and give him a chance to cancel the navigation.</p><br><p><strong>Resolve</strong> - This guard delays the activation of the route until some tasks or processes are complete. You can use this guard to pre-fetch the data from the backend API, before activating the route. The best use case for <code>Resolve</code> guard is the whenever a component is called and that component needs to show a HTTP response, then due to the request and response time delay the component looks blank, so to avoid this blank screen user can use the resolve service to load the data first and then show it directly on the component instead of blank page or a loader.</p><br><p><strong>CanLoad</strong> - Guard prevents the loading of the Lazy Loaded Module. We generally use this guard when we do not want to unauthorized user to navigate to any of the routes of the module and also stop them even to see the source code of the module. <br>The Angular provides <strong>canActivate</strong> Guard, which prevents unauthorized user from accessing the route. But there is a drawback associated with this guard that it does not stop the module from being downloaded. The user can still use the chrome developer console to see the source code. The <strong>CanLoad</strong> Guard prevents the module from being downloaded.</p><br><p><strong>CanActivateChild</strong> - guard runs before we navigate to a child route. The <code>CanActivatechild</code> guard is very similar to <code>CanActivateGuard</code>. We apply this guard to the parent route. The Angular invokes this guard whenever the user tris to navigate to any of its child route. This allows us check some condition and decide whether to proceed with the navigation or cancel it.</p>"
            },
            {
                "name": "What is canResolve router guard?",
                "description": "<p><strong>Building a Resolver</strong> - First, we need to create a Angular Service, which implements the <code>Resolve</code> Interface <br>The service must implement the <code>resolve</code> method. A resolve method must return either a <code>Observable<any></code>, <code>Promise<any></code> or just data.</p><p>Inside the <code>Resolve</code> method, we will get the access to the <code>ActivatedRouteSnapshot</code> & <code>RouterStateSnapshot</code>, which can be used to get the values of router parameter, query parameters etc. <br><img src='./assets/expertAngular/resolveSerice.png'></p><br><p>Once the resolver is created, we need to update the route definition and add resolve property <br><img src='./assets/expertAngular/resolveRoute.png'><br>Here, <code>products</code> is the key and <code>ProductListResolveService</code> is the resolver. The return value of the <code>ProductListResolveService</code> is assigned to the key i.e <code>products</code> and made available to the component via <strong>route data</strong></p><p>When the user navigates to the route <code>product</code>, the angular looks for the <code>resolve</code> property of the route. <strong>For each key value pair of resolvers</strong>, the angular calls the <code>resolve</code> method. If the return value of the resolver is a <code>observable</code> or a <code>promise</code>, the router will wait for that to complete. The returned value is assigned to the key <code>products</code> and added to the route data collection.</p><p>The component can just read the <strong>products</strong> from the route data from the <code>ActivatedRoute</code> within the component init cycle.<br><img src='./assets/expertAngular/resolveSnapshot.png'></p>"
            },
            {
                "name": "What is the difference between canLoad and canActivate?",
                "description": "<p>Actually,CanLoad protects a module to be loaded but once module is loaded then CanLoad guard will do nothing. Suppose we have protected a module loading using CanLoad guard for unauthenticated user. When user is logged-in then that module will be applicable to be loaded and we will be able to navigate children paths configured by that module. But when user is logged-out, still user will be able to navigate those children paths because module is already loaded. In this case if we want to protect children paths from unauthorized users, we also need to use CanActivate guard."
            },
            {
                "name": "What is the Router-Outlet and how to use it?",
                "description": "<p>Router-outlet in Angular works as a placeholder which is used to load the different components based on the activated component or current route state. Navigation can be done using router-outlet directive and the activated component will take place inside the router-outlet to load its content. Here only the part marked by the router outlet will be changed between the views.<br><br><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code></p>"
            },
            {
                "name": "Activated route?",
                "description": "<p><strong>ActivatedRoute</strong> Contains the information about a route associated with a component loaded in an outlet. It can also be used to pass data from one component to another component using  router state tree, such as Id, flag, state etc</p><p>The ActivatedRoute will be injected as a router service to access the information</p><p><img src='./assets/angular/activatedroute.png' /></p><p><code>let pathId = this.activatedRoute.snapshot.params['id'];</code></p><p>Below are the properties of the activated route</p><ol><li>params: Observable</li><li>paramMap: Observable</li><li>queryParams: Observable</li><li>queryParamMap: Observable</li><li>fragment: Observable</li><li>snapshot: ActivatedRouteSnapshot</li><li>data: Observable</li><li>url: Observable</li><li>outlet: string</li><li>title: Observable</li><li>component: Type | null</li><li>root: ActivatedRoute</li><li>parent: ActivatedRoute | null</li><li>firstChild: ActivatedRoute | null</li><li>children: ActivatedRoute[]</li><li>pathFromRoot: ActivatedRoute[]</li></ol>"
            },
            {
                "name": "What is router state?",
                "description": "<p>The <strong>RouterState</strong> is an interface which represents the state of the router as a tree of activated routes.</p><p>You can access the current RouterState from anywhere in the Angular app using the <code>Router service</code> and the <code>routerState</code> property.</p><p><code>let pathId = this.activatedRoute.snapshot.params['id'];</code></p>"
            },
            {
                "name": "What does pathMatch signifies?",
                "description": "<p>The pathMatch strategy, consist of 'prefix' or 'full' value. Where in, Default is 'prefix'.</p><p>By default, the router checks URL elements from the left to see if the URL matches a given path, and stops when there is a match. For example, '/team/11/user' matches 'team/:id'.</p><p>The path-match strategy 'full' matches against the entire URL. It is important to do this when redirecting empty-path routes. Otherwise, because an empty path is a prefix of any URL, the router would apply the redirect even when navigating to the redirect destination, creating an endless loop.</p>"
            },
            {
                "name": "What are auxiliary routes?",
                "description": "<p>Angular supports the concept of auxiliary routes, which allow you to set up and navigate multiple independent routes in a single app. Auxiliary routes allow the user to access or toggle portions of the page, such as a side-bar or dialog, using the URL.</p><p>Each component has one primary route and zero or more auxiliary outlets. Auxiliary outlets must have unique name within a component.</p><p>To define the auxiliary route we must first add a named router outlet where contents for the auxiliary route are to be rendered. <br><img src='./assets/expertAngular/auxroute.png'></p>"
            },
            {
                "name": "What is the location strategy?",
                "description": "<p>The Location Strategy defines how our URL/Request is resolved. It also determines how your URL will look like</p><p>Angular implements both Hashstyle (i.e - uses the anchor tags technique) & HTML5 Routing. HashLocationstrategy implements the Hashstyle routing & Pathlocationstrategy implements the HTML5 style routing</p><br><p><strong>PathLocationStrategy</strong> - The <code>PathLocationStrategy</code> is the default strategy in the Angular application. <br>To Configure the strategy, we need to add <code>&lt;base href&gt;</code> in the <code>&lt;head&gt;</code> section of the root page (index.html) of our application. <br>The Browser uses this element to construct the relative URLs for static resources (images, CSS, scripts) contained in the document.</p><p><strong>Pros:</strong></p><ul><li>Produces a clear URL like http://example.com/foo</li><li>Supports Server-Side Rendering</li></ul><p>Cons:</p><ul><li>Older browser does not support</li><li>Server Support needed for this to work</li></ul><br><p><strong>HashLocationStrategy</strong> - You can use the HashLocationStrategy by providing the useHash: true in an object as the second argument of the RouterModule.forRoot in the AppModule.</p><p><strong>Pros:</strong></p><ul><li>Supported by all browsers</li></ul><p><strong>Cons:</strong></p><ul><li>Produces a URL like http://example.com/#foo</li><li>Will not Support Server-Side Rendering</li></ul><br><img src='./assets/expertAngular/routerHash.png'><br><p><strong>Which Location Strategy to Use</strong></p><p>We recommend you use the HTML 5 style (<code>PathLocationStrategy</code> ) as your location strategy. Because</p><ul><li>It produces clean and SEO Friendly URLs that are easier for users to understand and remember.</li><li>You can take advantage of the server-side rendering, which will make our application load faster, by rendering the pages in the server first before delivering them the client</li></ul>"
            },
            {
                "name": "What is a router event? name the any of ?",
                "description": "<p>The Angular Router raises events when it navigates from one route to another route. It raises several events such as <code>NavigationStart</code>, <code>NavigationEnd</code>, <code>NavigationCancel</code>, <code>NavigationError</code>, <code>ResolveStart</code>, etc. You can listen to these events and find out when the state of the route changes. Some of the useful events are route change start ( <code>NavigationStart</code> ) and route change end ( <code>NavigationEnd</code>). In this tutorial, we learn what is router events are and how to listen to them using Example code.</p><table><thead><tr><th>Router Event</th><th>The Event triggered when</th></tr></thead><tbody><tr><td>NavigationStart</td><td>the Angular router stats the navigation.</td></tr><tr><td>RouteConfigLoadStart</td><td>the Router lazy loads a route configuration.</td></tr><tr><td>RouteConfigLoadEnd</td><td>after a route has been lazy-loaded.</td></tr><tr><td>RoutesRecognized</td><td>the Router parses the URL and the routes are recognized.</td></tr><tr><td>GuardsCheckStart</td><td>the Router begins the Guards phase of routing.</td></tr><tr><td>ChildActivationStart</td><td>the Router begins activating a route's children.</td></tr><tr><td>ActivationStart</td><td>the Router begins activating a route.</td></tr><tr><td>GuardsCheckEnd</td><td>the Router finishes the Guards phase of routing successfully.</td></tr><tr><td>ResolveStart</td><td>the Router begins the Resolve phase of routing.</td></tr><tr><td>ResolveEnd</td><td>the Router finishes the Resolve phase of routing successfully.</td></tr><tr><td>ChildActivationEnd</td><td>the Router finishes activating a route's children.</td></tr><tr><td>ActivationEnd</td><td>the Router finishes activating a route.</td></tr><tr><td>NavigationEnd</td><td>navigation ends successfully.</td></tr><tr><td>NavigationCancel</td><td>navigation is canceled. This is due to a Route Guard returning false during navigation.</td></tr><tr><td>NavigationError</td><td>navigation fails due to an unexpected error.</td></tr><tr><td>Scroll</td><td>An event that represents a scrolling event.</td></tr></tbody></table><br><img src='./assets/expertAngular/routerEvent.png'>"
            },
            {
                "name": "What is wildcard route in angular?",
                "description": "<p>A wildcard route has a path consisting of two asterisks. It matches every URL and hence it is always recommended to be places as the last routing path in the routing configuration. The router will select this route if it can't match a route earlier in the configuration. We use the wildcard path to catch any non existing routes and we use the redirectTo property to redirect url to the /404 path which maps to the not found component.<br><img src='./assets/expertAngular/wildRoute.png'></p>"
            },
            {
                "name": "Do I need a Router/Routing Module always?",
                "description": "<p>No, the <strong>Routing Module</strong> is a design choice. You can skip routing Module (for example, AppRoutingModule) when the configuration is simple and merge the routing configuration directly into the companion module (for example, AppModule). But it is recommended when the configuration is complex and includes specialized guard and resolver services.</p>"
            },
            {
                "name": "How to detect a router change in Angular?",
                "description": "<p>In Angular you can <code>subscribe</code> (Rx event) to a Router instance. So you can do things like: <code>this.router.events.subscribe((event: Event) => {})</code></p><p><img src='./assets/angular/routedetect.png' /></p><p><strong>Method 2 which is latest syntax</strong><br>constructor(private router: Router) {<br><br>this.router.events.subscribe((event: Event) => {<br> if (event instanceof NavigationStart) {<br> // Show loading indicator and perform an action<br> }<br><br> if (event instanceof NavigationEnd) {<br> // Hide loading indicator and perform an action<br> }<br><br> if (event instanceof NavigationError) {<br> // Hide loading indicator and perform an action<br> console.log(event.error); // It logs an error for debugging<br> }<br> });<br> }</p>"
            },
            {
                "name": "Name the navigation event trigger when loading lazy load routes?",
                "description": "<p><strong>RouteConfigLoadStart</strong> - An event triggered before the Router lazy loads a route configuration.</p><p><strong>RouteConfigLoadEnd</strong> - An event triggered after a route has been lazy loaded.</p><p>Let's say you have the following lazy route:<br><img src='./assets/expertAngular/lazyLoad.png'></p><p>And here's how you can hook to loading process of this module:<br><img src='./assets/expertAngular/lazyLoad1.png'></p>"
            },
            {
                "name": "What is SSR / Server Side Rendering / Angular Universal",
                "description": "<p>Angular Universal is the process of server-side rendering (SSR) your application to HTML on the Server (ie: Node.js). Technically the package is now found under <code>@angular/platform-server</code>.</p><p>Step 1 - use ng add to install the Universal schematics to our application.<br><img src='./assets/expertAngular/ssr.png'><br><strong>Example</strong><br><img src='./assets/expertAngular/ssr1.png'></p><p>Step 2 - Run the SSR project </p><p><img src='./assets/expertAngular/ssr2.png'><br>This will compile your application and <em>spin up a Node Express server </em>to serve your Universal application on <code><strong>http://localhost:4000</strong></code></p><p><img src='./assets/expertAngular/ssr3.png'><br>This script compiles your application and <em>pre-renders your applications files</em>, spinning up a demo http-server so you can view it on <code><strong>http://localhost:8080</strong></code></p>"
            },
            {
                "name": "Just-in-Time (JiT) vs Ahead-of-Time (AoT) compilation. Explain the difference.",
                "description": "<p><strong> JiT (Just in Time) Compilation</strong><br> #The name itself describes the working, It compiles the code just in the time of loading the page in browser. The browser will download the compiler and build the application code and renders it.<br> #It will be good for development environment.<br> #JIT compilation is the default when you run the <code>ng build</code> (build only) or <code>ng serve</code> (build and serve locally) CLI commands.</p><p><strong> AoT (Ahead of Time) Compilation</strong><br> #It compiles all the code at the time of building the application. Here, the browser doesn't want to download the compiler and compile the code instead it render the application by just loading the already compiled code.<br> #Can be used in the production environment<br> #For AOT compilation, include the --aot flag with the ng build or ng serve command such as <br><code>ng build --aot <br> ng serve --aot</code></p>"
            },
            {
                "name": "Benifits of AoT compilation?",
                "description": "<ul><li><strong>Faster rendering:</strong> The browser downloads a pre-compiled version of the application. So it can render the application immediately without compiling the app.</li><li><strong>Fewer asynchronous requests:</strong> It inlines external HTML templates and CSS style sheets within the application javascript which eliminates separate ajax requests.</li><li><strong>Smaller Angular framework download size:</strong> Doesn't require downloading the Angular compiler. Hence it dramatically reduces the application payload.</li><li><strong>Better security:</strong> It compiles HTML templates and components into JavaScript. So there won't be any injection attacks.</li><li>Helps in finding the template errors during the build process itself.</li></ul>"
            },
            {
                "name": "What are the 3 phases of AOT in compilation process?",
                "description": "<p><strong>The 3 phases of AOT are:</strong></p><ul><li>code analysis - In this phase, the AOT collector analyses the metadata and then represents it in the best possible manner. All analysed information is recorded in the&nbsp;<strong><em>.metadata.json</em></strong>&nbsp;file. Any error found in the metadata syntax is recorded and an error is thrown to the ‘<strong><em>.metadata.json’</em></strong>&nbsp;file.</li><li>code generation - In this phase, the metadata collected from the Code Analysis phase will be interpreted by the compiler’s&nbsp;<em>StaticReflector</em>. During this phase, a check for metadata is done once again. If any violations in metadata syntax are found, then an error is thrown.</li><li>template type checking - In this phase, the Angular template compiler uses a typescript compiler to check the validation of binding expressions in templates. For this phase to happen,&nbsp;<em>“fullTemplateTypeCheck”</em>&nbsp;is set to&nbsp;<em>true</em>&nbsp;in&nbsp;<em>“angularCompilerOptions”</em>&nbsp;in the&nbsp;<strong><em>tsconfig.base.json</em></strong></li></ul>"
            },
            {
                "name": "What is the purpose of metadata json files?",
                "description": "<p>The metadata.json file can be treated as a diagram of the overall structure of a decorator's metadata, represented as an abstract syntax tree(AST). During the analysis phase, the AOT collector scan the metadata recorded in the Angular decorators and outputs metadata information in .metadata.json files, one per .d.ts file.</p>"
            },
            {
                "name": "Give an example of few metadata errors?",
                "description": "<p>#1. Expression form not supported <br>#2. Reference to a local (non-exported) symbol: <br>#3. Function calls are not supported <br>#4. Destructured variable or constant not supported</p>"
            },
            {
                "name": "What is metadata rewriting?",
                "description": "<p>Metadata rewriting is the process in which the compiler converts the expression initializing the fields such as useClass, useValue, useFactory, and data into an exported variable, which replaces the expression. Remember that the compiler does this rewriting during the emit of the .js file but not in definition files( .d.ts file).</p>"
            },
            {
                "name": "How angular compile typescript to javascript?",
                "description": "<p>TypeScript is a primary language for Angular application development. It is a superset of JavaScript with design-time support for type safety and tooling.<br>Browsers can't execute TypeScript directly. Typescript must be 'transpiled' into JavaScript using the tsc compiler, which requires some configuration.<br>This page covers some aspects of TypeScript configuration and the TypeScript environment that are important to Angular developers, including details about the following files:</p><ul><li><strong>tsconfig.json</strong>—TypeScript compiler configuration.</li><li><strong>typings</strong>—TypesScript declaration files.</li></ul>"
            },
            {
                "name": "Angular template compiler options",
                "description": "<p>When a developer use's ahead-of-time compilation (AOT), he/she have control over how the application is compiled by specifying template compiler options in the TypeScript configuration file. <br>The template options object, <code><strong>angularCompilerOptions</strong></code>, is a sibling to the <code><strong>compilerOptions</strong></code> object that supplies standard options to the TypeScript compiler.</p><p><img src='./assets/expertAngular/compilerOptions.png'></p>"
            },
            {
                "name": "What is non null type assertion operator?",
                "description": "<p>The Angular non-null assertion operator causes the TypeScript type checker to suspend strict <code>null</code> and <code>undefined</code> checks for a specific property expression.<br> Ex. {{item.color!.toUpperCase()}}</p><p>It’s important to note that at the time of writing, non-null assertions are still a feature of TypeScript, and optional chaining has limited browser support.<br><img src='./assets/expertAngular/nonnull.png'></p>"
            },
            {
                "name": "How do you describe various dependencies in angular application?",
                "description": "<p>The dependencies section of package.json with in an angular application can be divided as follow,</p><ol><li><strong>Angular packages:</strong> Angular core and optional modules; their package names begin @angular/.</li><li><strong>Support packages:</strong> Third-party libraries that must be present for Angular apps to run.</li><li><strong>Polyfill packages:</strong> Polyfills plug gaps in a browser's JavaScript implementation.</li></ol>"
            },
            {
                "name": "What is NgZone?",
                "description": "<p>Angular provides a service called NgZone which creates a zone named angular to automatically trigger change detection when the following conditions are satisfied. say When a sync or async function is executed.</p><p>The most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don't require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via runOutsideAngular and if needed, these tasks can reenter the Angular zone via run.</p>"
            },
            {
                "name": "What are the lifecycle hooks of a zone?",
                "description": "<p>There are four lifecycle hooks for asynchronous operations from zone.js.</p><ol><li><strong>onScheduleTask:</strong> This hook triggers when a new asynchronous task is scheduled. For example, when you call setTimeout()<br><img src='./assets/angular/zonecycle1.png'></li><li><strong>onInvokeTask:</strong> This hook triggers when an asynchronous task is about to execute. For example, when the callback of setTimeout() is about to execute.<br><img src='./assets/angular/zonecycle.png'></li><li><strong>onHasTask:</strong> This hook triggers when the status of one kind of task inside a zone changes from stable(no tasks in the zone) to unstable(a new task is scheduled in the zone) or from unstable to stable.<br><img src='./assets/angular/zonecycle2.png'></li><li><strong>onInvoke:</strong> This hook triggers when a synchronous function is going to execute in the zone.<br><img src='./assets/angular/zonecycle3.png'></li></ol>"
            },
            {
                "name": "Could you provide some particular examples of using ngZone?",
                "description": "<p>There would be a lot of cases when you want to use <code>NgZone</code>, I can name two :<br>1. When you want something to run outside of Angular's change detection. Lets say we want to do some calculation when user is scrolling and don't want you to run change detection, in this case, you'd use NgZone:</p><p><img src='./assets/angular/ngzone.png' /></p><p>2. The exact opposite of above, where you have a function that is somehow outside of Angular's zone and you want it to be inside, like when a third party library is doing some stuff for you and you want it to be bound to your Angular cycle.</p><p><img src='./assets/angular/ngzone1.png' /></p>"
            },
            {
                "name": "What are the methods of NgZone used to control change detection?",
                "description": "<p>NgZone service provides a <code>run()</code> method that allows you to execute a function inside the angular zone. This function is used to execute third party APIs which are not handled by Zone and trigger change detection automatically at the correct time.<br><img src='./assets/angular/ngzone2.png'></p><p>Whereas <code>runOutsideAngular()</code> method is used when you don't want to trigger change detection.<br><img src='./assets/angular/ngzone3.png'></p>"
            },
            {
                "name": "What is codelyzer?",
                "description": "<p>Codelyzer provides set of tslint rules for static code analysis of Angular TypeScript projects. ou can run the static code analyzer over web apps, NativeScript, Ionic etc. Angular CLI has support for this concept <br><code>ng new codelyzer <br>ng lint</code></p>"
            },
            {
                "name": "How we can audit an angular app? (codelyzer)",
                "description": "<p>We can add codelyzer's accessibility checks to the build process for an Angular app.</p><p>By Default, all the accessibility rules are experimental and disabled. One can enable them by adding them to the TSLint configuration file (tslint.json):<br><img src='./assets/expertAngular/tslintrules.png'></p><p>Now, With codelyzer's accessibility checks set up, you get a popup showing accessibility errors in TypeScript files or inline templates as you code:</p><p>To perform linting over the entire project (including external templates), use the <strong>ng lint</strong> command:</p>"
            },
            {
                "name": "What is Linting and name some linting tools",
                "description": "<p>Linting, lint or linter is a tool that analyzes source code to raise any programming errors, bugs, stylistic errors, and suspicious constructs.Below are the linting tools</p><ul><li><strong>ESLint</strong> is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called <strong>eslint-plugin-react</strong> and <strong>eslint-plugin-jsx-a11y</strong></li><li><strong>JSLint</strong></li><li><strong>JSHint</strong></li><li><strong>JSCS JavaScript Linter</strong></li><li><strong>Standard JS</strong> - Standard is a popular JavaScript code style guide built on top of ESLint. The tool can be used as a JavaScript style guide, linter, and formatter. It automatically formats code and catches style and programmer errors during the early development period. Developers can use Standard the VSCode extension to integrate JavaScript Standard Style into their VSCode editor</li></ul>"
            },
            {
                "name": "How to support accessibility ?",
                "description": "<ol><li>Learn the tools for testing accessibility like codealyzer and eslint.</li><li>Define unique page titles by using Angular Title service.</li><li>Ensure you meet the Web Content Accessibility Guidelines (WCAG 2.0) color contrast ratio guidelines.</li><li>Use Semantic HTML instead of div</li><li>Provide control labels with ARIA</li></ol>"
            },
            {
                "name": "What will happens if you use script tag inside template?",
                "description": "<p>Angular recognizes the value as unsafe and automatically sanitizes it, which removes the <code>&lt;script&gt;</code> tag but keeps safe content such as the text content of the <code>&lt;script&gt;</code> tag. This way it eliminates the risk of script injection attacks. If you still use it then it will be ignored and a warning appears in the browser console. Let's take an example of innerHtml property binding which causes XSS vulnerability,<br><br><img src='./assets/angular/scripttagintemplate.png'></p>"
            },
            {
                "name": "How to inject the dynamic script in angular?",
                "description": "<p>Using DomSanitizer we can inject the dynamic Html,Style,Script,Url.<br><img src='./assets/angular/sanitize.png'></p>"
            },
            {
                "name": "What is a service worker?",
                "description": "<p>In Angular <strong>ngsw-config.json file contain service worker configuration</strong><br><br>A service worker is a script that runs in the web browser and manages caching for an application. Starting from 5.0.0 version, Angular ships with a service worker implementation. Angular service worker is designed to optimize the end user experience of using an application over a slow or unreliable network connection, while also minimizing the risks of serving outdated content.</p><p><strong>Benefits / design goals of Angular's service workers</strong></p><ol><li>It caches an application just like installing a native application</li><li>A running application continues to run with the same version of all files without any incompatible files</li><li>When you refresh the application, it loads the latest fully cached version</li><li>When changes are published then it immediately updates in the background</li><li>Service workers saves the bandwidth by downloading the resources only when they changed.</li></ol>"
            },
            {
                "name": "Differences between AngularJS and Angular with respect to dependency injection?",
                "description": "<p>Dependency injection is a common component in both AngularJS and Angular, but there are some key differences between the two frameworks in how it actually works.</p><table><thead><tr><th>AngularJS</th><th>Angular</th></tr></thead><tbody><tr><td>Dependency injection tokens are always strings</td><td>Tokens can have different types. They are often classes and sometimes can be strings.</td></tr><tr><td>There is exactly one injector even though it is a multi-module applications</td><td>There is a tree hierarchy of injectors, with a root injector and an additional injector for each component.</td></tr></tbody></table>"
            },
            {
                "name": "What is a View Engine ?",
                "description": "<p>View Engine is responsible for compiling the components so that they can be consumed by the browser. In Angular, we write our components using TypeScript and it cannot be run directly in browsers and for this purpose we require View Engines which would convert TS into JS and HTML.</p><p><strong>Responsibilities of View Engine</strong></p><ol><li>Template Parsing - The template HTML is then converted into JavaScript instructions that are then used by the Angular Interpreter to understand how to display them in the DOM.</li><li>Tree-Shaking - Tree Shaking is a process to remove dead code from the bundle.</li><li>Compilation - Renderer2 offers two variants of code compilation: Ahead Of Time Compilation (AOT) and Just In Time Compilation (JIT)</li></ol>"
            },
            {
                "name": "What is Angular Ivy?",
                "description": "<p>Ivy is the code name for Angular’s compilation and rendering pipeline. Applications developed in Angular 9 are Ivy compiled by default. These applications are compiled&nbsp;<strong>Ahead of Time (AOT)</strong>&nbsp;i.e. before the browser downloads and runs it, which makes the application faster and more efficient.</p><p><strong>Features included in ivy preview</strong></p><ol><li>Generated code that is easier to read and debug at runtime</li><li>Faster re-build time</li><li>Improved payload size</li><li>Improved template type checking</li></ol><ul><li>You can enable ivy in a new project by using the --enable-ivy flag with the ng new command. Ex. - <code>ng new ivy-demo-app --enable-ivy</code></li><li>You can add it to an existing project by adding <code>enableIvy</code> option in the <code>angularCompilerOptions</code> in your project's <code>tsconfig.app.json</code>.<br><img src='./assets/angular/ivy.png'></li></ul><br><br><p>Before Ivy,&nbsp;<em>View Engine&nbsp;</em>was the default compiler in Angular. Ivy uses the <em>Ahead Of Time </em>compilation technique instead of Just In Time (JIT) which was used in the previous Angular versions.</p>"
            },
            {
                "name": "What is ngcc in Angular Ivy",
                "description": "<p>The <code>ngcc</code> (Angular Compatibility Compiler) is a tool used to compile Angular libraries to a format that is compatible with Ivy. which were however in the past not compatible with the Angular Ivy runtime,</p>"
            },
            {
                "name": "What is Angular Language Service?",
                "description": "<p>The Angular Language Service is a way to get completions, errors, hints, and navigation inside your Angular templates whether they are external in an HTML file or embedded in annotations/decorators in a string. It has the ability to autodetect that you are opening an Angular file, reads your <code>tsconfig.json</code> file, finds all the templates you have in your application, and then provides all the language services.</p><br><br><p><strong> install angular language service in the project</strong><br>Use <strong>npm</strong> command, - <code>npm install --save-dev @angular/language-service</code><br><br>After that add the following to the \"compilerOptions\" section of your project's tsconfig.json <br><code>\"plugins\": [ <br>{\"name\": \"@angular/language-service\"} <br>]</code></p><br><br><p><strong>there are 3 main features provided by Angular Language Service</strong></p><ul><li><strong>Autocompletion:</strong> Autocompletion can speed up your development time by providing you with contextual possibilities and hints as you type with in an interpolation and elements.</li><li><strong>Error checking:</strong> It can also warn you of mistakes in your code.</li><li><strong>Navigation:</strong> Navigation allows you to hover a component, directive, module and then click and press F12 to go directly to its definition.</li></ul>"
            },
            {
                "name": "What is web worker?",
                "description": "<p>Web workers are used for running any script in the background threads, without interfering with the user’s interface. So if you have heavy computations on your user side, you can use web workers to do the heavy tasks while allowing the browser to give your users a smooth and better experience.<br><br>For example, If the file that contains your expensive computation is <code>src/app/app.component.ts</code>, you can add a <code>Web Worker</code> using <code>ng generate web-worker</code> app command which will create <code>src/app/app.worker.ts</code> web worker file. </p>"
            },
            {
                "name": "What is Bazel tool?",
                "description": "<p><b>Bazel</b> is an advanced build and test tool. It supports lot of features suitable for large projects.<br><br>Some of the features of <b>Bazel</b> are as follows:</p><ul><li>Support multiple languages.</li><li>Support multiple platforms.</li><li>Support multiple repository.</li><li>Support high-level build language.</li><li>Fast and reliable.</li></ul><p>Angular supports building the application using bazel. <br><strong>First, install @angular/bazel package.</strong><br>npm install -g @angular/bazel <br><br><strong>For existing application, Add @angular/bazel</strong><br>ng add @angular/bazel <br><br><strong>For new application,</strong><br>ng new --collection=@angular/bazel <br><br><strong>To build an application using bazel,</strong><br>ng build --leaveBazelFilesOnDisk <br><strong>leaveBazelFilesOnDisk</strong> option will leave the bazel files created during build process, which we can use to build the application directly using bazel.</p>"
            },
            {
                "name": "What is platform in Angular?",
                "description": "<p>A platform is the context in which an Angular application runs. The most common platform for Angular applications is a web browser, but it can also be an operating system for a mobile device, or a web server. The runtime-platform is provided by the @angular/platform-* packages and these packages allow applications that make use of <code>@angular/core</code> and <code>@angular/common</code> to execute in different environments. i.e, Angular can be used as platform-independent framework in different environments, For example,</p><ol><li>While running in the browser, it uses <code>platform-browser</code> package.</li><li>When SSR(server-side rendering ) is used, it uses <code>platform-server</code> package for providing web server implementation.</li></ol>"
            },
            {
                "name": "What happens if I import the same module twice?",
                "description": "<p>If multiple modules imports the same module then angular evaluates it only once (When it encounters the module first time). It follows this condition even the module appears at any level in a hierarchy of imported NgModules.</p>"
            },
            {
                "name": "How do you select an element with in a component template?",
                "description": "<p>You can use <code>@ViewChild</code> directive to access elements in the view directly. Let's take input element with a reference,<br><code><input #uname></code><br>and define view child directive and access it in ngAfterViewInit lifecycle hook <code>@ViewChild('uname') input;<br><br>ngAfterViewInit() {<br>console.log(this.input.nativeElement.value);<br>}</code></p>"
            },
            {
                "name": "How do you select an element in component template?",
                "description": "<p>You can get a handle to the DOM element via ElementRef by injecting it into your component's constructor:</p><code>constructor(myElement: ElementRef) { <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;el.nativeElement.style.backgroundColor = 'yellow';<br> }</code>"
            },
            {
                "name": "How to configure differential loading?",
                "description": "<p><strong>Differential Loading</strong> is a mechanism of choosing the browser between modern or legacy JavaScript based on its own capabilities. Currently taking advantage of this by default by performing a modern build and a legacy build of the application. When users load the application, they’ll automatically get the bundle they need.</p><p>The CLI can understand browsers which the app needs to support and can make different bundles for both ES5 browsers and not.</p><ul><li>Produce ES5 modules for newer browsers</li><li>Do not downgrade modern level features</li><li>Do not send polyfills for the modern browsers</li></ul><p>That means above flow guarantees the smaller payload and faster execution.</p><br><br><p>How to use it - To enable differential loading, the app must have browserslist configuration. It can be placed in package.json or browserslist file</p><ul><li>Set the target to es2015 in <em>tsconfig.js</em></li><li>Set the minimum supported browsers in <em>browserlist</em></li></ul><p><strong>Angular CLI knows how to handle this</strong>. The CLI judges whether the app has to support ES5 browsers, and check the current tsconfig's target can support them.</p><p>If they are mismatched, all bundles are separated as like&nbsp;app-es5.js and&nbsp;app-es2015.js.</p><p>The browser follows the 3-step process in order to run the application with differential loading capability.</p><p>#1. Load HTML <br>#2. Look at script tags <br>#3. Download the correct version</p><p>This ensures on modern browsers,&nbsp;users will load bundles in a smaller size&nbsp;just that the browser needs. It can improve loading performance.</p>"
            },
            {
                "name": "Dynamic Imports",
                "description": "<p>Yes, Angular 8 supports dynamic imports in router configuration. i.e, You can use the import statement for lazy loading the module using <code>loadChildren</code> method and it will be understood by the IDEs(VSCode and WebStorm), webpack, etc. <br><br>Previously, you have been written as below to lazily load the feature module. By mistake, if you have typo in the module name it still accepts the string and throws an error during build time.<br><code>{path: ‘user’, loadChildren: ‘./users/user.module#UserModulee’},</code><br><br>This problem is resolved by using dynamic imports and IDEs are able to find it during compile time itself. <br><code>{path: ‘user’, loadChildren: () => import(‘./users/user.module’).then(m => m.UserModule)};</code></p>"
            },
            {
                "name": "Lazy loading in angular modules?",
                "description": "<ul><li><strong>Answer #1</strong> - Lazy loading is one of the most useful concepts of Angular Routing. It helps us to download the web pages in chunks instead of downloading everything in a big bundle. It is used for lazy loading by asynchronously loading the feature module for routing whenever required using the property <code>loadChildren</code></li><li><strong>Answer #2</strong> - If the application size is growing and there are many feature modules then loading all feature modules eagerly will make application slow. What we can do, is we can load a feature module on demand when it is required. Such type of module loading concept is called lazy loading.</li></ul><br><p><code>loadChildren: () => import('./items/items.module').then(m => m.ItemsModule)<br> //or <br>loadChildren: () => import('./items/items.module#ItemsModule')</code></p>"
            },
            {
                "name": "Pre Loading in angular?",
                "description": "<ul><li>In preloading, feature modules are loaded in background asynchronously. In preloading, modules start loading just after application starts.</li><li>When we hit the application, first AppModule and modules imported by it, will be loaded eagerly. Just after that modules configured for preloading is loaded asynchronously.</li><li>Preloading is useful to load those features which are in high probability to be visited by user just after loading the application.</li> <li>To configure preloading, angular provides preloadingStrategy property which is used with RouterModule.forRoot in routing module<br><img src='./assets/angular/preload.png'></li><li><strong>Creating a Custom Preload Strategy</strong><br><img src='./assets/angular/preload1.png'></li></ul>"
            },
            {
                "name": "Eager Loading in angular?",
                "description": "<ul><li>In eager loading module, feature modules are loaded before application start on the first hit. To load a feature module eagerly, we need to <code>import</code> that module in application module i.e. <code>AppModule</code> using imports metadata of <code>@NgModule</code> decorator. </li><li>When a module is loaded, it loads all the imported modules, configured components, services, custom pipes etc.</li><li>Modules are loaded in the order they are configured in <code>imports</code> metadata.</li><li>Eager loading is good for small applications because at the first hit of the application all the modules are loaded and all the required dependencies are resolved. Now the subsequent access to the application will be faster.</li></ul>"
            },
            {
                "name": "What is NgUpgrade?",
                "description": "<p>NgUpgrade is a library put together by the Angular team, which you can use in your applications to mix and match AngularJS and Angular components and bridge the AngularJS and Angular dependency injection systems.</p>"
            },
            {
                "name": "How do you upgrade angular version?",
                "description": "<p>ng update @angular/cli @angular/core</p>"
            },
            {
                "name": "How To Use Change Detection Strategy in Angular?",
                "description": "<p>By default, Angular 2+ performs change detection on all components (from top to bottom) every time something changes in your app. <br><br>but as an app gets more complex and the amount of components grows, change detection will have to perform more and more work  which makes app slower.</p><p>One solution is to use the OnPush change detection strategy for specific components. This will instruct Angular to run change detection on these components and their sub-tree only when new references are passed to them versus when data is mutated.</p><p><strong>Exploring a <code> ChangeDetectionStrategy</code></strong> Example - Let's examine a simple parent component with a child component that displays a list of aquatic creatures and allows users to add new creatures to the list: <br><br> After compiling and visiting the application in a browser, we must see an unordered list containing shark, dolphin, and octopus. <br><br>Typing an aquatic creature to the input field and clicking the Add creature button will append the new creature to the list. <br><br>The child component is updated when Angular detects the data has changed in the parent component.<br><img src='./assets/expertAngular/appComponent.png'><br><img src='./assets/expertAngular/appComponentHTML.png'><br><img src='./assets/expertAngular/childComponent.png'><br><img src='./assets/expertAngular/childComponentHTML.png'></p><p>Now, let's set the change detection strategy in the child component to <strong>OnPush</strong>: <br><img src='./assets/expertAngular/OnPush.png'></p><p>To pass a new reference to the data input, you can replace <strong>Array.push</strong> with the <strong>spread syntax (...)</strong> in addAquaticCreature:<br><img src='./assets/expertAngular/appComponent1.png'><br>With this variation, you are no longer mutating the aquaticCreatures array. You are returning a completely new array.</p><p>After recompiling, you should observe that the application behaves as before. Angular detected a new reference to <strong>data</strong>, so it ran its change detection on the child component.</p><p><strong>Exploring <code>ChangeDetectorRef</code> Examples</strong> - When using a change detection strategy of OnPush, other than making sure to pass new references every time something should change, you can also make use of the ChangeDetectorRef for complete control. <br><code><strong>ChangeDetectorRef.detectChanges()</strong></code></p><p>You could for example keep mutating your data, and then have a button in the child component with a <strong>Refresh</strong> button.</p><p>And add a button element that triggers refresh():<br><img src='./assets/expertAngular/childComponentHTML1.png'><br>Then, modify the child component to use ChangeDetectorRef:<br><img src='./assets/expertAngular/childComponent1.png'></p><p><strong>Exploring <code>ChangeDetectorRef with markForCheck()</code> Examples</strong>: Let's say your data input is actually an observable. This example will use the RxJS <code>BehaviorSubject</code>:<br><img src='./assets/expertAngular/appComponent2.png'><br>And you subscribe to it in the OnInit hook in the child component. You will add the aquatic creatures to a aquaticCreatures array here:<br><img src='./assets/expertAngular/childComponent2.png'><br><code><strong>markForCheck</strong></code> instructs Angular that this particular input should trigger change detection when mutated.<br><img src='./assets/expertAngular/childComponent3.png'></p>"
            },
            {
                "name": "What are the differences of various versions of Angular?",
                "description": "<ol><li><strong>Angular 1:</strong><ul><li>Angular 1 (AngularJS) is the first angular framework released in the year 2010.</li><li>AngularJS is not built for mobile devices.</li><li>It is based on controllers with MVC architecture.</li></ul></li><li><strong>Angular 2:</strong><ul><li>Angular 2 was released in the year 2016. Angular 2 is a complete rewrite of Angular1 version.</li><li>The performance issues that Angular 1 version had has been addressed in Angular 2 version.</li><li>Angular 2 is built from scratch for mobile devices unlike Angular 1 version.</li><li>Angular 2 is components based.</li></ul></li><li><strong>Angular 3:</strong><ul><li>The following are the different package versions in Angular 2:<ul><li>@angular/core v2.3.0</li><li>@angular/compiler v2.3.0</li><li>@angular/http v2.3.0</li><li>@angular/router v3.3.0</li></ul></li><li>The router package is already versioned 3 so to avoid confusion switched to Angular 4 version and skipped 3 version.</li></ul></li><li><strong>Angular 4:</strong><ul><li>The compiler generated code file size in AOT mode is very much reduced.</li><li>With Angular 4 the production bundles size is reduced by hundreds of KB’s.</li><li>Animation features are removed from angular/core and formed as a separate package.</li><li>Supports Typescript 2.1 and 2.2.</li><li>Angular Universal</li><li>New HttpClient</li></ul></li><li><strong>Angular 5:</strong><ul><li>Angular 5 makes angular faster. It improved the loading time and execution time.</li><li>Shipped with new build optimizer.</li><li>Supports Typescript 2.5.</li><li>Service Worker</li></ul></li><li><strong>Angular 6:</strong><ul><li>It is released in May 2018.</li><li>Includes Angular Command Line Interface (CLI), Component Development KIT (CDK), Angular Material Package, Angular Elements.</li><li>Service Worker bug fixes.</li><li>i18n</li><li>Experimental mode for Ivy.</li><li>RxJS 6.0</li><li>Tree Shaking</li></ul></li><li><strong>Angular 7:</strong><ul><li><p>Angular Elements - now supports content projection using <strong>web standards for custom elements</strong>.</p></li><li><p>Angular 7.0 applications will use the Bundle Budget feature of Angular CLI. This will warn developers if the application bundle size exceeds the predefined limit. </p></li><li><p>The Component Dev Kit (CDK) of Angular Material also receives some new features </p></li><li>Virtual Scrolling</li><li>Drag and Drop</li></ul></li><li><strong>Angular 8:</strong><ul><li><strong>Differential loading</strong> - with differential loading, two bundles are created when building for production: a bundle for modern browsers that support ES2015+ and a bundle for older browsers that only support the ES5 version of JavaScript</li><li><strong>TypeScript 3.4</strong> support</li><li><strong>Ivy</strong> - it is the new compiler/runtime of Angular. It will enable very cool features in the future, but it is currently focused on not breaking existing applications.</li><li><strong>Bazel</strong> support - it is a build tool developed and massively used by Google, as it can build pretty much any language.</li><li><p><strong>Lazy-loading with import()</strong> syntax</p></li></ul></li><li><strong>Angular 9:</strong><ul><li>JavaScript Bundles and Performance - A production build with Angular 8.2.7 resulted in a main.js of 246KB for ES2015 browsers. A build with Angular 9.0.0-next.5 yielded a slightly small main.js file at 214KB. That's a 13 percent improvement from Angular 8.</li><li>Ivy Compiler - Ivy yields much smaller JavaScript bundles, so Ivy solves Angular's bundle weaknesses.</li><li>Selector-less Bindings - Angular ViewEngine already supports this pattern. Still, it was missing in Ivy's initial release</li><li>Internationalization - You can use the Angular CLI to generate most of the standard code necessary to create files for translators. After you have configured your app to use i18n, you can run the xi18n command to extract the localizable text into a file.</li></ul></li></ol>"
            },
            {
                "name": "What are the security principles in angular?",
                "description": "<p>Below are the list of security principles in angular,</p><ol><li>You should avoid direct use of the DOM APIs.</li><li>You should enable Content Security Policy (CSP) and configure your web server to return appropriate CSP HTTP headers.</li><li>You should Use the offline template compiler.</li><li>You should Use Server Side XSS protection.</li><li>You should Use DOM Sanitizer.</li><li>You should Preventing CSRF or XSRF attacks.</li></ol>"
            },
            {
                "name": "How to prevent cross site scripting / XSS attack?",
                "description": "<p>One way is we can use the <code>DomSanitzer</code> class in <code>@angular/platform-browser</code>, to mark values as safe. The DomSanitizer class has built-in sanitization methods for contexts such as HTMl, Style, URl, and Resource Url</p><p>To mark the value as trusted and safe to use, you can inject <code>DomSanitizer</code> and use one of the following methods appropriate for the security context to return a value marked as safe.</p><ol><li><code>bypassSecurityHTML</code></li><li><code>bypassSecurityScript</code></li><li><code>bypassSecurityTrustStyle</code></li><li><code>bypassSecurityTrustUrl</code></li><li><code>bypassSecurityTrustResourceUrl</code></li></ol><br><br><p>Another way is Use ahead-of-time (AOT) compilation for extra security</p><p>Angular’s AOT compilation has extra security measures for injection attacks like XSS. AOT compilation is highly recommended for production code and has been the default compilation method since Angular v9. Not only is it more secure, but it also improves performance.</p>"
            },
            {
                "name": "What is CSP Content security policy?",
                "description": "<p>Angular CSP is a security feature that makes your site less vulnerable to attacks like XSS. You can use this feature to specify whether your site should allow in-line JavaScript or not. In addition, you can specify policies for other content like AJAX, CSS, and iframe.</p><p>Content Security Policy is sent to the browser using a Content-Security-Policy HTTP header. <br><strong><code>Content-Security-Policy: default-src 'self'; img-src https://*; child-src 'none';</code></strong></p><p>There are multiple ways to enable CSP on your website. One is on a global level using server configuration. The process for enabling CSP at the server level varies, depending on the type of service or operating system hosting your website. #2. Another method is by using a server-side rendering tool like Angular Universal. #3. The third method is by using a meta tag with http-equiv set to Content-Security-Policy. You can add the meta tag to your Angular project's index.html. <br><code><meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; img-src https://*;\"></code></p>"
            },
            {
                "name": "What is CORS?",
                "description": "<p>Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin. ... The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers</p><ul><li>Step 1 = create src/proxy.conf.json file and add the following content:<br><img src='./assets/angular/cors.png'></li><li>Step 2 = Add a proxyConfig key to angular.json<br><img src='./assets/angular/cors1.png'></li></ul>"
            },
            {
                "name": "What is Sanitization?",
                "description": "<p>Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, class binding, or interpolation, Angular sanitizes and escapes untrusted values. Sanitization modifies the input, turning it into a value that is safe to insert into the DOM.</p><p><img src='./assets/angular/sanitization.png'></p>"
            },
            {
                "name": "What is innerHtml?",
                "description": "<p>The innerHtml is a property of HTML-Elements, which allows you to set it's html-content programmatically</p>"
            },
            {
                "name": "How does Angular simplifies Internationalization or i18n?",
                "description": "<p>Angular simplifies the below areas of internationalization,</p><ol><li>Displaying dates, number, percentages, and currencies in a local format.</li><li>Preparing text in component templates for translation.</li><li>Handling plural forms of words.</li><li>Handling alternative text.</li></ol>"
            },
            {
                "name": "In which file we put i18n / localize configuration ?",
                "description": "<p><img src='./assets/expertAngular/localize.png'></p>"
            },
            {
                "name": "How do you manually register locale data in i18n?",
                "description": "<p>For this you must import locale data for that new locale, After that you can register using <code>registerLocaleData</code><br><br><strong>Syntax:</strong>registerLocaleData(data: any, localeId?: any, extraData?: any): void<br><br>For example, let us import German locale and register it in the application <br><br>import { registerLocaleData } from '@angular/common'; <br>import localeDe from '@angular/common/locales/de';<br><br>registerLocaleData(localeDe, 'de');</p>"
            },
            {
                "name": "What are phases of template translation in i18n?",
                "description": "<p>The i18n template translation process has four phases:</p><ol><li><strong>Mark static text messages in your component templates for translation:</strong> You can place i18n on every element tag whose fixed text is to be translated. For example <br><pre>&lt;h1 i18n&gt;Hello i18n!&lt;/h1&gt;</pre></li><li><strong>Create a translation file:</strong> Use the Angular CLI xi18n command to extract the marked text into an industry-standard translation source file. i.e, Open terminal window at the root of the app project and run the CLI command i.e. ng xi18n. The above command creates a file named <code>messages.xlf</code> in your project's root directory.</li><li><strong>Edit the generated translation file:</strong> Translate the extracted text into the target language. In this step, create a localization folder (such as <code>locale</code>)under root directory(src) and then create target language translation file by copying and renaming the default messages.xlf file. You need to copy source text node and provide the translation under target tag. For example, create the translation file(messages.de.xlf) for German language</li><li><strong>Merge the completed translation file into the app:</strong> You need to use Angular CLI build command to compile the app, choosing a locale-specific configuration.</li></ol>"
            },
            {
                "name": "What is the purpose of i18n attribute?",
                "description": "<p>The Angular i18n attribute marks translatable content. It is a custom attribute, recognized by Angular tools and compilers. The compiler removes it after translation.</p><p><strong>Note:</strong> Remember that i18n is not an Angular directive.</p>"
            },
            {
                "name": "How can I translate attribute in i18n?",
                "description": "<p>You can translate attributes by attaching <code>i18n-x</code> attribute  where x is the name of the attribute to translate. For example, you can translate image title attribute as below, <br><br>&lt;img &lsqb;src&rsqb;=\"example\" i18n-title title=\"Internationlization\" /&gt;</p>"
            },
            {
                "name": "How do you use jquery in Angular?",
                "description": "<p><img src='./assets/angular/usejquery.png'></p><p><img src='./assets/angular/usejquery1.png'></p>"
            },
            {
                "name": "What is index property in ngFor directives?",
                "description": "<p>The index property of the NgFor directive is used to return the zero-based index of the item in each iteration. You can capture the index in a template input variable and use it in the template.<br><code><div *ngFor='let todo of todos; let i=index'>{{i + 1}} - {{todo.name}}</div></code></p>"
            },
            {
                "name": "What is the purpose of ngFor trackBy?",
                "description": "<p>The main purpose of using *ngFor with trackBy option is performance optimization. Normally if you use NgFor with large data sets, a small change to one item by removing or adding an item, can trigger a cascade of DOM manipulations. In this case, Angular sees only a fresh list of new object references and to replace the old DOM elements with all new DOM elements. You can help Angular to track which items added or removed by providing a trackBy function which takes the index and the current item as arguments and needs to return the unique identifier for this item.<br><img src='./assets/angular/trackByFunction.png'><p>"
            },
            {
                "name": "What is safe navigation / Elvis operator?",
                "description": "<p>The safe navigation operator(?)(or known as Elvis Operator) is used to guard against <code>null</code> and <code>undefined</code> values in property paths when you are not aware whether a path exists or not. i.e. It returns value of the object path if it exists, else it returns the null value.<br><br>For example, you can access nested properties of a user profile easily without null reference errors <code>{{user?.fullName.firstName}}</code><br><br>Using this safe navigation operator, Angular framework stops evaluating the expression when it hits the first null value and renders the view without any errors.</p>"
            },
            {
                "name": "Which have higher precedence between pipe and ternary operator ?",
                "description": "<p>The pipe operator has a higher precedence than the ternary operator (?:). For example, the expression <strong><code>first ? second : third | fourth is parsed as first ? second : (third | fourth)</code></strong>.</p><p>Due to precedence, if you want a pipe to apply to the result of a ternary, wrap the entire expression in parentheses</p>"
            },
            {
                "name": "What is a bootstrapped component?",
                "description": "<p>A bootstrapped component is an entry component that Angular loads into the DOM during the bootstrap process or application launch time. Generally, this bootstrapped or root component is named as <code>AppComponent</code> in your root module using <code>bootstrap</code> property as below.</p>"
            },
            {
                "name": "What is Angular compiler?",
                "description": "<p>The Angular compiler is used to convert the application code into JavaScript code. It reads the template markup, combines it with the corresponding component class code, and emits component factories which creates JavaScript representation of the component along with elements of @Component metadata.</p>"
            },
            {
                "name": "How does angular finds components, directives and pipes?",
                "description": "<p>The Angular compiler finds a component or directive in a template when it can match the selector of that component or directive in that template. Whereas it finds a pipe if the pipe's name appears within the pipe syntax of the template HTML.</p>"
            },
            {
                "name": "What happens if browserModule used in feature module?",
                "description": "<p>If you do import <code>BrowserModule</code> into a lazy loaded feature module, Angular returns an error telling you to use <code>CommonModule</code> instead. Because BrowserModule’s providers are for the entire app so it should only be in the root module, not in feature module. Whereas Feature modules only need the common directives in CommonModule.</p>"
            },
            {
                "name": "How to set ngFor and ngIf on the same element?",
                "description": "<p><strong>ngFor</strong> and <strong>ngIf</strong> on the same element will unfortunately throw a template parse error. i.e. <br><strong>Template parse errors: Can't have multiple template bindings on one element.</strong><br><br>In this case, You need to either use ng-container or ng-template.<br><img src='./assets/angular/iffor.png'></p>"
            },
            {
                "name": "ng-template, ng-content, ng-container, and *ngTemplateOutlet?",
                "description": "<p><strong>ng-template</strong>: As the name suggests the <ng-template> is a template element that Angular uses with structural directives (*ngIf, *ngFor, [ngSwitch] and custom directives).These template elements only work in the presence of structural directives.</p><p><strong>ng-container</strong>: The Angular <ng-container> is a grouping element that doesn't interfere with styles or layout because Angular doesn't put it in the DOM. It is especially helpful when you want to apply two structural directives to the same element.Example - *ngIf and *ngFor on same element.</p><p><strong>ng-content</strong>: is used to project content into Angular components. In plain HTML, you can create children in any element, like this:</p><br><img src='./assets/angular/ngcontent.png'><p>If instead of divs you do something similar with Angular components, your child div won't be displayed... except if you tell Angular where to display it in the parent template using ng-content.. this in technical terms is known as 'Content Projection'</p><br><img src='./assets/angular/ngcontent1.png'><br><br>Output<br><img src='./assets/angular/ngcontent2.png'>"
            },
            {
                "name": "What is host property in css?",
                "description": "<p>The <code>:host</code> pseudo-class selector is used to target styles in the element that hosts the component. Since the host element is in a parent component's template, you can't reach the host element from inside the component by other means. For example, you can create a border for parent element as below,<br><img src='./assets/angular/hostcss.png'></p>"
            },
            {
                "name": "Sharing/Communicating Data between Angular Components",
                "description": "<p>There are Four Methods</p><ul><li><strong>Parent to Child: Sharing Data via Input:</strong> This is probably the most common and straightforward method of sharing data. It works by using the <code>@Input()</code> decorator to allow data to be passed via the template.<br><img src='./assets/angular/parent.png'><br><img src='./assets/angular/child.png'></li><li><strong>Child to Parent: Sharing Data via ViewChild:</strong> ViewChild allows a one component to be injected into another, giving the parent access to its attributes and functions. However, in that child won't be available until after the view has been initialized. This means we need to implement the AfterViewInit lifecycle hook to receive the data from the child.<br><img src='./assets/angular/parent1.png'><br><img src='./assets/angular/child1.png'></li><li><strong>Child to Parent: Sharing Data via Output() and EventEmitter:(aka - Two-Way Data Binding)</strong> Another way to share data is to emit data from the child, which can be listed to by the parent. This approach is ideal when you want to share data changes that occur on things like button clicks, form entires, and other user events.<br><br>In the parent, we create a function to receive the message and set it equal to the message variable.<br><br>In the child, we declare a messageEvent variable with the Output decorator and set it equal to a new event emitter. Then we create a function named sendMessage that calls emit on this event with the message we want to send. Lastly, we create a button to trigger this function.<br><br>The parent can now subscribe to this messageEvent that's outputted by the child component, then run the receive message function whenever this event occurs.<br><img src='./assets/angular/parent2.png'><br><img src='./assets/angular/child2.png'></li><li><strong>Unrelated Components: Sharing Data with a Service:</strong>: When passing data between components that lack a direct connection, such as siblings, grandchildren, etc, you should you a shared service. When you have data that should aways been in sync, I find the <code>RxJS BehaviorSubject</code> very useful in this situation.<br><br>In the service, we create a private BehaviorSubject that will hold the current value of the message. We define a currentMessage variable handle this data stream as an observable that will be used by the components. Lastly, we create function that calls next on the BehaviorSubject to change its value.<br><br>The parent, child, and sibling components all receive the same treatment. We inject the DataService in the constructor, then subscribe to the currentMessage observable and set its value equal to the message variable.<br><br>Now if we create a function in any one of these components that changes the value of the message. when this function is executed the new data it's automatically broadcast to all other components.<br><img src='./assets/angular/shareddataservice.png'><br><img src='./assets/angular/parent3.png'><br><img src='./assets/angular/sibling.png'></li></ul>"
            },
            {
                "name": "In Parent to child component communication. Suppose an object have two properties only change in one property in parent, Will change reflect in the child component?",
                "description": "<p>Yes, By Using OnPush change detection strategy for specific components in Angular. This will instruct Angular to run change detection on these components and their sub-tree only when new references are passed to them versus when data is mutated. </p>"
            },
            {
                "name": "What is a component factory resolver?",
                "description": "<p>A factory is a type with a single method that returns a new component instance each time it is called. The parameters of that method allow the caller to provide the modules, dependencies and bound instances required by the component. <br><br>Where as A <strong>component factory resolver</strong> is a registry that maps Components to generated ComponentFactory classes that can be used to create instances of components.</p>"
            },
            {
                "name": "Explain Styling precedence",
                "description": "<p>When there are multiple bindings to the same class name or style attribute, Angular uses a set of precedence rules to determine which classes or styles to apply to the element. These rules specify an order for which style and class related bindings have priority.</p><ul><li><strong>Template bindings</strong> are the most specific because they apply to the element directly and exclusively, so they have the highest precedence.<br><br><strong>Property binding</strong> - &lt;div [class.foo]=\"hasFoo\"&gt; / &lt;div [style.color]=\"color\">&gt;<br><strong>Map binding</strong> - &lt;div [class]=\"classExpression\"&gt; / &lt;div [style]=\"styleExpression\"&gt;<br><strong>Static value</strong> - &lt;div class=\"foo\"&gt; / &lt;div style=\"color: blue\"&gt;<br><br></li><li><strong>Directive host bindings</strong> are less specific because you can use directives in multiple locations, so they have a lower precedence than template bindings. <br><br><strong>Property binding</strong> - host: {'[class.foo]': 'hasFoo'} / host: {'[style.color]': 'color'} <br><strong>Map binding</strong> - host: {'[class]': 'classExpr'} / host: {'[style]': 'styleExpr'} <br><strong>Static value</strong> - host: {'class': 'foo'} / host: {'style': 'color: blue'}<br><br></li><li><strong>Component host bindings</strong> have the lowest precedence. <br><br><strong>Property binding</strong> - host: {'[class.foo]': 'hasFoo'} / host: {'[style.color]': 'color'}<br><strong>Map binding</strong> - host: {'[class]': 'classExpression'} / host: {'[style]': 'styleExpression'} <br><strong>Static value</strong> - host: {'class': 'foo'} / host: {'style': 'color: blue'}</li>"
            },
            {
                "name": "Difference between @Attribute() vs @Input()?",
                "description": "<p><strong>@Input():</strong> Used to pass values into the directive or to pass data from one component to another (typically parent to child).</p><p><strong>@Attribute():</strong> we can map the constant value of an attribute on html to a property on your component.</p><p>In Short - one is declared as parameter in the constructor and one is declared as property.</p>"
            },
            {
                "name": "Template type checking in custom directive?",
                "description": "<p>To support type checking, we will need to work with two handy type guards provided by Angular:</p><ul><li><strong>ngTemplateContextGuard</strong>: Declare a custom type for the context of our custom directive.</li><li><strong>ngTemplateGuard_[customInputProperty]</strong>: Narrow the rendered type of an input property.</li></ul><br><br><p><strong>ngTemplateContextGuard</strong><br>If we need to provide a context to our custom directive, we can ensure it is properly typed in the template using the static function <strong>ngTemplateContextGuard</strong>. It works like a Typescript type guard function and returns a type predicate.<br>Let's look at an example to better understand the concept.<br></p><p><img src='./assets/expertAngular/ngTemplateContextGuard.png'><br><img src='./assets/expertAngular/ngTemplateContextGuard1.png'><br><img src='./assets/expertAngular/ngTemplateContextGuard2.png'></p><p><code>The ngTemplateContextGuard returns true since this directive will always pass a context of type DemoContext to the template.</code></p><p>Now when we use this directive in our template, we get nice correctly typed properties.<br><img src='./assets/expertAngular/ngTemplateContextGuard3.png'></p><br><br><p><strong>ngTemplateGuard_[customInputProperty]</strong><br><p>This guard is a bit more complex to understand. A structural directive controls how a template will be rendered at runtime. <em>(NgIf for example, will add a template to the DOM only if the input condition is thrustly.)</em></p></p><p>If the input of our custom directive has a complex type and the directive will only render the template when certain condition are met, we can narrow the rendered type with this guard.</p>"
            },
            {
                "name": "How to disable type checking on template expression?",
                "description": "<ul><li>Use the <code>$any()</code> type-cast function in certain contexts to opt out of type-checking for a part of the expression</li><li>Disable strict checks entirely by setting <code>strictTemplates: false</code> in the application's TypeScript configuration file, <code>tsconfig.json</code></li><li>Disable certain type-checking operations individually, while maintaining strictness in other aspects, by setting a <em>strictness flag</em> to <code>false</code></li><li>If you want to use <code>strictTemplates</code> and <code>strictNullChecks</code> together, opt out of strict null type checking specifically for input bindings using <code>strictNullInputTypes</code></li></ul>"
            },
            {
                "name": "Describe 3 Mode of template type checking?",
                "description": "<p>With Angular 9, there are 3 different template type checking \"modes\" or \"levels\":</p><ul><li><strong>Basic</strong> - This mode mostly works in the same way as the previous versions of Angular; it will only check top-level expressions in your templates (e.g., fields & properties that you use exist on the component class). Honestly, this level of type checking is really <code>weak</code>. The basic mode is enabled when the <strong><code>fullTemplateTypeCheckflag</code></strong> is set to <strong><code>false</code></strong>.</li><li><strong>Full</strong> - If you enable the \"full\" mode, then Angular will be more careful and it'll also type check things like pipes and embedded views (created when you use things like ngIf, ngFor, ng-template, etc). Overall, this mode provides additional safety, but who likes half measures? To enable it, set the  <strong><code>fullTemplateTypeCheckflag</code></strong> to <strong><code>true</code></strong>.</li><li><strong>Strict</strong> - Finally, the new \"strict\" mode enforces full template type checking and catches many more errors at build time. In strict mode, the \"full\" mode checks are enabled and, in addition, many more things are checked: <ul><li>component bindings and assignability (obeying TypeScript's strictNullChecksflag)</li><li>types of components and directives (including generics!)</li><li>context types (e.g., allowing to fully type check ngFor loops)</li><li>event objects (i.e., $event) for components, directives, DOM & animation bindings</li><li>type of references to DOM elements</li><li>(and probably more)</li></ul></li></ul><p>To enable the strict mode, you just have to set the <strong><code>strictTemplates</code></strong> flag to <strong><code>true</code></strong>. Note that these flags are configured in your “tsconfig.json” file:</p><p><img src='./assets/expertAngular/tsconfig.png'></p>"
            },
            {
                "name": "What happens if assign template local reference variable on ng-template?",
                "description": "<p>If you declare the variable on an  element, the variable refers to a TemplateRef instance which represents the template.</p><p>Here we use the ng-template specify the template for the then & else clause. We use the template reference variable to get the reference to those blocks.</p><p><strong>ng-template with ngIf, then & else</strong> In the *ngIf condition we specify the template to render by pointing to the template variable to the then & else condition. <br><img src='./assets/expertAngular/ngTemplateIf.png'></p><p><strong>ng-template with ngFor</strong><br><img src='./assets/expertAngular/ngTemplateFor.png'></p><p><strong>ng-template with ngSwitch</strong><br><img src='./assets/expertAngular/ngTemplateSwitch.png'></p>"
            },
            {
                "name": "What is Template Reference Variable",
                "description": "<p>The <strong>Template reference variable</strong> is a reference to any DOM element, component or a directive in the Template. We can use it elsewhere in the template. We can also pass it to a method in the component. It can contain a reference to elements like h1, div, etc.<br><br>We declare Template reference variables using <code>#</code> followed by the name of the variable ( <code>#variable</code>). We can also declare them using <code>#variable=\"customer\"</code> when the component/directive defines a customer as the <code>exportAs</code> Property.<br><br><strong>HTML Element</strong><br>&lt;input type=\"text\" #firstName&gt; <br><br><strong>Component/Directive</strong><br>&lt;app-customer #customerList=”customer”&gt;&lt;/app-customer&gt;</p>"
            },
            {
                "name": "Is angular selector support parent child relationship ?",
                "description": "<p>Yes, there are different ways to call selectors in parent child component</p><ul><li><strong>Using selector as HTML tag</strong> - In this selector of child component is used in the parent component i.e. app component in this case, as normal HTML tag. Example - &lt;app-wheels&gt;&lt;/app-wheels&gt;</li><li><strong>Using selector as Class</strong> - Include child component by using selector as class name. This way will require some changes in selector metadata of the component.ts file of child. <br>A \". \"(dot) is needed to be add to use selector as class name. It is similar to the way we define CSS class, e.g. \".btn-group\" <br><img src='./assets/expertAngular/selectorClass.png'><br>Now the child component can be included in the parent using class name like this. <br>&lt;div class=\"app-wheels\"&gt;&lt;/div&gt;</li><li><strong>Using selector as Directive</strong> - To use selector as directive, change is required in the selector of the child component. Selector name need to be closed in square bracket, just like in case of property binding. <br><img src='./assets/expertAngular/selectorDirective.png'><br>Now the child component can be included in the parent using directive like this.&lt;div app-wheels&gt;&lt;/div&gt;</li></ul>"
            },
            {
                "name": "Explain Hostbinding, Hostlistener?",
                "description": "<p><code>@HostBinding</code> and <code>@HostListener</code> are two decorators in Angular that can be really useful in custom directives. <code>@HostBinding</code> lets you set properties on the element or component that hosts the directive, and <code>@HostListener</code> lets you listen for events on the host element or component. <br><img src='./assets/expertAngular/host.png'></p><p>And the directive can be used on elements like this: <br><img src='./assets/expertAngular/host1.png'></p><p>Our <code>Rainbow</code> directive uses two <code>@HostBinding</code> decorators to define two class members, one that's attached to the host's <code>style.color</code> binding and the other to <code>style.border-color</code>. You can also bind to any class, property, or attribute of the host.</p><ul><li><code>@HostBinding('class.active')</code></li><li><code>@HostBinding('disabled')</code></li><li><code>@HostBinding('attr.role')</code></li></ul>"
            },
            {
                "name": "Write the syntax for ngClass use cases?",
                "description": "<p>There are two ways to use this directive, the first is by passing an object literal to the directive,</p><p>Syntax - [ngClass]=\"{'text-success':true}\" <br>Example - [ngClass]=\"{'text-success':person.country === 'UK'}\" <br><img src='./assets/expertAngular/ngClass.png'></p><p>We can also set a class on an element by binding to the input property binding called class</p><p>Syntax - [class.text-success]=\"true\" <br>Example - [class.card-success]=\"person.country === 'UK'\" <br><img src='./assets/expertAngular/ngClass1.png'></p>"
            },
            {
                "name": "Tell the use case of ngModel Change ?",
                "description": "<p><strong>ngModelChange</strong> is the <code>@output</code> property of <code>ngModel</code> directive. and it's specific to Angular framework. Hence we need to use it along with it.</p><p>ngModel raises the NgModelChange event, which is why it is used to track the changes happened to ngModel property.</p><p><strong>NgModelChange Vs Change</strong></p><table><thead><tr><th>ngModelChange</th><th>change</th></tr></thead><tbody><tr><td>ngModelChange is an Angular Event</td><td>change event is classic HTML DOM event independent of Angular</td></tr><tr><td>We cannot use ngModelChange without <code>ngModel</code></td><td>change event is not related to two way binding we can use it on any HTML form element</td></tr><tr><td>ngModelChange event is called on each input change</td><td>change event is called only when focus move away from the element</td></tr><tr><td>ngModelChange parameter contains the changed value</td><td>change contains event parameter, to access the changed value we need to use e.target.value</td></tr><tr><td>ngModelChange triggered when a change happened to ngModel irrespective of focus of the element.</td><td>change event triggers when the user changes the input.(depends on focus of the element)</td></tr></tbody></table>"
            },
            {
                "name": "How to host a directive without Dom?",
                "description": "Use &lt;ng-container&gt;, as it doesn't interfere with styles or layout because Angular doesn't put it in the DOM. As a use case of this it can act as the host to structural directives like *ngIf, *ngFor"
            },
            {
                "name": "What is ElementRef use?",
                "description": "<p>Angular <strong>ElementRef</strong> is a wrapper around a native DOM element (HTML element) object. It contains the property <code>nativeElement</code>, which holds the reference to the underlying DOM object. We can use it to manipulate the DOM. We use the ViewChild to get the ElementRef of an HTML element in the component class. <br>Angular also inject <strong>ElementRef</strong> of the Host element of the component or directive when you request for it in the constructor. </p><p> 2nd Definition  - Angular <strong>ElementRef</strong> is simply a class that wraps native DOM elements in the browser and allows you to work with the DOM by providing the nativeElement object which exposes all the methods and properties of the native elements. </p><ul><li><strong>Getting ElementRef in Component Class</strong> - <br>In HTML - &lt;div #hello&gt; <br>Hello Angular&lt;/div&gt; <br>In Component - @ViewChild('hello', { static: false }) divHello: ElementRef;</li><li><strong>Read token</strong> - <br>In HTML - &lt;input #nameInput [(ngModel)]=\"name\"&gt;<br>//ViewChild returns ElementRef i.e. input HTML Element <br>@ViewChild('nameInput',{static:false, read: ElementRef}) elRef;<br><br>//ViewChild returns NgModel associated with the nameInput<br>@ViewChild('nameInput',{static:false, read: NgModel}) inRef;</li><li><strong>ElementRef in Custom Directive</strong> - <br><img src='./assets/expertAngular/elementRef.png'></li><li><strong>ElementRef & XSS Injection Attack</strong> - <br><img src='./assets/expertAngular/elementRef1.png'></li></ul>"
            },
            {
                "name": "How to stop/Deactivate the processing of directive or binding ?",
                "description": "<p>We use <strong>ngNonBindable</strong> when we want tell Angular not to compile, or bind, a particular section of our page. <br>Example - This {{ 5+5 }} expression will result 10 in the brower , now If I pass &lt;pre ngNonBindable&gt;{{ 5+5 }}&lt;/pre&gt; will result {{ 5+5 }} in the browser</p>"
            },
            {
                "name": "How to provide an alternative / alias Class provider?",
                "description": "<p>You can then use the Inject using the @Inject method</p><p><img src='./assets/expertAngular/inject.png'><br><img src='./assets/expertAngular/inject1.png'></p><p>This way I'll have the instance of MyAnotherService injected by MyService while having the interface of MyAnotherService.</p>"
            },
            {
                "name": "What is Resolution Modifiers?",
                "description": "<p>@Self, @SkipSelf, @Optional & @Host are Angular Decorators that configure how the DI Framework should resolve the dependencies. These decorators are called Resolution Modifiers because they modify the behavior of injectors.</p><p><strong>Example</strong> - The Code contains a RandomService, which generates a Random Number when initialized. The Angular Service is added to the Providers array of the AppModule. We can inject this service anywhere in our Application. <br><img src='./assets/expertAngular/injectableRoot.png'><br>The project contains three Angular Components (AppComponent, ChildComponent & GrandChildComponent) all inject the RandomService and displays the Random Number from the Service. <br>We also have testDirective, which we include in the template of GrandChildComponent. It also displays the Random Number from the Service. <br>Ensure that the Providers array is empty in all components & directives. Run the App. Angular creates only one instance of the RandomService. That is why all the components and directives show the same number. <br><img src='./assets/expertAngular/Self-SkipSelf-Optional-Host-Angular-Example.png'></p><p><strong>@Self</strong> - The <strong>@Self</strong> decorator instructs Angular to look for the dependency only in the local injector. The local injector is the injector that is part of the current component or directive. <br>Open the <code>GrandChildComponent</code> and add the <strong>@Self()</strong> on <code>randomService</code><br><img src='./assets/expertAngular/self.png'><br>This forces the Angular DI Framework to look for the Dependency attached to the current Component. Since it does find one it will throw the error <br><img src='./assets/expertAngular/noProvider.png'><br>Add the <code>RandomService</code> to the providers array of the <code>GrandChildComponent</code> and the error goes away.<br><img src='./assets/expertAngular/self1.png'><br>Angular creates two instances of RandomService. One from the <code>AppModule</code> and another from the <code>GrandChildComponent</code>. Also, note that <code>testDirective</code> picks up the <code>RandomService</code> provided from the <code>GrandChildComponent</code> and not from the <code>AppModule</code><br><img src='./assets/expertAngular/self2.png'></p><br><p><strong>@SkipSelf</strong> - The <code>@SkipSelf</code> decorator instructs Angular to look for the dependency in the Parent Injector and upwards. <br>It tells Angular not to look for the injector in the local injector, but start from the Parent. You can think of this decorator as the opposite of the @Self <br><img src='./assets/expertAngular/skipSelf.png'><br>the <code>GrandChildComponent</code>, picks up <code>RandomService</code> instance provided by the Module and not the one provided by itself. <br>But, the <code>testDirective</code> still picks up the <code>RandomService</code> provided by the <code>GrandChildComponent</code>.<br><img src='./assets/expertAngular/skipSelf1.png'></p><br><p><strong>@Optional</strong> - Optional marks the dependency as Optional. If the dependency is not found, then it returns <code>null</code> instead of throwing an error <br>In the <code>GrandChildComponent</code> remove the <code>RandomService</code> from the Providers Array and add the <code>@Self</code> decorator. You will instantly receive the error <strong>\"No provider for RandomService found in NodeInjector\"</strong>. <br>Also, remember to add the ? in randomService?, else you will get the “Cannot read property 'RandomNo' of null\" error.<br><img src='./assets/expertAngular/optional.png'><br><code>GrandChildComponent</code> does not receive any values, while <code>testDirective</code> picks up the <code>RandomService</code> provided by the <code>AppModule</code><br><img src='./assets/expertAngular/optional1.png'></p><br><p><strong>@Host</strong> - decorator makes Angular to look for the injector on the component itself, so in that regard it may look similar to the @Self() decorator (7.). But that's actually not the end: if the injector is not found there, it looks for the injector up to its host component.</p>"
            },
            {
                "name": "How to support PWA in angular?",
                "description": "<p><strong>Step 1</strong> - install the @angular/pwa package. The @angular/pwa package is an Angular schematics that adds Progressive Web App support to an Angular app.</p><ul><li>Automatically imports and registers the service worker in the app module.</li><li>Updates <code>index.html</code> to include the <code>manifest.json</code> file which has details about the progress web application.</li><li>Creates the icon files to support the PWA. These are place in the <code>src/assets/icons</code> folder and should be updated with the apps icon for branding purposes.</li><li>Creates <code>src/ngsw-config.json</code>. This file is used to configure the service worker.</li></ul>"
            },
            {
                "name": "What is a lightweight injection token?",
                "description": "<p>First let us understand what is Tree Shaking? - It refers to the process of removing unused code during the build phase. <br><br>For example — If we use a library that has 5 functions but in our code we only make use of 3, then in the final bundle we wont have the code for the 2 unused functions, this helps reduce bundle size and may seem like a trivial thing but in larger enterprise applications it has a lot of impact.</p><p>In order to prevent the retention of unused components it is necessary for the library author to use the lightweight token pattern. The pattern consist of using a small abstract class as injection token. Later implement that abstract class with actual implementation. The result is that the abstract class will be retained but it is small and so it has almost no impact on the application developer.</p><p>Injection of the lightweight pattern, using <strong>@ContentChild()</strong> or <strong>@ContentChildren()</strong>.</p>"
            },
            {
                "name": "Defer and Async in script tag",
                "description": "<p>With <b>async</b>, the file gets downloaded <b>asynchronously</b> and then executed as soon as it's downloaded. With <b>defer</b>, the file gets downloaded <b>asynchronously</b>, but executed only when the document parsing is completed. <b>preload</b> is a declarative fetch, allowing you to force the browser to make a request for a resource without blocking the document’s onload event. <b>Prefetch</b> is a hint to the browser that a resource might be needed, but delegates deciding whether and when loading it is a good idea or not to the browser.</p><p>With async, in the head: The script is fetched asynchronously, and when it's ready the HTML parsing is paused to execute the script, then it's resumed. <img src='./assets/angular/with-async.png'></p><p>With defer, in the head: The script is fetched asynchronously, and it's executed only after the HTML parsing is done. <img src='./assets/angular/with-defer.png'></p><p>No defer or async, in the head: The parsing is paused until the script is fetched, and executed. Once this is done, parsing resumes. <img src='./assets/angular/without-defer-async-head.png'></p><p>No defer or async, in the body: The parsing is done without any pauses, and when it finishes, the script is fetched, and executed. Parsing is done before the script is even downloaded, so the page appears to the user way before the previous example. <img src='./assets/angular/without-defer-async-body.png'></p>"
            },
            {
                "name": "How to optimize angular application?",
                "description": "<ul><li>Controlling Change Detection using onPush</li><li>Lazy loading modules</li><li>Unsubscribing observables</li><li>Code splitting</li><li>AOT compilation mode + compression</li><li>Use Pure Pipes</li><li>Async pipe</li><li>Use Trackby on ngFor</li><li>Don't try to use Angular for everything</li><li>Service Worker and Server-side rendering</li></ul>"
            },
            {
                "name": "What is challenging work you have done in angular?",
                "description": "<p>Using OnPush at required locations is the best solution to tackle slow page response. This will help you optimise your Angular app’s output.</p><p>Reduce the traffic request by caheing response and retrive data through cache</p><p>Implementation of Etag- which validates that whatever CRUD action is performed by the username is only done from one system where it is logged in and should not be duplicate that same CRUD action from another system with that same username</p>"
            },
            {
                "name": "What is webpack?",
                "description": "<p>webpack is a static module bundler for modern JavaScript applicationsIn webpack you configure the following:</p><ul><li><strong>Entry</strong>: the module where webpack should start</li><li><strong>Output</strong>: where webpack emits the <em>bundles</em> it creates</li><li><strong>Loaders</strong>: enable webpack to process more than just JavaScript files</li><li><strong>Plugins</strong>: perform a wide range of tasks like minification</li></ul>"
            },
            {
                "name": "What is HMR? ( Hot Module Replacement )",
                "description": "<p>Hot Module Replacement (HMR) is a key webpack feature that is not enable by default in Angular. It allows for modules to be replaced without need for a full browser refresh. This allows you to retain much of the application state, usually lost when reloading. Angular 11 made it easy to use HMR by providing it out-of-box in the CLI.</p>"
            },
            {
                "name": "What mean by uglification?",
                "description": "<p>This step comes after Minification was done to any file and further we want to reduce the size of the file?</p><p>The beautiful variable, parameter names present in any functions which are only made inorder for the code readability can be reduced to one or two letter variables. This process converts beautiful, human understandible variable names into ugly ones. Hence this process is called ‘Uglification’.</p><p>In Angular, This happens only in the build produced in ‘prod’ mode but not ‘dev’ mode.</p>"
            },
            {
                "name": "What type of DOM does Angular implement? ",
                "description": "<p>DOM (Document Object Model) treats an XML or HTML document as a tree structure in which each node is an object representing a part of the document.</p><p>Angular uses the regular DOM. This updates the entire tree structure of HTML tags until it reaches the data to be updated. However, to ensure that the speed and performance are not affected, Angular implements Change Detection.</p>"
            },
            {
                "name": "What is Reactive Programming and how to use one with Angular?",
                "description": "<p>Reactive programming is programming with asynchronous data streams. RxJs stands for Reactive Extensions for Javascript, and it's an implementation of Observables for Javascript. An Observable is like a Stream (in many languages) and allows to pass zero or more events where the callback is called for each event. Angular currently uses RxJs Observables in two different ways:</p><ul><li>as an internal implementation mechanism, to implement some of its core logic like <code>EventEmitter</code></li><li>as part of its public API, namely in <code>Forms</code> and the <code>HTTP module</code></li></ul>"
            },
            {
                "name": "Explain what annotations are in Angular?",
                "description": "<p>Annotation is a block of text that can be displayed over a node or connector. Annotation is used to textually represent an object with a string that can be edited at runtime</p>"
            },
            {
                "name": "Explain what view encapsulation is in Angular?",
                "description": "<p>View encapsulation defines whether the template and styles defined within the component can affect the whole application or vice versa. Angular provides three encapsulation strategies:</p><ul><li><code>Emulated (default)</code> - styles from main HTML propagate to the component. Styles defined in this component's <code>@Component</code> decorator are scoped to this component only.</li><li><code>ShadowDom</code> - styles from main HTML do not propagate to the component. Styles defined in this component's <code>@Component</code> decorator are scoped to this component only.</li><li><code>None</code> - styles from the component propagate back to the main HTML and therefore are visible to all components on the page. Be careful with apps that have <code>None</code> and <code>Native</code> components in the application. All components with <code>None</code> encapsulation will have their styles duplicated in all components with <code>Native</code> encapsulation</li></ul><br><p><img src='./assets/angular/viewNone.png'></p>"
            },
            {
                "name": "Why angular uses url segment?",
                "description": "<p>A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix parameters associated with the segment.</p><p>Matrix parameters are tied to a path segment, while query parameters are tied to the URL. They have different semantics.</p><p><img src='./assets/angular/urlsegment.png'></p><p>With an Angular app, the only people who really care about these parameters are us the developer. The user doesn't care. It is not a REST API where we should stick to well known semantics. For out Angular app, as long as we the developer know how to use params (whether matrix or query), it shouldn't matter which one we use.</p>"
            },
            {
                "name": "Explain MVVM architecture.",
                "description": "<p><strong>MVVM architecture</strong> is an architectural pattern used mainly in software engineering. It stands for <strong>Model-View-ViewModel</strong>. MVVM is a variation of the traditional MVC (Model-View-Controller) software design pattern. The main difference between the two is that MVVM separates the user interface logic from the business logic, while MVC separates the data access logic from the business logic.</p><p>The Model layer in MVVM architecture is responsible for storing and managing data. It can be a database, a web service, or a local data source. The View layer is responsible for displaying data to the user. It can be a graphical user interface (GUI), a command-line interface (CLI), or a web page. The ViewModel layer is responsible for handling user input and updating the View layer accordingly. It contains the business logic of the application.</p>"
            },
            {
                "name": "Do you know how you can run angularJS and angular side by side?  ",
                "description": "<p>In order to run both frameworks side-by-side and make components interoperable, the Angular projects comes with a module <strong>ngUpgrade</strong>. The module basically acts as an adapter facade, so we don't really feel that there are two frameworks running side-by-side.</p><p>For this to work, four things need to interoperate:</p><ul><li>Dependency Injection - Exposing Angular services into Angular 1.x components and vice-versa.</li><li>Component Nesting - Angular 1 directives can be used in Angular 2.x components and Angular 2.x components can used Angular 1 directives</li><li>Content Projection / Transclusion - Angular 1 components transclude Angular 2.x components and Angular 2.x component project Angular 1 directives</li><li>Change Detection - Angular 1 scope digest and change detectors in Angular &gt;= 2.x are interleaved</li></ul><p>Here's what a typical upgrade process would look like:</p><ul><li>Include Angular and upgrade module</li><li>Pick component to upgrade and change its controller and template Angular 2.x syntax (this is now an Angular 2.x component)</li><li>Downgrade Angular 2.x component to make it run in Angular 1.x app</li><li>Pick a service to upgrade, this usually requires little amount of change (especially if we’re on ES2015)</li><li>Repeat step 2 and 3 (and 4)</li><li>Replace Angular 1 bootstrap with Angular 2.x bootstrap</li></ul>"
            },
            {
                "name": "When to use query parameters versus matrix parameters?",
                "description": "<p><strong>Problem</strong></p><ul><li>Query parameters: http://example.com/apples?order=random&amp;color=blue</li><li>Matrix parameters: http://example.com/apples;order=random;color=blue</li></ul><p><strong>Answer</strong></p><p>The differences between Matrix parameters and Query Parameters are much more than just convention.</p><p>The main differences are:</p><ul><li>urls with query params won't have their response cached by intermediaries/proxies (at present)</li><li>matrix parameters may appear anywhere in path</li><li>calculating the relative uri is different</li><li>query params are generally abused to add new verbs instead of using existing methods on resources</li><li>matrix parameters are not resources, they are aspects that help reference a resource in an information space that is difficult to represent within a hierarchy</li></ul>"
            },
            {
                "name": "How would you control size of an element on resize of the window in a component?",
                "description": "<p><code>@HostListener</code> lets you listen for events on the host element or component.</p><p>This is a function decorator that accepts an event name as an argument. When that event gets fired on the host element it calls the associated function.</p><p>Consider:</p><p><img src='./assets/angular/resizewindowcomponent.png'></p>"
            },
            {
                "name": "What is package.json and package.lock.json?",
                "description": "<p>The package.json is used for more than dependencies - like defining project properties, description, author & license information, scripts, etc.</p><p>The package-lock.json is solely used to lock dependencies to a specific version number.</p><p>The package-lock.json is automatically generated for the project- where npm modifies either the node_modules tree, or package.json.</p>"
            },
            {
                "name": "What Is the Single Page Application(SPA)? How Is It Different From Traditional Web Technology?",
                "description": "<p>In a single page application (SPA), only the home page (index.html) is maintained throughout the application, even though the URL keeps on changing. In traditional technology, every time a user makes a request, the request is passed on to the server which takes more time. It is faster and easier to implement when compared with traditional web technology.</p>"
            },
            {
                "name": "What is progressive rendering?",
                "description": "<p><em>Progressive rendering</em> is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.</p><p>Examples of such techniques:</p><ul><li>Lazy loading of images - Images on the page are not loaded all at once. JavaScript will be used to load an image when the user scrolls into the part of the page that displays the image.</li><li>Prioritizing visible content (or above-the-fold rendering) - Include only the minimum CSS/content/scripts necessary for the amount of page that would be rendered in the users browser first to display as quickly as possible, you can then use deferred scripts or listen for the <code>DOMContentLoaded</code>/<code>load</code> event to load in other resources and content.</li><li>Async HTML fragments - Flushing parts of the HTML to the browser as the page is constructed on the back end.</li></ul>"
            }
        ]
    },
    {
        "folder": "React",
        "title": "React",
        "url": "/folder/React",
        "icon": "logo-react",
        "question": [
            {
                "name": "How does React work?",
                "description": "<p>The React framework is an open-source JavaScript framework and library developed by Facebook.<br><br>React's core purpose is to build UI components; it is often referred to as just the “V” (View) in an “MVC” architecture.<br><br>React creates a virtual DOM. When state changes in a component it firstly  identifies what has changed in the virtual DOM. The second step is reconciliation, where it updates the DOM with the results of diff.</p>"
            },
            {
                "name": "What is Context API in ReactJS?",
                "description": "<p>Context provides a way to pass data through the component tree without having to pass props down manually at every level. Context is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language. Using context, helps us avoid the problem of props drilling.<br><img src='./assets/react/context1.png'></p>"
            },
            {
                "name": "What is JSX?",
                "description": "<p>JavaScript XML, or JSX, <b>is a XML/HTML template syntax used by React</b>. It extends ECMAScript, which allows XML/HTML-like text to coincide with JavaScript and React code. It allows us to put HTML into JavaScript.<br><br>It's faster than normal JavaScript, which makes it easier to create templates, and uses components. It comes with the full power of JavaScript, and you can use it with React to describe what the user interface should look like.</p>"
            },
            {
                "name": "What are the advantages of ReactJS?",
                "description": "<ol><li>Increases the application's performance with Virtual DOM</li><li>JSX makes code is easy to read and write</li><li>It renders both on client and server side</li><li>Easy to integrate with other frameworks (Angular, BackboneJS) since it is only a view library</li><li>Easy to write UI Test cases and integration with tools such as JEST.</li></ol><br><br><p><strong>Disadvantages of ReacJs</strong></p><ol><li><strong>View Part</strong> - ReactJS Covers only the UI Layers of the app and nothing else. So you still need to choose some other technologies to get a complete tooling set for development in the project.</li><li>Due to JSX, a beginner developer complain about its complexity in the learning curve, and the need of additional libraries or tools to complete a full-featured application</li><li><strong>Poor Documentation</strong> - Since React is changing so fast, new tools and patterns are adding up every now and then, and it is becoming difficult for the community to maintain the documentation. This makes it difficult to work with for new developers who want to start with React. </li><li>Since React is rapidly changing with updates and new features, it forces its developers to update the way they write code in their project. This annoys most of the developers who are not comfortable with adopting new ways every Monday they start or the ones who are working on an application where changes are critical to customers.</li></ol>"
            },
            {
                "name": "What are the major features of ReactJS?",
                "description": "<ul><li>It uses <strong>VirtualDOM</strong> instead RealDOM considering that RealDOM manipulations are expensive.</li><li>Supports <strong>server-side rendering</strong></li><li>Follows <strong>Unidirectional</strong> data flow or data binding</li><li>Uses <strong>reusable/composable</strong>UI components to develop the viewn></li></ul>"
            },
            {
                "name": "What is state?",
                "description": "<p><strong>State</strong> of a component is an object that holds some information that may change over the lifetime of the component. As state stores a component’s dynamic data and determines the component’s behaviour, it enables a component to keep track of changing information in between renders and for it to be dynamic and interactive.</p>"
            },
            {
                "name": "List all Hooks (state, effect, context, reducer, callback, memo, refs)",
                "description": "<p>The main advantage of react hooks is the re-usability of stateful logic that is common across multiple components without the burden of higher order components or render props<br><br>Hooks allow to easily manipulate the state of our functional component without needing to convert them into class components.<br><br>Hooks don’t work inside classes (because they let you use React without classes). By using them, we can totally avoid using lifecycle methods, such as <code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code>. Instead, we will use built-in hooks like <code>useEffect</code> .</p><ul> <li><strong>useState</strong> - The useState hook allows you to add state to a functional component. It returns an array with two values: the current state and a function to update it</li><li><strong>useEffect</strong> - The useEffect hook allows you to run side effects, such as fetching data or updating the DOM, in a functional component. It takes a callback function as its first argument, which is called after the component has rendered. It is considered as the alternative for the class component lifecycle methods <code>componentDidMount, componentWillUnmount, componentDidUpdate,</code> etc.</li><li><strong>useContext</strong> - This hook is used to create common data that can be accessed throughout the component hierarchy without passing the props down manually to each level. Context defined will be available to all the child components without involving “props”.</li><li><strong>useLayoutEffect</strong> - useLayoutEffect. The signature is identical to useEffect , but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.</li><li><strong>useReducer</strong> - useReducer may be used as an alternative to useState. It's ideal for complex state logic where there's a dependency on previous state values or a lot of state sub-values. <p>As opposed to calling <code>useState</code>, call <code>useReducer</code> with a <code>reducer</code> and <code>initialState</code>, as shown below. The <code>useReducer</code> call returns the state property and a <code>dispatch</code> function.</p></li><li><strong>useCallback</strong> - The useCallback hook is used when you have a component in which the child is rerendering again and again without need. Pass an inline callback and an array of dependencies. useCallback will return a memoized version of the callback that only changes if one of the dependencies has changed</li><li><strong>useMemo</strong> - useMemo will call the function and return its return value. Then, every time you call useMemo again, it will first check if any dependencies have changed. If not, it will return the cached return value, not calling the function. If they have changed, useMemo will call the provided function again and repeat the process.<p><img src='./assets/react/reactmemo.png'></p></li><li><strong>useRef</strong> - Refs allow you to get direct access to a DOM Node of an element in a component. In order to access them you need to add a ref attribute to your element in the component whose value is a callback function which will receive the underlying DOM Node of the component as its first argument. Here returned reference in the DOM Node can be only accessed with a special property name called current.<p>There are 2 rules to remember about references:</p><ol><li>The value of the reference is <em>persisted</em> (stays the same) between component re-renderings;</li><li>Updating a reference <em>doesn’t trigger a component re-rendering</em>. Hence it is always suggested that a useRef should be used only when you have to access the values and not updating it rerendering it.</li></ol><p><img src='./assets/react/useref.png'></p></li></ul>"
            },
            {
                "name": "What are the rules needs to follow for hooks?",
                "description": "<p>You need to follow two rules in order to use hooks,</p><ol><li>Call Hooks only at the top level of your react functions. i.e, You shouldn’t call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple useState and useEffect calls.</li><li>Call Hooks from React Functions only. i.e, You shouldn’t call Hooks from regular JavaScript functions.</li></ol>"
            },
            {
                "name": "Prevent or stop a component from rendering in React?",
                "description": "<p>Returning <code><strong>null</strong></code> from a component's render method does not affect the firing of the component's lifecycle methods.</p>"
            },
            {
                "name": "Difference between state and props?",
                "description": "<p>Both <strong>props</strong> and <strong>state</strong> are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. i.e,</p><ul><li><strong>Props</strong> get passed to the component similar to function parameters, They are set by the parent and they are fixed throughout the lifetime of a component.</li><li><strong>State</strong> is managed within the component similar to variables declared within a function.</li></ul>"
            },
            {
                "name": "Difference between DOM vs Shadow DOM vs Virtual DOM?",
                "description": "<p>The main <strong>difference between DOM and Shadow DOM</strong> is how it's created and how it behaves. Normally DOM nodes which we create are placed inside other elements where as In the case of Shadow DOM, we create a scoped tree, which is connected to the element but separated from the children elements. It's called shadow tree and the element it's attached to is called shadow host<br><br>The main <strong>difference between Virtual DOM and Shadow DOM</strong> is that - Virtual DOM is create a copy of the whole DOM object and when any change is detected only that dom re-renders and get update, and Shadow DOM creates small pieces of the DOM object which has their own, isolated scope for the element they represent.<br><br>The main <strong>difference between Real DOM and Virtual DOM</strong> is that - Real DOM is the actuall tree-like structure of a web-page, which can be manipulated directly to change the layout or the content on the page. Virtual DOM is a lightweight in-memory representation of the actual DOM, which is used to optimize the performance of updates to the user interface.</p>"
            },
            {
                "name": "2 types of components (class vs function)?",
                "description": "<p>Components are like functions that return HTML elements.<br>They serve the same purpose as JavaScript functions, but work in isolation and return HTML via a render() function.<br>Components come in two types, Class components and Function components</p><table><tr><th>Functional Components</th><th>Class Components</th></tr><tr><td><ul><li>Functional Components mainly focuses on the UI of the application, not on the behavior, hence also known as statless components or presenttional components</li><li>Functional Components are simple functions which recieves props and return declarations</li><li>We Should use function componets as much as possible over the class components becuase of the absence of the <code>this</code> keywork.</li><li>To be more precise these are basically render function in the class component.</li><li>Functional Components can have state and mimic lifecycle events using Reach Hooks</li></ul></td><td><ul><li>Class Components are more feature rich</li><li>They Can maintain their own private data also called as <code>state</code></li><li>They contain mostly the complicated logic and mst importantly they provide lifecycle hooks</li><li>Because of what they are capale of and how they are used they are also called as Stateful or Container Components</li><li>Class-based Components uses ES6 class syntax</li><li>Class components extend from React.Component.</li><li>In here you have to use this keyword to access the props and functions that you declare inside the class components.</li></ul></td></tr></table><br><br><strong>Functional or Stateless Component</strong><br><img src='./assets/react/reactFunctionalComponent.png'><br><br><strong>Class or Statefull Component</strong><br><img src='./assets/react/reactClassComponent.png'><br><br><img src='./assets/react/reactClassComponent1.png'>"
            },
            {
                "name": "Differences between a Class component and Functional component?",
                "description": "<p><strong>Class Components</strong></p><ul><li>Class-based Components uses ES6 class syntax. It can make use of the lifecycle methods.</li><li>Class components extend from React.Component.</li><li>In here you have to use this keyword to access the props and functions that you declare inside the class components.</li></ul><p><strong>Functional Components</strong></p><ul><li>Functional Components are simpler comparing to class-based functions.</li><li>Functional Components mainly focuses on the UI of the application, not on the behavior.</li><li>To be more precise these are basically render function in the class component.</li><li>Functional Components can have state and mimic lifecycle events using Reach Hooks</li></ul>"
            },
            {
                "name": "Do two components using the same Hook share state?",
                "description": "<p>No. Custom Hooks are a mechanism to reuse <strong>stateful logic</strong> (such as setting up a subscription and remembering the current value), but every time you use a custom Hook, all state and effects inside of it are <strong>fully</strong> isolated.</p>"
            },
            {
                "name": "Increase, Optimizing Performance on a React App",
                "description": "<ul> <li><strong>Use React.Fragment to Avoid Adding Extra Nodes to the DOM</strong> - React Fragment, which will not add any additional node to the DOM.<br><img src='./assets/react/fragment.png'><br><br><strong>Short Fragment</strong><br><img src='./assets/react/fragment2.png'></li><li><strong>Use Production Build</strong> - Another way of optimizing a React app is by making sure you bundle your app for production before deploying. By default, your app is in development mode, which means React will include helpful warnings. You can fix this by running npm run build before deploying, which will create a production-ready build of your app in a build/ folder that you can then deploy.</li><li><strong>Use React.Suspense and React.Lazy for Lazy Loading Components</strong> - </li><li><strong>Use React.memo for Component Memoization</strong> - React.memo is a great way of optimizing performance as it helps cache functional components. Here's how it works: When a function is rendered using this technique, it saves the result in memory, and the next time the function with the same arguments is called it returns the saved result without executing the function again, saving you bandwidth. In the context of React, functions are the functional components, and arguments are props</li><li><strong>Virtualize a Large List Using react-window library</strong> - When you want to render an enormous table or list of data, it can significantly slow down your app's performance. react-window helps solve this problem by rendering only the items in the list that are currently visible, which allows for efficiently rendering lists of any size.</li><li><strong>Avoid Inline Function Definition in the Render Function.</strong> - Because such functions aren’t assigned an identifier (via const/let/var), they aren’t persistent whenever a component inevitably gets rendered again. This causes JavaScript to allocate new memory each time this component is re-rendered, instead of allocating a single piece of memory only once</li><li><strong>Dependency optimization</strong> - Let's say you are only using 20 of the 100+ methods, then having all the extra methods in your final bundle is not optimal. So for this, you can remove unused functions.</li><li><strong>Throttling and Debouncing Event Action in JavaScript</strong> - Throttling - means delaying function execution. So instead of executing the event handler/function immediately, you’ll be adding a few milliseconds of delay when an event is triggered. This can be used when implementing infinite scrolling or Another good example of this is Ajax-based instant search. You might not want to hit the server for every key press, so it's better to throttle until the input field is dormant for a few milliseconds <br>Debouncing - is a technique to prevent the event trigger from being fired too often by adding a delay</li><li><strong>Avoid using Index as Key for map</strong> - Because using the key as the index can show your app incorrect data as it is being used to identify DOM elements. When you push or remove an item from the list, if the key is the same as before, React assumes that the DOM element represents the same component. In certain cases, it's completely okay to use the index as the key, but only if below condition holds:<br>1. The list and items are static <br>2. The items in the list don't have IDs and the list is never going to be reordered or filtered <br>3. List is immutable <br></li><li><strong>CSS Animations Instead of JS Animations</strong> - </li><li><strong>Using conditionals or tenaries to make a component disappear</strong> (i.e. to unmount it) is not advisable, because the component made to disappear will cause the browser to repaint and reflow. Instead, we can use CSS’ opacity and visibility properties to hide the component. This way, the component will still be in the DOM but invisible, without any performance cost.</li><li><strong>Immutable Data Structures</strong> - Any data that cannot be changed is immutable. An immutable value or object cannot be changed. So, when there is an update, a new value is created in memory, leaving the old one untouched. We can use immutable data structures and React.PureComponent to automatically check for a complex state change. For example, if the state in your application is immutable, you can actually save all state objects in a single store with a state-management library like Redux, enabling you to easily implement undo and redo functionality.</li></ul>"
            },
            {
                "name": "When to use a Class Component over a Function Component?",
                "description": "<p>If you are writing a presentational component which doesn’t have its own state or needs to access a lifecycle hook, then use functional component as much as possible. For state management, or handling complex Ui logics you can use class component.</p>"
            },
            {
                "name": "How to call loading function with React useEffect only once?",
                "description": "<p>If you only want to run the function given to <code><strong>useEffect</strong></code> after the initial render, you can give it an empty array <code><strong>[]</strong></code> as the second argument. <br><img src='./assets/react/loadOnce.png'></p>"
            },
            {
                "name": "What are Pure components and what is their purpose?",
                "description": "<p>Pure components are components that only re-render if their props or state have changed. They are optimized for performance, and they can improve the performance of your application by reducing the number of unnecessary re-renders. <br><br>Pure components are also known as \"functional components\" or \"stateless components\" and they are defined by a function.</p>"
            },
            {
                "name": "What is a Pure Functionional Component?",
                "description": "<p>A function is said to be pure if:</p><ul><li>Its return value is only determined by its input values </li><li>Its return value is always the same for the same input values</li></ul> <p>A React component is considered pure if it renders the same output for the same state and props.<br><br>With <code>React.memo()</code>, you can create memoized functional components that bail out of rendering on unnecessary updates using shallow comparison of props.</p>"
            },
            {
                "name": "What are Props?",
                "description": "<p>“Props” is a special keyword in React, which stands for properties and is being used for passing data from one component to another. But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)<br><img src='./assets/react/props.png'></p>"
            },
            {
                "name": "What are Portals",
                "description": "<p>React Portal is a kind of way to render child components into a DOM node which is outside of the parent DOM hierarchy defined by the component tree hierarchy. The Portal's most common use cases are when the child components need to visually break out of the parent container as shown below.</p><ul><li>Modal dialog boxes</li><li>Tooltips</li><li>Hovercards</li><li>Loaders</li></ul><br><img src='./assets/react/reactportal.png'><br><br><img src='./assets/react/reactportal1.png'>"
            },
            {
                "name": "Explain “refs” in React?",
                "description": "<p>Refs are generally avoided in React and should be used with precautions. It is because they directly interact with the Real DOM and in React that is not desirable behaviour.<br><br>We can, however, use refs in the following situations.</p><ul><li>Interaction with third party libraries like jQuery.</li><li>Doing animations</li><li>Managing focus when we move to a text box</li></ul><p><img src='./assets/react/useref1.png'><br><img src='./assets/react/useref.png'></p>"
            },
            {
                "name": "What are forwardrefs?",
                "description": "<p>Ref forwarding is a technique for automatically passing a ref through a component to one of its children.<br><br>Managing focus, text selection, or media playback, Incrementing values, Triggering any kind of imperative animations<br><br><img src='./assets/react/forwardref.png'><br><img src='./assets/react/forwardref1.png'></p>"
            },
            {
                "name": "What happens when you call setState?",
                "description": "<p>When you call <code>SetState</code> in React, the object you passed into it will be merged into the current state of the component. This triggers something called <em>reconciliation</em>. Reconciliation aims to update the user interface in the most efficient way possible.<br><br>React does this by constructing a tree of React elements and compare it to the previous element tree. This shows React the exact changes that occurred so React can make updates in the necessary places.</p>"
            },
            {
                "name": "When to use useCallback, useMemo and useEffect?",
                "description": "<ul><li><strong>useEffect</strong> - It's the alternative for the class component lifecycle methods <code>componentDidMount, componentWillUnmount, componentDidUpdate</code>, etc. You can also use it to <strong>create a side effect when dependencies change</strong>, i.e. \"If some variable changes, do this\".</li><li><strong>useCallback</strong> - On every render, everything that's inside a functional component will run again. If a child component has a dependency on a function from the parent component, the child will re-render every time the parent re-renders even if that function \"doesn't change\" (the reference changes, but what the function does won't).<br>It's used for optimization by avoiding unnecessary renders from the child, making the function change the reference only when dependencies change. You should use it when a function is a dependency of a side effect e.g. useEffect.</li><li><strong>useMemo</strong> - It will run on every render, but with cached values. It will only use new values when certain dependencies change. It's used for optimization <strong>when you have expensive computations</strong>.</li></ul>"
            },
            {
                "name": "Difference between useCallback and useMemo in practice",
                "description": "<p>With <code>useCallback</code> you memoize <strong>functions</strong>, <code>useMemo</code> memoizes <strong>any computed value</strong>:<br><img src='./assets/react/memo1.png'><br><br><code>(1)</code> will return a memoized version of <code>fn</code> - same reference across multiple renders, as long as <code>dep</code> is the same. But <em>every time</em> you <em>invoke</em> <code>memoFn</code>, <em>that complex computation starts again</em>.<br><br><code>(2)</code> will invoke <code>fn</code> every time <code>dep</code> changes and remember its <em>returned value</em> (<code>42</code> here), which is then stored in <code>memoFnReturn</code>.</p>"
            },
            {
                "name": "Why do we use array destructuring (square brackets notation) in useState?",
                "description": "<p>When we declare a state variable with useState, it returns a pair — an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.<br><img src='./assets/react/array_destructure.png'></p>"
            },
            {
                "name": "Why should we not update the state directly?",
                "description": "<p>If you try to update the state directly then it won't re-render the component.<br><img src='./assets/react/wrongState.png'><br><br>Instead use setState() method. It schedules an update to a component's state object. When state changes, the component responds by re-rendering.<br><img src='./assets/react/correctState.png'></p>"
            },
            {
                "name": "What is Lifting State Up or Pass data from child to parent component?",
                "description": "<p>When several components need to share the same changing data then it is recommended to lifting the shared state up to their closest common ancestor. For example, if two child components sharing the same data from its parent then move the state to parent instead of maintaining the local state inn both child components.<br><img src='./assets/react/lifting.png'></p>"
            },
            {
                "name": "What will happen if you use setState() in constructor?",
                "description": "<p>When you use <code>setState()</code>, then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: <em>Can only update a mounted or mounting component.</em> So we need to use <code>this.state</code> to initialize variables inside constructor.</p>"
            },
            {
                "name": "Is it good to use setState() in componentWillMount() method?",
                "description": "<p>Yes, it is safe to use <code>setState()</code> inside <code>componentWillMount()</code> method. But at the same it is recommended to avoid async initialization in <code>componentWillMount()</code> lifecycle method. <code>componentWillMount()</code> is invoked immediately before mounting occurs. It is called before <code>render()</code>, therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in <code>componentDidMount()</code> instead of <code>componentWillMount()</code>.<br><img src='./assets/react/stateinmount.png'></p>"
            },
            {
                "name": "How to use componentWillMount() in React Hooks?",
                "description": "<p>You cannot use any of the existing lifecycle methods (<code>componentDidMount</code>, <code>componentDidUpdate</code>, <code>componentWillUnmount</code> etc.) in a hook. They can only be used in class components. And with Hooks you can only use in functional components.</p>"
            },
            {
                "name": "What will happen if you use props in initial state?",
                "description": "<p>If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.<br><img src='./assets/react/propsinitialstate.png'><br><img src='./assets/react/propsinitialstate1.png'></p>"
            },
            {
                "name": "What happens when you call setstate() inside render() method",
                "description": "<p>You can not set state inside render function because it will cause side effect. <br><br>What exactly happens is that each time you update state react calls render function, so if you will update state inside render function then it will stuck inside infinite loop.<br><br>In general, this should never happen; you should not be doing anything remotely related to modifying any component's state within a render function.</p>"
            },
            {
                "name": "Why do we need to pass a function to setState()?",
                "description": "<p>We need to pass a function to setState() instead of an object because setState() is asynchronous, it batches multiple calls together and it only updates the component once. By passing a function, we ensure that the latest state is used when the component re-renders.</p>"
            },
            {
                "name": "What is the purpose of the callback function as an argument of setState()?",
                "description": "<p>The callback function is invoked when setState finished and the component gets rendered. Since setState is asynchronous the callback function is used for any post action. It is recommended to use the lifecycle method rather than this callback function.<br><br>The setState callback is used to carry out operations in a React component after calling setState, like creating an AJAX request or throwing an error.<br><br>As a result, you can encounter situations where parts of your code execute before the state has had an opportunity to update.<br><br>This concludes the purpose of using callBack With setState in React</p>"
            },
            {
                "name": "Does React useState Hook update immediately?  ",
                "description": "<p>React <code>useState</code> and <code>setState</code> don’t make changes directly to the state object; they create queues to optimize performance, which is why the changes don't update immediately. The process to update React state is asynchronous for performance reasons.<br><br>To perform side effects after state has change, you must use the <code>useEffect</code></p>"
            },
            {
                "name": "How do I update state on a nested object with useState()?",
                "description": " <p><strong>Problem</strong> I have a component that receives a prop that looks like this:<br><img src='./assets/react/nestedusestate1.png'><br><br>How to update only the <code>align</code> property?</p><strong>Answer</strong><p>You need to use spread syntax. Also while trying to update current state based on previous, use the <code>callback</code> pattern os <code>setState</code>:<br><img src='./assets/react/nestedusestate.png'></p>"
            },
            {
                "name": "Write an inline style / css in React?",
                "description": "<p>To style an element with the inline style attribute, the value must be a JavaScript object: Note: In JSX, JavaScript expressions are written inside curly braces, and since JavaScript objects also use curly braces, the styling is written inside two sets of curly braces {{}}<br><br><strong>camelCased Property Names</strong> - properties with two names, like background-color, must be written with camel case syntax such as backgroundColor <br><br><img src='./assets/react/inlineCSS.png'></p>"
            },
            {
                "name": "Combine multiple inline style / css objects?",
                "description": "<p>You can use spread operator in regular React: <br><img src='./assets/react/inlinecombinestylereact.png'><br><br>If you're using React Native then you can use the array notation:<br><img src='./assets/react/inlinecombinestylereactnative.png'> </p>"
            },
            {
                "name": "Apply vendor prefixes to inline styles in React?",
                "description": "<p>React does not apply vendor prefixes automatically. You need to add vendor prefixes manually.<br><img src='./assets/react/reactinlinestylevendorprefix.png'></p>"
            },
            {
                "name": "What is wrong with that code? setState",
                "description": "<p><strong>Problem</strong><br><img src='./assets/react/problem.png'><br><br><strong>Answer</strong> - Because <code>this.props</code> and <code>this.state</code> may be updated asynchronously, you should not rely on their values for calculating the next state. To fix it, use a second form of <code>setState()</code> that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:<br><img src='./assets/react/answer.png'></p>"
            },
            {
                "name": "What is prop drilling/digging and how can you avoid it?",
                "description": "<p>Prop drilling is the act of <strong>passing props through multiple layers of components</strong><br><br>When building a React application, there is often the need for a deeply nested component to use data provided by another component that is much higher in the hierarchy. The simplest approach is to simply pass a prop from each component to the next in the hierarchy from the source component to the deeply nested component. This is called <strong>prop drilling</strong>.<br><br>The primary disadvantage of prop drilling is that components that should not otherwise be aware of the data become unnecessarily complicated and are harder to maintain.<br><br>To avoid prop drilling, a common approach is to use React context. This allows a <code>Provider</code> component that supplies data to be defined, and allows nested components to consume context data via either a <code>Consumer</code> component or a <code>useContext</code> hook.</p>"
            },
            {
                "name": "What is StrictMode",
                "description": "<p>React's <code>StrictMode</code> help you write better react components, you can wrap a set of components within <code>&lt;StrictMode /&gt;</code> and it'll basically:</p><ul><li>Verify that the components inside are following some of the recommended practices and warn you if not in the console.</li><li>Verify the deprecated methods are not being used, and if they're used strict mode will warn you in the console.</li><li>Help you prevent some side effects by identifying potential risks.</li></ul><br><p>I've found it especially useful to implement strict mode when I'm working on new code bases and I want to see what kind of code/components I'm facing. Also if you're on bug hunting mode, sometimes it's a good idea to wrap with <StrictMode /> the components/blocks of code you think might be the source of the problem.</p>"
            },
            {
                "name": "When would you use StrictMode component in React?",
                "description": "<ul><li>Its especially useful to implement strict mode when you are working on new code bases</li><li>Its also when you are into debugging mode when you think the components/blocks of code you think might be the source of the problem.</li></ul>"
            },
            {
                "name": "Why do class methods need to be bound to a class instance?",
                "description": "<p>In JavaScript, the value of <code>this</code> changes depending on the current context. Within React class component methods, developers normally expect this to refer to the current instance of a component, so it is necessary to <em>bind</em> these methods to the instance. Normally this is done in the constructor—for example:<br><br><img src='./assets/react/classmethod.png'></p>"
            },
            {
                "name": "How to apply validation on PropTypes in ReactJS?",
                "description": "<p>JavaScript is a loosely-bound language, which causes many errors in code. So, we should implement type-check, for different props been passed from Parent to Child component. Earlier it used to be a part of React library but since React v15.5, it has moved as a separate library. So, we need to npm install it and then import it by-<br><br> <strong>import PropTypes from ‘prop-types’;</strong> <br><br>The set of predefined prop types are below</p><ol> <li>String - <code>React.PropTypes.string</code></li><li>Number - <code>React.PropTypes.number</code></li><li>Function - <code>React.PropTypes.func</code></li><li>ArrayOf - <code>React.PropTypes.arrayOf(PropTypes.number)</code></li><li>ArrayOfObject - <code>React.PropTypes.arrayOf(PropTypes.shape({Object1: PropTypes.string, Object2: PropTypes.number}))</code></li><li>Boolean<code>React.PropTypes.bool</code></li><li>Custom(strOrNumber)<code>PropTypes.oneOfType([PropTypes.string, PropTypes.number]),</code></li></ol> <p>For example, we define propTypes for user component as below,<br><br><img src='./assets/react/proptypes.png'><br><br><img src='./assets/react/proptypes1.png'></p>"
            },
            {
                "name": "How would you go about checking/investigating slow React application rendering?",
                "description": "<p>One of the most common issues in React applications is when components <em>re-render unnecessarily</em>. There are two tools provided by React that are helpful in these situations:</p><ul><li><code>React.memo()</code>: This prevents unnecessary re-rendering of function components</li><li><code>PureComponent</code>: This prevents unnecessary re-rendering of class components</li></ul><p>Both of these tools rely on a shallow comparison of the props passed into the component—if the props have not changed, then the component will not re-render. While both tools are very useful, the shallow comparison brings with it an additional performance penalty, so both can have a negative performance impact if used incorrectly. By using the React Profiler, performance can be measured before and after using these tools to ensure that performance is actually improved by making a given change.</p>"
            },
            {
                "name": "Explain why and when would you use useMemo()?",
                "description": "<p><strong>Why:</strong><br><br>In the lifecycle of a component, React re-renders the component when an update is made. When React checks for any changes in a component, it may detect an unintended or unexpected change due to how JavaScript handles equality and shallow comparisons. This change in the React application will cause it to re-render unnecessarily.<br><br>Additionally, if that re-rendering is an expensive operation, like a long <code>for loop</code>, it can hurt performance. Expensive operations can be costly in either time, memory, or processing.<br><br><strong>When:</strong><br><br>Optimal if the wrapped function is large and expensive.<br><br><strong>How: </strong><br><br><em>Memoization</em> is an optimization technique which passes a complex function to be memoized. In memoization, the result is “remembered” when the same parameters are passed-in subsequently. <br><br><img src='./assets/react/memo.png'><br><br><code>useMemo</code> takes in a function and an array of dependencies. The dependency's list are the elements <code>useMemo</code> watches: if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they don’t change, it doesn’t matter if our entire component re-renders, the function won’t re-run but instead return the stored result.</p>"
            },
            {
                "name": "When is it important to pass props to super(), and why?",
                "description": "<p>The only one reason when one needs to pass props to <code>super()</code> is when you want to access <code>this.props</code> in constructor:<br><br><img src='./assets/react/propspassing.png'><br><br>Not Passing<br><br><img src='./assets/react/propsnotpassing.png'><br><br>Note that passing or not passing props to super has no effect on later uses of this.props outside constructor.</p>"
            },
            {
                "name": "How does React renderer work exactly when we call setState?",
                "description": "<p>There are two steps of what we may call <code>render</code>:</p><ol><li><p>Virtual DOM render: when <code>render</code> method is called it returns a new <em>virtual dom</em> structure of the component. This <code>render</code> method is called always when you call <code>setState()</code>, because <code>shouldComponentUpdate</code> always returns true by default. So, by default, there is no optimisation here in React.</p></li><li><p>Native DOM render: React changes real DOM nodes in your browser only if they were changed in the Virtual DOM and as little as needed - this is that great React's feature which optimizes real DOM mutation and makes React fast.</p></li></ol>"
            },
            {
                "name": "Does React re-render all components and sub components every time setState is called?",
                "description": "<p>By default - <strong>yes</strong>.<br><br>There is a method boolean <code>shouldComponentUpdate(object nextProps, object nextState)</code>, each component has this method and it's responsible to determine \"should component update (run render function)?\" every time you change state or pass new props from parent component.<br><br>You can write your own implementation of <code>shouldComponentUpdate</code> method for your component, but default implementation always returns true - meaning always re-run render function.</p>"
            },
            {
                "name": "What is DOM?",
                "description": "<p>DOM stands for Document Object Model.<br><br>When the browser tries to render a HTML document, it creates an object based on the HTML document called DOM. Using this DOM, we can manipulate or change various elements inside the HTML document.<br><br><img src='./assets/js/dom1.png'></p>"
            },
            {
                "name": "What is Shadow DOM",
                "description": "<p>Shadow DOM is a tool used to build component-based apps and websites. Shadow DOM comes in small pieces, and it doesn't represent the whole Document Object Model. We can see it as a subtree or as a separate DOM for an element. Shadow DOM can be imaged like bricks from which the DOM is created.</p>"
            },
            {
                "name": "What is Virtual DOM",
                "description": "<p>Virtual DOM is a concept of DOM used by React.js. In Virtual DOM concept copy of DOM is saved in the memory and while any change is done in the DOM, it's compared to find differences. Then browser knows which elements were changed and can update only those part of the application to avoid re-rendering all the DOM. It's done to improve the performance of the UI libraries.</p>"
            },
            {
                "name": "Explain the Virtual DOM concept in React?",
                "description": "<p>In Short Answer - Virtual Dom works by comparing the current virtual DOM tree with a new Virtual DOM tree, and then applying the minimal set of changes to the actual DOM. This helps React to efficiently update the user interface without causing unnecessary re-renders or layout changes.</p><br><br><p><strong>In Deplt Explanation</strong></p><ul><li><strong>Virtual DOM is actually an in-memory representation / copy of Real DOM.</strong></li><li>Whenever <strong>setState()</strong> method is called, ReactJS creates the whole <strong>Virtual DOM from scratch.</strong></li><li>At a given time, ReactJS maintains two virtual DOM, one with the updated state Virtual DOM and the other with the previous state Virtual DOM.</li><li>Here, ReactJS compare both of the Virtual DOM to find the minimum set of changes necessary to update the Real DOM.</li><li>After that, it updates the Real DOM, whenever it's best to update it.</li></ul>"
            },
            {
                "name": "How to access DOM elements in React?",
                "description": "<p>useRef() hook is to access DOM elements. This is performed in 3 steps:</p><ol><li>Define the reference to access the element const elementRef = useRef();</li><li>Assign the reference to ref attribute of the element: <code><div ref={elementRef}></div></code></li><li>After mounting, elementRef.current points to the DOM element.</li></ol><p><img src='./assets/react/useref1.png'></p>"
            },
            {
                "name": "What is the use of react dom package?",
                "description": "<p>The <strong>react-dom</strong> package provides <em>DOM-specific methods</em> that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:</p><ol><li><strong>render()</strong></li><li><strong>hydrate()</strong></li><li><strong>unmountComponentAtNode()</strong></li><li><strong>findDOMNode()</strong></li><li><strong>createPortal()</strong></li></ol>"
            },
            {
                "name": "What is reselect and how it works?",
                "description": "<p><strong>Reselect</strong> is a selector library (for Redux) which works on memoization concept. Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect return the cached saved output. It's memoization and cache are fully customizable.</p>"
            },
            {
                "name": "What would be the common mistake of function being called every time the component renders?",
                "description": "<p>You need to make sure that function is not being called while passing the function as a parameter.<br><br><img src='./assets/react/componentmistake.png'><br><br>Instead, pass the function itself without parenthesis:<br><br><img src='./assets/react/componentmistake1.png'></p>"
            },
            {
                "name": "What does \"shouldComponentUpdate\" do and why is it important?",
                "description": "<p>It's used for performance reasons, for example if the implementor of a component knows for sure that a particular property change does not necessitate a re-render, they could return false from this method and skip the re-render.<br><br>What <code>shouldComponentUpdate</code> does is it's a lifecycle method that allows us to opt out of <em>setState</em> reconciliation process for certain components (and their child components). If we know that a certain section of our UI isn’t going to change, there's no reason to have React go through the trouble of trying to figure out if it should. By returning false from <code>shouldComponentUpdate</code>, React will assume that the current component, and all its child components, will stay the same as they currently are.</p>"
            },
            {
                "name": "What is children prop?",
                "description": "<p>Children is a prop (this.prop.children) that allow you to pass components as data to other components, just like any other prop you use.<br><br>You can use props.children on components that represent ‘generic boxes’ and that don’t know their children ahead of time. It is used to display whatever you include between the opening and closing tags when invoking a component.</p>"
            },
            {
                "name": "What is {this.props.children} and when you should use it?",
                "description": "<p>It is used to display whatever you include between the opening and closing tags when invoking a component</p>"
            },
            {
                "name": "What are Fragments?",
                "description": "<ul><li>How to return multiple components without wrapping using div, HOC or Fragment</li><li>Fragments help you return a list of items without adding extra nodes to the DOM.</li><li>Return as an Array. This is introduced since React 16</li></ul><p><img src='./assets/react/fragmentarray.png'><br><br><img src='./assets/react/fragment1.png'><br><br>There is also a shorter syntax:<br><br><img src='./assets/react/fragment2.png'></p>"
            },
            {
                "name": "Why fragments are better than container divs?",
                "description": "<p>Below are the reasons why fragments recommended:</p><ol><li>Fragments bit faster and has less memory usage by without creating an extra DOM node. This only has a real benefit on very large and deep trees.</li><li>Some CSS mechanisms like Flexbox and CSS Grid have a special parent-child relationship, and adding divs in the middle makes it hard to keep the desired layout.</li><li>The DOM inspector is less cluttered</li></ol>"
            },
            {
                "name": "What is Reconciliation / Why is a component constructor called only once?",
                "description": "<p>When a component's props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called <strong>reconciliation</strong>.</p>"
            },
            {
                "name": "What are React Components / components based architecture",
                "description": "<p>In React, everything is a component. A component is a small, reusable piece of code that represents a part of a user interface. <br><br>Components can be defined as either a class or a function anc can include a combination of HTML, CSS, and Javascript code. These components can alse be nested or reused throughout the application, which makes it easy to manage and maintain the application's user interface.<br><br><br>The <strong>Component based architecture of React</strong> allows developers to build complex user interface by breaking them down into smaller, reusable components. Then Each components can manage its own state and props, and can be easily reused throughout the application. This makes easy to understand, test and maintain the application codebase.</p>"
            },
            {
                "name": "Where in a React component should you make an AJAX request?",
                "description": "<p><code>componentDidMount</code> is where an AJAX request should be made in a React component. <br><br>This method will be executed when the component “mounts” (is added to the DOM) for the first time. This method is only executed once during the component's life. Importantly, you can’t guarantee the AJAX request will have resolved before the component mounts. If it doesn't, that would mean that you’d be trying to setState on an unmounted component, which would not work. Making your AJAX request in <code>componentDidMount</code> will guarantee that there's a component to update.</p>"
            },
            {
                "name": "Axios vs Fetch",
                "description": "<ol> <li><strong>Request URL</strong> <ul> <li><strong>Axios</strong> — has url in request object<p><img src='./assets/react/axiosurl.png'></p></li><li><strong>Fetch</strong> — has no url in request object<p><img src='./assets/react/fetchurl.png'></p></li></ul> </li><li><strong>Package</strong> <ul> <li><strong>Axios</strong> — third-party package that you need to install manually.</li><li><strong>Fetch</strong> — is in-build into most of the browser, no more need of installation.</li></ul> </li><li><strong>CSRF Protection</strong> <ul> <li><strong>Axios</strong> — having in-build support of CSRF (Cross site request forgery) to prevent cross-site request.</li><li><strong>Fetch</strong> — doesn’t support CSRF</li></ul> </li><li><strong>Request Data</strong> <ul> <li><strong>Axios</strong> — For Requesting data axios uses the data property which contain object, you can directly sent JSON Object in request data<p><img src='./assets/react/axiosobject.png'></p></li><li><strong>Fetch</strong> — For requesting data fetch uses the body property, which should be in string and not any object<p><img src='./assets/react/fetchobject.png'></p></li></ul> </li><li><strong>Response Parsing</strong> <ul> <li><strong>Axios</strong> — in-built transform response to JSON for developers<p><img src='./assets/react/axiosres.png'></p></li><li><strong>Fetch</strong> — has two step process, first response convert to json and then in second process developer will get json response<p><img src='./assets/react/fetchres.png'></p></li></ul> </li><li><strong>Response status</strong> <ul> <li><strong>Axios</strong> — request is ok when status is 200 and statusText is ‘OK’.</li><li><strong>Fetch</strong> — request is ok when response object contains the ok property.</li></ul> </li><li><strong>Cancel Request</strong> <ul> <li><strong>Axios</strong> — In case user left the screen/component, axios allow developers to Cancel request<p><img src='./assets/react/axioscancle.png'></p></li><li><strong>Fetch</strong> — doesn’t support Cancel API request</li></ul> </li><li><strong>Request Interceptor</strong> <ul> <li><strong>Axios</strong> — having in-build feature of intercept HTTP Request</li><li><strong>Fetch</strong> — Doesn’t provide a way to intercept http requests.</li></ul> </li><li><strong>Upload/Download Request Progress</strong> <ul> <li><strong>Axios</strong> — Support developers to provide data transmission progress so developers can show loading indicator while user communicating with server</li><li><strong>Fetch</strong> — Doesn’t support Upload/Download progress</li></ul> </li><li><strong>Browser Support</strong> <ul> <li><strong>Axios</strong> — have wide browser capability support</li><li><strong>Fetch</strong> — only support limited browsers & version , like Chrome 42+, Firefox 39+, Edge 14+, Safari 10.1.</li></ul> </li></ol>"
            },
            {
                "name": "How to fetch data with React Hooks?",
                "description": "<p>You can use the <strong>useEffect</strong> hook to fetch data in a React functional component. The <strong>useEffect</strong> hook allows you to run a side effect, such as fetching data, after the component has rendered. You can also use <strong>useState</strong> to store the fetched data and update the component when the data is available.</p>"
            },
            {
                "name": "Write a small piece of code to render a button.",
                "description": "<p><img src='./assets/react/render.png'></p>"
            },
            {
                "name": "What is the output of the following code",
                "description": "<p><img src='./assets/react/output.png'><br><br>This will render 0 to the browser.</p><ul><li>When using conditional rendering using logical &amp;&amp; operator 0 is evaluated as number and will be rendered by the browser</li><li>How we can avoid rendering 0 in the above case.</li></ul><p>We need to make the 0 a Boolean by adding !. Code is given below<br><br><img src='./assets/react/output1.png'></p>"
            },
            {
                "name": "How react router works",
                "description": "<p>React router is a commonly used module for routing in React applications.<br><br>React router component listens to history changes in React applications. It has a URL mapping to components in it. It renders the corresponding component when a match is found.<br><br>Link component is used to navigate around in your application.<br><br><strong>Code sample below</strong><br><br><img src='./assets/react/reactrouter.png'></p>"
            },
            {
                "name": "How React Router is different from history library?",
                "description": "<p>React Router is a wrapper around the <code>history</code> library which handles interaction with the browser's <code>window.history</code> with its browser and hash histories. It also provides memory history which is useful for environments that don't have global history, such as mobile app development (React Native) and unit testing with Node.</p>"
            },
            {
                "name": "What are the &lt;Router&gt; components of React Router v4",
                "description": "<p>React Router v4 provides below 3 <code>&lt;Router&gt;</code> components:</p><ol><li><code>&lt;BrowserRouter&gt;</code></li><li><code>&lt;HashRouter&gt;</code></li><li><code>&lt;MemoryRouter&gt;</code></li></ol><p>The above components will create <em>browser</em>, <em>hash</em>, and <em>memory</em> history instances. React Router v4 makes the properties and methods of the <code>history</code> instance associated with your router available through the context in the <code>router</code> object.</p>"
            },
            {
                "name": "How do you programmatically navigate using React Router v4",
                "description": "<p><strong>#1. Using the <code>withRouter()</code> higher-order function:</strong> - The <code>withRouter()</code> higher-order function will inject the history object as a prop of the component. This object provides <code>push()</code> and <code>replace()</code> methods to avoid the usage of context.</br><img src='./assets/react/withRoute.png'><br><br><strong>#2. Using <code>&lt;Route&gt;</code> component and render props pattern:</strong> - The <code>&lt;Route&gt;</code> component passes the same props as <code>withRouter()</code>, so you will be able to access the history methods through the history prop.<br><img src='./assets/react/route.png'><br><br><strong>#3. Using context:</strong> - This option is not recommended and treated as unstable API.<br><img src='./assets/react/routeContext.png'></p>"
            },
            {
                "name": "Why you get \"Router may have only one child element\" warning?",
                "description": "<p>You have to wrap your Route's in a <code>&lt;Switch&gt;</code> block because <code>&lt;Switch&gt;</code> is unique in that it renders a route exclusively.<br><br>At first you need to add <code>Switch</code> to your imports:<br><img src='./assets/react/importSwitch.png'><br><br>Then define the routes within <code>&lt;Switch&gt;</code> block:<br><img src='./assets/react/route1.png'></p>"
            },
            {
                "name": "How to pass params to history.push method in React Router v4?",
                "description": "<p>While navigating you can pass props to the <code>history</code> object:<br><img src='./assets/react/historypush.png'><br><br>The <code>search</code> property is used to pass query params in <code>push()</code> method.</p>"
            },
            {
                "name": "How to implement default or NotFound page?",
                "description": "<p>A <code>&lt;Switch&gt;</code> renders the first child <code>&lt;Route&gt;</code> that matches. A <code>&lt;Route&gt;</code> with no path always matches. So you just need to simply drop path attribute as below<br><img src='./assets/react/notfound.png'></p>"
            },
            {
                "name": "How to perform automatic redirect after login?",
                "description": "<p>The <code>react-router</code> package provides <code>&lt;Redirect&gt;</code> component in React Router. Rendering a <code>&lt;Redirect&gt;</code> will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.<br><img src='./assets/react/autoredirect.png'></p>"
            },
            {
                "name": "What all ways data can be passed between react components",
                "description": "<ul><li>Parent to child – props, context</li><li>Child to parent – states, callbacks</li><li>Siblings – callback, props, context</li></ul>"
            },
            {
                "name": "Write a program to pass values to child using context.",
                "description": "<p><img src='./assets/react/context.png'><br><br><img src='./assets/react/contextexplain.png'><br><br><img src='./assets/react/contextexplain1.png'><br><br><img src='./assets/react/contextexplain2.png'></p>"
            },
            {
                "name": "Are you familiar with Flux in the context of React?",
                "description": "<p><strong>Flux</strong> is an architectural pattern that enforces unidirectional data flow —&nbsp;its core purpose is to control derived data so that multiple components can interact with that data without risking pollution.<br><br>The Flux pattern is generic; it’s not specific to React applications, nor is it required to build a React app. However, Flux is commonly used by React developers because React components are declarative —&nbsp;the rendered UI (View) is simply a function of state (Store data).<br><img src='./assets/react/flux.png'><br><br>In the Flux pattern, the <em>Store</em> is the central authority for all data; any mutations to the data must occur within the store. Changes to the Store data are subsequently broadcast to subscribing Views via events. Views then update themselves based on the new state of received data.<br><br>To request changes to any Store data, <em>Actions</em> may be fired. These Actions are controlled by a central <em>Dispatcher</em>; Actions may not occur simultaneously, ensuring that a Store only mutates data once per Action.<br><br>The strict unidirectional flow of this Flux pattern enforces data stability, reducing data-related runtime errors throughout an application.</p>"
            },
            {
                "name": "What are keys and its significance in Listing",
                "description": "<p>Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity<br><br>The best way to pick a key is to use a string that uniquely identifies a list item among its siblings</p><ul><li><strong>Item Id as key</strong> - So using the item id as the key will mean that the component for that item will not be destroyed and re-created. If you add a new item to the list it will create a new component, and if you remove an item it will destroy the old one, but if you update an item without change its ID, the component will just update.</li><li><strong>Item Index as key</strong> - There can be issues with using index as key but not always. If we are not adding /removing items from list then it is fine to use index as keys else it will be good to use some id which uniquely identifies the item. Reason is if you add or remove some items from the list, indexes change for older items and react can get confused which items are changed.</li></ul>"
            },
            {
                "name": "What are the different phases of ReactJS component lifecycle?",
                "description": "<p>There are four different phases of React component's lifecycle:</p><ol><li><strong>Initialization:</strong> In this phase react component prepares setting up the initial state and default props.</li><li><strong>Mounting:</strong> The react component is ready to mount in the browser DOM. This phase covers <strong>componentWillMount</strong> and <strong>componentDidMount</strong> lifecycle methods.</li><li><strong>Updating:</strong> In this phase, the component get updated in two ways, sending the new props and updating the state. This phase covers <strong>shouldComponentUpdate, componentWillUpdate and componentDidUpdate</strong> lifecycle methods.</li><li><strong>Unmounting:</strong> In this last phase, the component is not needed and get unmounted from the browser DOM. This phase include <strong>componentWillUnmount</strong> lifecycle method.</li></ol><p><img src='./assets/react/reactphases.png'></p><ul><li><strong><code>componentWillMount</code></strong>- this is most commonly used for App configuration in your root component. </li><li><strong><code>componentDidMount</code></strong> - here you want to do all the setup you couldn’t do without a DOM, and start getting all the data you need. Also if you want to set up eventListeners etc. this lifecycle hook is a good place to do that.</li><li><strong><code>componentWillReceiveProps</code></strong> - this lifecyclye acts on particular prop changes to trigger state transitions.</li><li><strong><code>shouldComponentUpdate</code></strong> - if you’re worried about wasted renders <code>shouldComponentUpdate</code> is a great place to improve performance as it allows you to prevent a rerender if component receives new <code>prop</code>. <code>shouldComponentUpdate</code> should always return a boolean and based on what this is will determine if the component is rerendered or not.</li><li><strong><code>componentWillUpdate</code></strong> - rarely used. It can be used instead of <code>componentWillReceiveProps</code> on a component that also has <code>shouldComponentUpdate</code> (but no access to previous props).</li><li><strong><code>componentDidUpdate</code></strong> - also commonly used to update the DOM in response to prop or state changes.</li><li><strong><code>componentWillUnmount</code></strong> - here you can cancel any outgoing network requests, or remove all event listeners associated with the component.</li></ul>"
            },
            {
                "name": "Name the different lifecycle methods for a class components",
                "description": "<ul><li><strong><code>componentWillMount</code></strong>- this is most commonly used for App configuration in your root component. </li><li><strong><code>componentDidMount</code></strong> - here you want to do all the setup you couldn’t do without a DOM, and start getting all the data you need. Also if you want to set up eventListeners etc. this lifecycle hook is a good place to do that.</li><li><strong><code>componentWillReceiveProps</code></strong> - this lifecyclye acts on particular prop changes to trigger state transitions.</li><li><strong><code>shouldComponentUpdate</code></strong> - if you’re worried about wasted renders <code>shouldComponentUpdate</code> is a great place to improve performance as it allows you to prevent a rerender if component receives new <code>prop</code>. <code>shouldComponentUpdate</code> should always return a boolean and based on what this is will determine if the component is rerendered or not.</li><li><strong><code>componentWillUpdate</code></strong> - rarely used. It can be used instead of <code>componentWillReceiveProps</code> on a component that also has <code>shouldComponentUpdate</code> (but no access to previous props).</li><li><strong><code>componentDidUpdate</code></strong> - also commonly used to update the DOM in response to prop or state changes.</li><li><strong><code>componentWillUnmount</code></strong> - here you can cancel any outgoing network requests, or remove all event listeners associated with the component.</li></ul><p><img src='./assets/react/classLifeCycle.png'></p>"
            },
            {
                "name": "How to pass a parameter to an event handler or callback?",
                "description": "<p>If you want to pass a parameter to the click event handler you need to make use of the arrow function or bind the function. If you pass the argument directly the onClick function would be called automatically even before pressing the button. <br><img src='./assets/react/parameter.png'><br><br>we will use <strong>Bind Method</strong> that is also used to pass the parameters in functions of class-based components. <br><img src='./assets/react/parameterBind.png'></p>"
            },
            {
                "name": "What are Pure Class components in React",
                "description": "<p>React.PureComponent is one of the most significant ways to optimize React applications that is easy and fast to implement. The usage of React.PureComponent gives a considerable increase in performance because it reduces the number of render operation in the application.<br><br>By default, a plain React.Component has shouldComponentUpdate set to always return true.<br>One way to deal with these extra re-renders is to change the shouldComponentUpdate function to check when your component needs to update<br><br>A common pitfall when converting from Component to PureComponent is to forget that the children need to re-render too. As with all React - if the parent doesn’t re-render the children won’t either. So if you have a PureComponent with children, those children can only update if the parent's state or props are shallowly different (causing the parent to re-render).<br>You can only have a PureComponent parent if you know none of the children should re-render if the parent doesn’t re-render.<br>If your React component's render function renders the same result given the same props and state, you can use React.PureComponent for a performance boost in some cases.<br><br>Code sample below<br><br>When we extend XYZ component from React.Component the render function will be called each time you if you click the button.<br><br>Instead if you extend the XYZ component from React.PureComponent the render function will be called only once. That means it calls render when the prop Is shallowly different</p>"
            },
            {
                "name": "Why API calls are to be made from componentDidMount and not in constructor/componentWillMount",
                "description": "<p>This is recommended to avoid side effects. Render method will get called immediately after the componentWillMount and no way we can make the render method wait until the API has returned.<br><br>Constructor is a place where we define the variables and not make any API calls. API calls can have side effects and should not be used inside constructor<br><br>React expects state to be available as render function will be called next after componentWillMount &nbsp;and code can break if any mentioned state variable is missing which may occur in case of ajax API calls<br><br>One more reason is If we are doing server-side rendering of React components&nbsp;componentWillMount&nbsp;will get called on the server-side and again on the client, resulting in calling fetch two times. Hence, this is not definitely the place where we should integrate our APIs.<br><br>NOTE: A side effect is any application state change that is observable outside the called function other than its return value. Eg: modifying a global variable</p>"
            },
            {
                "name": "Explain the initial cycle in React which happens during the first render?",
                "description": "<p>When a React App loads for the first time, the code is run in the mentioned order. All the below-mentioned methods run only one time except “render()”, which can be run many times depending on setState and Parent component bee called.<br><br>1) The “constructor()” is the first thing to be called. You can set the initial state here like below.<br><br><br>2) Then the “componentWillMount()” will be called. It is very similar to the constructor and called only once before the initial mounting of DOM. That is the reason, it doesn’t have access to the DOM. &nbsp;ReactJS documentation recommends us to use constructor instead of this lifecycle method and it will be soon deprecated.<br><br>3) Then the initial “render()” will be called. It will also render all the child components(if any) of this component. Also, note that render is generally called many times. Whenever we use setState, the component render is called.<br><br>4) Then the function “componentDidMount()” will be called. This function will also be called once during the whole life-cycle. It is a great place to do AJAX call to the server to fetch some data. You can also initialize something that requires interaction with the DOM, like a jQuery library.<br><br><img src='./assets/react/lifecyclereact.png'></p>"
            },
            {
                "name": "Explain lifecycle of component re-rendering due to re-rendering of parent component?",
                "description": "<p>The “shouldComponentUpdate()” lifecycle method is an method, by which we can decide whether to render a component or not. It is mainly used to increase the performance of poor performing components.<br><br>If we return false, it means React will not execute the lifecycle methods - componentWillUpdate() and componentDidUpdate() and also the render()<br><br>If it is not used in the project, then React internally gives the default value of true to it.</p><ul><li>The next to execute is the lifecycle method “componentWillUpdate()”. This method is called before the render(), but not during the initial first render.</li><li>Next, the render() of the component is called and with it, all child components(if any) will be called.</li><li>Lastly the “componentDidUpdate()” lifecycle method will be called. This method is called after the render(). It is a good place to work with any third party library requiring access to the DOM, like a jQuery plugin.</li></ul><p><img src='./assets/react/shouldcomponentupdate.jpg'></p>"
            },
            {
                "name": "Explain the new lifecycle methods in React 16.3?",
                "description": "<p>There are two new lifecycle methods introduced in <em>React 16.3</em>. Their main task is replacing the old error-prone lifecycle methods like componentWillUpdate and componentWillReceiveProps. You can still use these old lifecycle methods in your project but only till React 17 is released. These old lifecycle methods are now called - UNSAFE_componentWillUpdate and UNSAFE_componentWillReceiveProps.<br><br><strong>static getDerivedStateFromProps(nextProps, prevState)</strong><br>This lifecycle method is invoked before calling render(), both on the initial mount and subsequent mounts. It's main job is replacing <em>componentWillReceiveProps which is now called&nbsp;</em>UNSAFE_componentWillReceiveProps<em>.</em><br><br><strong>getSnapshotBeforeUpdate(prevProps, prevState)</strong><br>This lifecycle method is called right before the changes from VDOM are to be committed to the Real DOM. It enables your component to capture some information from the DOM like mouse position before it is changed. The returned value by this lifecycle will be passed as a parameter to <em>componentDidUpdate().</em><br><br>So, the new order of mounting is -</p><ul><li>constructor()</li><li>static getDerivedStateFromProps()</li><li>render()</li><li>componentDidMount()</li></ul><p>The order of update caused by changes in any props or state is -</p><ul><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidUpdate()</li></ul>"
            },
            {
                "name": "What are Higher-Order components - HOC?",
                "description": "<p>A higher-order component (HOC) is a function that takes a component and returns a new component. Basically, it's a pattern that is derived from React's compositional nature We call them as “pure’ components” because they can accept any dynamically provided child component but they won’t modify or copy any behavior from their input components.<br><br>HOC can be used for many use cases as below,</p><ol><li>Code reuse, logic and bootstrap abstraction</li><li>Render High jacking</li><li>State abstraction and manipulation</li><li>Props manipulation</li></ol><p>Best Example is <code>React.memo</code></p>"
            },
            {
                "name": "How to pass data between sibling components using React router?",
                "description": "<p>We can pass data between React sibling components using React Router using <code>history.push</code> and <code>match.params</code> / <code>useParams</code> hook<br><br>We have a Parent component App.js. We have two Child Components HomePage and AboutPage. Everything is inside a Router from React-router Route. We also have a route for /about/{params}. This is where we will pass the data.<br><br><img src='./assets/react/reactrouter1.png'><br><br>The HomePage is a simple functional component, which have a button. On clicking the button we are using <code>props.history.push(‘/about/’ + data)</code> , which is used to programatically navigate to /about/data<br><br><img src='./assets/react/reactrouter2.png'><br><br>The AboutPage is also a simple functional component, which gets the passed data by <code>props.match.params.aboutId</code><br><br><img src='./assets/react/reactrouter3.png'><br><br>The Page after clicking on the button in the HomePage will now have url in the browser <code>localhost:3000/about/Nabendu</code></p>"
            },
            {
                "name": "Explain the new feature of Lazy loading and code splitting in React",
                "description": "<p>Lazy loading is the new feature introduced in React v16.6, which allows for some Components to load later than other components. This way we can load the components which are fast like text earlier and components which loads images a bit later.</p><ul><li>Consider the below code for App.js. In it, there are two Components ContentComponent and myComp. </li><li>One has some paragraph containing <em>lorem ipsum</em> and others have an image to load from <em>unsplash</em>.</li></ul> <p>Now, we are lazy loading myComp as it has an image to load. Note the special way to import it and also we need to wrap the component in Suspense. Now, Suspense will contain the fallback Component which will be shown while myComp gets loaded.<br><br>The other component ContentComponent will load instantly.<br><br><img src='./assets/react/lazyload.png'><br><br><img src='./assets/react/lazyload1.png'><br><br><img src='./assets/react/lazyload2.png'><br><br>React is very fast and in localhost, condition to see it, we have to emulate Slow speed. To do so open the console, and go to Network tab. Then click on Online and select Slow 3G.<br><br>Now, when you refresh the local running app, you can see <code>Loading…</code>.coming.</p>"
            },
            {
                "name": "When would you use useRef",
                "description": "<p>A very common use case for using useRef is for when, suppose you click on a button, and then on its click you want an input to come into focus. To do this, we would need to access the DOM element of input and then call its function focus() to focus the input.</p>"
            },
            {
                "name": "Why does React use SyntheticEvents",
                "description": "<p>React implements a <strong>synthetic events</strong> system that brings consistency and high performance to React apps and interfaces. It achieves consistency by normalizing events so that they have the same properties across different browsers and platforms.<br><br>A synthetic event is a cross-browser wrapper around the browser’s native event. It has the same interface as the browser’s native event, including <code>stopPropagation()</code> and <code>preventDefault()</code>, except the events work identically across all browsers.<br><br>It achieves high performance by automatically using event delegation. In actuality, React doesn’t attach event handlers to the nodes themselves. Instead, a single event listener is attached to the root of the document. When an event is fired, React maps it to the appropriate component element.</p>"
            },
            {
                "name": "How to use a library like jQuery in React, which interacts directly with DOM?",
                "description": "<p>Using jQuery in React is not recommended as it directly interacts with the DOM and is generally a bad practice. We should always try first to find a React equivalent of the jQuery plugin or write the plugin ourselves. But many times there are plugins, which are only available in jQuery and no other alternative in ReactJS and also very time consuming to write ourselves. In such cases, we can use the method described below.<br><br>We attach a “ref” element to the root DOM element. Inside&nbsp;componentDidMount, we will get a reference to it, so that we can pass it to the jQuery plugin.<br><br>To prevent React from interacting with the DOM after mounting, we will return an empty <strong>&lt;div /&gt;</strong> from our <strong>render()</strong> method. The <strong>&lt;div /&gt;</strong> element has nothing, so React will not update it, leaving the jQuery plugin to manage only that part of the DOM. Also, we will use componetWillUnmount() to unmount the jQuery plugin, after its work with DOM is done.<br><br><img src='./assets/react/reactjquery.png'></p>"
            },
            {
                "name": "Difference between createElement and cloneElement?",
                "description": "<ul><li><strong>createElement</strong> is what JSX gets transpiled to and is what React uses to create React Elements (object representations of some UI). </li><li><strong>cloneElement</strong> is used in order to clone an element and pass it new props. They nailed the naming on these two.</li></ul>"
            },
            {
                "name": "Difference between React.memo and useMemo?",
                "description": "<p>memoization is a process that allows us to cache the values of previous/upcoming function calls so that the next time the function is called with the same argument(s), the cached value is returned rather than having to re-compute the function.<br><br><code>React.memo()</code>is a higher-order component (HOC), that takes a component as a prop and returns a component that prevents a component from re-rendering if the props (or values within it) have not changed.<br><br>While <code>React.memo()</code> is a HOC, <code>useMemo()</code> is a React Hook.<code>useMemo</code> takes in a function and an array of dependencies. The dependency's list are the elements <code>useMemo</code> watches: if there are no changes, the function result will stay the same. Otherwise, it will re-run the function. If they don’t change, it doesn’t matter if our entire component re-renders, the function won’t re-run but instead return the stored result.</p>"
            },
            {
                "name": "Difference between useRef and createRef?",
                "description": "<ul><li><code>createRef</code> will always create a new ref. In a class-based component, you would typically put the ref in an instance property during construction (e.g. <code>this.input = createRef()</code>). You don't have this option in a function component. </li><li><code>useRef</code> takes care of returning the same ref each time as on the initial rendering.</li></ul>"
            },
            {
                "name": "Difference between HTML and React event handling?",
                "description": "<ol> <li>In HTML, the event name should be in lowercase. Whereas in ReactJS it follows camelCase convention,</li><li>In HTML, you can return false to prevent default behavior. Whereas in ReactJS you must call preventDefault explicitly,</li></ol>"
            },
            {
                "name": "Difference between Incremental DOM and Virtual DOM?",
                "description": "<p><strong>Incremental DOM</strong> is a library for building up DOM trees and updating them in-place when data changes. It differs from the established virtual DOM approach in that no intermediate tree is created instead  - the existing tree is mutated in the same place. This approach significantly reduces memory allocation and GC thrashing for incremental updates to the DOM tree therefore increasing performance significantly in some cases.<br><br><strong>Virtual DOM</strong> compares the difference between a new entire virtual DOM with the previous virtual DOM for changes then applies those changes to the actual DOM. - This approach creates a new virtual DOM to determine the changes (memory heavy). Has a big memory footprint because it needs headroom for changes that \"might\" happen to the virtual DOM.</p>"
            },
            {
                "name": "Difference between useEffect and useLayoutEffect?",
                "description": "<p>useLayoutEffect is identical to useEffect, but it's major key difference is that it gets triggered synchronously after all DOM mutation. ... This hook is optimized, to allow the engineer to make changes to a DOM node directly before the browser has a chance to paint.<br><br> The order in which multiple useEffect hooks are executed is de++termined by React and may not be predictable. However, the order in which multiple useLayoutEffect hooks are executed is determined by the order in which they were called.<br><br>useEffect has a built-in mechanism for handling errors that occur during the execution of the effect, so that it does not crash the entire application. useLayoutEffect does not have this mechanism, and errors that occur during the execution of the effect will crash the entire application.<br><br>In general, it's recommended to use useEffect as much as possible, because it is more performant and less prone to errors. useLayoutEffect should only be used when you need to measure or update layout, and you can't achieve the same result using useEffect.</p>"
            },
            {
                "name": "Difference between controlled and uncontrolled components?",
                "description": "<p><strong>Controlled components</strong> are components that are controlled by the state of the parent component. The parent component manages the component's state, and the child components behavior is determined by the parent componen state. <br><br><strong>Uncontrolled components</strong> are the components that manage their own state internally, and their behavior is not determined by the parent component's state.<br><br><strong>in Most cases in React they both render form elements</strong><br><br>Uncontrolled components and Controlled components differ in the way they access the data from the form elements</p><ul> <li>A <strong>Controlled Component</strong> is a component that renders form elements and controls them by keeping the form data in the component's state. In a controlled component, the form element's data is handled by the React component (not DOM) and kept in the component's state. A controlled component basically overrides the default behavior of the HTML form elements.<br><img src='./assets/react/uncontrolled.png'></li><li>A <strong>Uncontrolled Component</strong> is a component that renders form elements, where the form element's data is handled by the DOM (default DOM behavior). To access the input's DOM node and extract its value you can use a ref.<br><img src='./assets/react/controlled.png'></li></ul>"
            },
            {
                "name": "Difference between Statefull and Stateless components?",
                "description": "<p>They are also known as: <br>- Container vs Presentational components <br>- Smart vs Dumb components<br><br>That means the stateful components are keeping track of changing data, while stateless components print out what is given to them via props, or they always render the same thing.<br><br>-- A stateless component can render props, whereas a stateful component can render both props and state.<br>-- In stateless components, the props are displayed like {props.name} but in stateful components, the props and state are rendered like {this.props.name} and {this.state.name} respectively.<br>-- A stateless component renders output which depends upon props value, but a stateful component render depends upon the value of the state.<br>-- A functional component is always a stateless component, but the class component can be stateless or stateful.</p><br><img src='./assets/react/state_ful_less.png'>"
            },
            {
                "name": "Difference between a Presentational and Container component?",
                "description": "<ul><li><strong>Presentational components</strong> are concerned with <em>how things look</em>. They generally receive data and callbacks exclusively via props. These components rarely have their own state, but when they do it generally concerns UI state, as opposed to data state.<br><br></li><li><strong>Container components</strong> are more concerned with <em>how things work</em>. These components provide the data and behavior to presentational or other container components. They call Flux actions and provide these as callbacks to the presentational components. They are also often stateful as they serve as data sources.</li></ul>"
            },
            {
                "name": "Difference between functional component and pure component",
                "description": "<p>the Pure Component doesn't re-render because of the props and state in it (actually we don't have any) don't change but the Functional Component re-renders whenever the parent component re-renders.</p>"
            },
            {
                "name": "Difference between Reference and state",
                "description": "<p>So, the 2 main differences between references and state:</p><ol><li>Updating a reference doesn’t trigger re-rendering, while updating the state makes the component re-render;</li><li>The reference update is synchronous (the updated reference value is available right away), while the state update is asynchronous (the state variable is updated after re-rendering).</li></ol><p>From a higher point of view, references store infrastructure data of side-effects, while the state stores information that is directly rendered on the screen.</p>"
            },
            {
                "name": "Difference between Component and Container in Redux",
                "description": "<ul><li><strong>Component</strong> is part of the React API. A Component is a class or function that describes part of a React UI.</li><li><strong>Container</strong> is an informal term for a React component that is connected to a redux store. Containers receive Redux state updates and dispatch actions, and they usually don't render DOM elements; they delegate rendering to presentational child components.</li></ul>"
            },
            {
                "name": "Difference between Elements and Components in ReactJS?",
                "description": "<p>An <strong>element</strong> is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. Elements can contain other elements in their props. Creating a React element is cheap. Once an element is created, it is never mutated. <br><img src='./assets/react/reactElement.png'><br>The above <code>createElement</code> returns as object as below<br><img src='./assets/react/reactElement1.png'><br>And finally it renders to the DOM using <code>ReactDOM.render</code></p><br><p>Whereas a <strong>component</strong> can be declared in several different ways. It can be a class with a <code>render()</code> method. Alternatively, in simple cases, it can be defined as a function. In either case, it takes props as an input, and returns an <code>element</code> tree as the output. JSX transpiled as <code>createElement</code> at the end<br><img src='./assets/react/reactElement3.png'></p>"
            },
            {
                "name": "Difference between constructor and getInitialState?",
                "description": "<p>You should initialize state in the constructor when using ES6 classes, and <code>getInitialState()</code> method when using <code>React.createClass()</code>.<br><img src='./assets/react/constructorinitialstate.png'></p>"
            },
            {
                "name": "What are the limitations of React?",
                "description": "<ol><li>React is just a view library, not a full-blown framework </li><li>There is a learning curve for beginners who are new to web development.</li><li>Integrating React.js into a traditional MVC framework requires some additional configuration</li><li>The code complexity increases with inline templating and JSX.</li><li>Too many smaller components leading to over-engineering or boilerplate</li></ol>"
            },
            {
                "name": "How to bind methods or event handlers in JSX callbacks?",
                "description": "<p>#1. <strong>Binding in Constructor:</strong> In JavaScript classes, the methods are not bound by default. The same thing applies for ReactJS event handlers defined as class methods.<br><img src='./assets/react/eventBind.png'><br><br>#2. <strong>Public class fields syntax:</strong> If you don’t like to use bind approach then public class fields syntax can be used to correctly bind callbacks<br><img src='./assets/react/eventBind1.png'><br><br>#3. <strong>Arrow functions in callbacks:</strong> You can use arrow functions directly in the callbacks<br><img src='./assets/react/eventBind2.png'></p>"
            },
            {
                "name": "What are Error Boundaries in ReactJS?",
                "description": "<p><strong>Error Boundaries:</strong> Error Boundaries basically provide some sort of boundaries or checks on errors, They are React components that are used to handle JavaScript errors in their child component tree.<br><br>React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI. It catches errors during rendering, in lifecycle methods, etc.<br><br><strong>Reason to Use:</strong> Suppose there is an error in JavaScript inside component then it used to corrupt React’s internal state and cause it to emit cryptic errors. Error boundaries help in removing these errors and display a Fallback UI instead(Which means a display of an error that something broke in the code).<br><br>A class component becomes an error boundary if it defines a new lifecycle method called <code>componentDidCatch(error, info)</code><br><img src='./assets/react/errorBoundary.png'><br>After that use it as a regular component<br><img src='./assets/react/errorBoundary1.png'></p>"
            },
            {
                "name": "In which scenarios error boundaries do not catch errors?",
                "description": "<ol><li>Inside Event handlers</li><li>Asynchronous code using <strong>setTimeout or requestAnimationFrame</strong> callbacks</li><li>During Server side rendering</li><li>When errors thrown in the error boundary code itself</li></ol>"
            },
            {
                "name": "Difference between try catch block and error boundaries?",
                "description": "<p>Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.<br><img src='./assets/react/trycatch.png'><br><br>Whereas error boundaries wrap declarative code as below,<br><img src='./assets/react/errorBoundary2.png'><br><br>So if an error occurs in a <strong>componentDidUpdate</strong> method caused by a <strong>setState</strong> somewhere deep in the tree, it will still correctly propagate to the closest error boundary.</p>"
            },
            {
                "name": "What do these three dots (...) in React do?",
                "description": "<p><strong>Problem</strong> - What does the ... do in this React (using JSX) code and what is it called?<br><img src='./assets/react/3dots.png'><br><br><strong>Answer</strong> - It is known as spread notation. It was added in ES2018 (spread for arrays/iterables was earlier, ES2015). <br>For instance, if this.props contained <code>a: 1</code> and <code>b: 2</code>, then would be same as <br><img src='./assets/react/3dots1.png'><br><br>Spread notation is handy not only for that use case, but for creating a new object with most (or all) of the properties of an existing object — which comes up a lot when you're updating state, since you can't modify state directly:<br><img src='./assets/react/3dots2.png'></p>"
            },
            {
                "name": "What is Components Composition?",
                "description": "<p>Component composition is the name for <strong>passing components as props to other components</strong>, thus creating new components with other components.<br><img src='./assets/react/composition.png'></p>"
            },
            {
                "name": "What does Batching mean?",
                "description": "<p><strong>Batching</strong> is nothing but <strong>grouping React multiple state updates together into a single render state</strong> to achieve better computational performance. Until React 18, we only <em>batched</em> updates during the <em>React event handlers</em>. Updates inside of <code>promises</code>, <code>setTimeout</code>, <em>native event handlers</em>, or any other event were not <em>batched</em> in React by default.<br><img src='./assets/react/batching.png'><br><br>Advantages of Batching</p><ul><li><strong>Batching</strong> is great for <em>performance</em> because it avoids unnecessary re-renders.</li><li><strong>Batching</strong> also <em>prevents</em> your component from <em>rendering</em> half-finished states where only one state variable was updated, which may cause bugs.</li><li>Another reason to use <strong>batching</strong> is when the web application grows, the number of nested components will increase. Therefore, if a parent component executes an <em>unbatched state updated</em>, the <em>entire component tree will be re-rendered per state update</em> that is expensive.</li></ul>"
            },
            {
                "name": "Which lifecycle methods of class component is replaced by useEffect in functional component?",
                "description": "<p>The lifecyce methods replaced by <code>useEffect</code> Hooks of functional component are <em><code>componentDidMount()</code>, <code>componentDidUpdate()</code>, and <code>componentWillUnmount()</code></em><br><br>#1. componentDidMount: is equivalent for running an effect once. <br><img src='./assets/react/useEffect.png'><br><strong>Note</strong> - empty array = useEffect hook runs once on mount<br><br>#2. componentDidUpdate: is equivalent for running effects when things change <br><img src='./assets/react/useEffect1.png'><br><br>#3. componentWillUnmount: To run a hook as the component is about to unmount, we just have to return a function from the useEffect Hook <br><img src='./assets/react/useEffect2.png'></p>"
            },
            {
                "name": "Compare useState and useReducer implementations",
                "description": "<ul><li><code>useState</code> updates state with <code>setState</code>, while <code>useReducer</code> with <em>dispatch function</em>.</li><li><code>useState</code> passes down all the <code>setState</code> custom helper functions, while <code>useReducer</code> passes down just the <em>dispatch function</em>.</li><li><code>useState</code> needs to wrap functions in <code>useCallback</code>(if we want to memorize them), while <em>dispatch function</em> is already <strong>memorized</strong>.</li><li><code>useState</code> easier to write, <code>useReducer</code> is harder to implement and needs more logic to be coded.</li></ul>"
            },
            {
                "name": "Describe Flux vs MVC?",
                "description": "<p>Traditional MVC patterns have worked well for separating the concerns of data (Model), UI (View) and logic (Controller) — but MVC architectures frequently encounter two main problems:</p><ul><li><strong>Poorly defined data flow:</strong> The cascading updates which occur across views often lead to a tangled web of events which is difficult to debug.</li><li><strong>Lack of data integrity:</strong> Model data can be mutated from anywhere, yielding unpredictable results across the UI.</li></ul><p>With the Flux pattern complex UIs no longer suffer from cascading updates; any given React component will be able to reconstruct its state based on the data provided by the store. The Flux pattern also enforces data integrity by restricting direct access to the shared data.</p>"
            },
            {
                "name": "Can you force a React component to rerender without calling setState?",
                "description": "<p>In your component, you can call <code>this.forceUpdate()</code> to force a rerender. Another way is this.setState(this.state);<br><br>Note that <code>forceUpdate</code> should be avoided because it deviates from a React mindset. The React docs cite an example of when <code>forceUpdate</code> might be used:<br><br>By default, when your component's state or props change, your component will re-render. However, if these change implicitly (eg: data deep within an object changes without changing the object itself) or if your render() method depends on some other data, you can tell React that it needs to re-run render() by calling forceUpdate().</p>"
            },
            {
                "name": "Does React re-render all components and sub components every time setState is called?",
                "description": "<p>By default - <strong>yes</strong>.<br><br>There is a method boolean <code>shouldComponentUpdate(object nextProps, object nextState)</code>, each component has this method and it's responsible to determine \"should component update (run render function)?\" every time you change state or pass new props from parent component.<br><br>You can write your own implementation of <code>shouldComponentUpdate</code> method for your component, but default implementation always returns true - meaning always re-run render function.</p>"
            },
            {
                "name": "What is the second argument that can optionally be passed to setState and what is its purpose?",
                "description": "<p>A callback function which will be invoked when <code>setState</code> has finished and the component is re-rendered.<br><br>Something that’s not spoken of a lot is that <code>setState</code> is asynchronous, which is why it takes in a second callback function. Typically it’s best to use another lifecycle method rather than relying on this callback function, but it’s good to know it exists.<br><br><img src='./assets/react/setState.png'></p>"
            },
            {
                "name": "When would you use flushSync in ReactJS?",
                "description": "<p>React 18 adds out-of-the-box performance improvements by doing more <strong>batching</strong> (automated) by default. Batching is when React groups multiple state updates into a single re-render for better performance.</p><ul><li>To <em>opt-out</em> of automatic batching, you can use <code>flushSync</code> so your component will be re-rendered after each state update. You might need it when for example some code may depend on <em>reading</em> something from the <em>DOM immediately</em> after a state change.</li></ul><p>Consider with automated batching:<br><img src='./assets/react/batching.png'><br><br>Consider with <code>flushSync</code>:<br><img src='./assets/react/flushSync.png'></p>"
            },
            {
                "name": "When to use useState vs useReducer?",
                "description": "<p>use <code>useState</code> if you have: </p><ul><li>JavaScript <em>primitives</em> as state</li><li><em>Simple</em> state transitions</li><li>Business logic within your component</li><li>Different properties that <em>don't change</em> in any correlated way and can be managed by multiple <code>useState</code> hooks</li></ul><p>use <code>useReducer</code> if you have:</p><ul><li>JavaScript <em>objects</em> or <em>arrays</em> as state</li><li><em>Complex</em> state transitions</li><li><em>Complicated</em> business logic more suitable for a reducer function (to separate concern of it)</li><li>Different properties tied together that should be managed in one state object (when state depends on state)</li></ul>"
            },
            {
                "name": "When shall we use useReducer hook in ReactJS?",
                "description": "<p><code>useReducer</code> is an alternative to <code>useState</code>. <code>useReducer</code> is usually preferable to <code>useState</code> when you have complex state logic that involves <strong>multiple</strong> sub-values or when the next state <em>depends</em> on the previous one. <br><br>An example will be a list of items, where you need to add, update and remove items in the state, Here you might have noticed that the state management logic takes a good part of the component body. <code>useReducer</code> helps to separate the concerns of rendering vs a concern of state management.<br><img src='./assets/react/usereducer.png'></p>"
            },
            {
                "name": "What is React Fiber?",
                "description": "<p>React Fiber is an ongoing reimplementation of React's core algorithm. The main difference between react and react fiber are these new features :-</p><ol><li><strong>Incremental Rendering :-</strong> React v16.0 includes a completely rewritten server renderer. It’s really fast. It supports streaming, so you can start sending bytes to the client faster</li><li><strong>Handle errors in the render API :</strong> To make class component an error boundary we define a new lifecycle method called componentDidCatch(error, info).</li><li><strong>Return multiple elements from render</strong> : With this new feature in React v16.0 now we can also return an array of elements, and string from component’s render method.</li><li><strong>Portals</strong> : Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.</li><li><strong>Fragments</strong> : A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.</li></ol>"
            },
            {
                "name": "How to avoid the need for binding in React?",
                "description": "<p>#1. Define Your Event Handler as an Inline Arrow Function <br><img src='./assets/react/eventBind3.png'><br><br>#2. Define Your Event Handler as an Arrow Function Assigned to a Class Field<br><img src='./assets/react/eventBind4.png'><br><br>#3. Use a Function Component with Hooks<br><img src='./assets/react/eventBind5.png'></p>"
            },
            {
                "name": "Difference between React vs Angular",
                "description": "<p>React is better than Angular due to it's virtual DOM implementation and rendering optimizations. Migrating between React's versions is quite easy, too; you don't need to install updates one by one, as in the case of Angular.<br><br>Angular is a TypeScript-based web application framework, whereas React JS is a JavaScript-based library.<br><br>Angular is used to build single-page applications using HTML and TypeScript. React JS is commonly used to create user interfaces for single-page applications from isolated components.<br><br>Using a library such as React can give a project a greater ability to evolve parts of the system—again for example, state management—over time, when new solutions are created by the open source community.</p>"
            },
            {
                "name": "What is the order of useInsertionEffect, useEffect and useLayoutEffect hooks at component generation",
                "description": "<p><code>useInsertionEffect</code> - It fires synchronously <strong>before</strong> all DOM mutations. Use this to inject styles into the DOM <strong>before</strong> reading layout in <code>useLayoutEffect</code>. So it runs before <code>useLayoutEffect</code>.<br><br><code>useLayoutEffect</code> - It fires synchronously <strong>after</strong> all DOM mutations. Use this to read layout from the DOM and synchronously re-render.<br><br><code>useEffect</code> - It will run after the render is committed to the screen. So it runs after <code>useLayoutEffect</code>.<br><br>Therefore the order of running is:</p><ol><li>useInsertionEffect</li><li>useLayoutEffect</li><li>useEffect</li></ol>"
            },
            {
                "name": "Example of any simple Custom React Hook",
                "description": "<p>A <strong>Custom</strong> Hook is a <strong>stateful function</strong> that uses other react built-in hooks (e.g. <code>useState</code>, <code>useCallback</code> etc.) that can wrap around the <em>stateful</em> logic that you wanted to gather in one place and <em>avoid copying and pasting the same logic</em> in multiple components.<br><br>Consider the increment/decriment custom hook:<br><img src='./assets/react/customHook.png'><br>and then in your component you can use it as follows:<br><img src='./assets/react/customHook1.png'></p>"
            },
            {
                "name": "What do you need to keep in mind while creating custom React hooks?",
                "description": "<p>When creating custom React hooks, it's important to keep in mind that they should only call other hooks at the top level and not inside loops or conditions.<br><br>Also, it's important to make sure that the hook only performs one specific action.</p>"
            },
            {
                "name": "Can a custom React hook return JSX?",
                "description": "<p>While there is no hardcore restriction on how you should define custom hooks and what logic should contain, it's an anti-pattern to write hooks that return JSX.<br><br>There are a few downsides to using hooks to return JSX</p><ul><li>When you write a hook that returns JSX component, you are essentially defining the component within the functional component, so on each and every re-render you will be creating a new instance of the component. This will lead to the component being unmounted and mounted again. This is bad for performance and also buggy if you have stateful login within the component as the state will get reset with every re-render of the parent</li><li>By defining a JSX component within the hook, you are taking away the option of lazy loading your component if the need be.</li><li>Any performance optimization to the component will require you to make use of <code>useMemo</code> which doesn't give you the flexibility of a custom comparator function like <code>React.memo()</code></li></ul><p>The benefit on the other hand is that you have control over the state of the component in the parent. However, you can still implement the same logic by using a controlled component approach</p>"
            },
            {
                "name": "How to mitigate multiple component re-renders when using multiple useState calls?",
                "description": "<p><strong>Problem</strong> - When I get data and update two different state variables (data and loading flag), my component (a data table) is rendered twice, even though both calls to the state updater are happening in the same function. Any ideas on how to mitigate this? <br><img src='./assets/react/problem2.png'></p><br><p><strong>Answer</strong> - <br><br>#1. You could combine the loading state and data state into one state object and then you could do one setState call and there will only be one render. <br><img src='./assets/react/solution1.png'><br><br>#2. Before React 18, React will batch state updates if they're triggered from within a React-based event, like a button click or input change. It will not batch updates if they're triggered outside of a React event handler, like an async call.<br><br>#3. Starting in React 18 (opt-in feature) all updates will be automatically batched, no matter where they originate from.</p>"
            },
            {
                "name": "How would you optimise this code using one of the React Hooks?",
                "description": "<p><strong>Problem</strong> - Consider this code. Imagine there are 100000 of users. Do you see any optimization we can make? <br><img src='./assets/react/optimize.png'><br><img src='./assets/react/optimize1.png'><br><img src='./assets/react/optimize2.png'></p><br><p><strong>Answer</strong> - <br><br>Even though the <code>filteredUsers</code> don't change when someone types into the input field, because they change only when clicking the button via the <code>search</code> state, the filter's callback function runs again and again for every keystroke in the input field.<br><img src='./assets/react/optimize3.png'><br><br>This doesn't slow down this small React application. However, if we would deal with a large set of data in this array and run the filter's callback function for every keystroke, we would maybe slow down the application.<br><br>you can use React's useMemo Hook to <strong>memoize a functions return value(s)</strong> and to run a function only if its dependencies (here <code>search</code>) have changed:<br><img src='./assets/react/optimize4.png'></p>"
            },
            {
                "name": "What is ReactDOMServer?",
                "description": "<p>The <code>ReactDOMServer</code> object enables you to render components to static markup (typically used on node server). This object is mainly used for <em>server-side rendering</em> (SSR). The following methods can be used in both the server and browser environments:</p><ol><li><code>renderToString()</code></li><li><code>renderToStaticMarkup()</code></li></ol><p>For example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call <code>renderToString</code> to render your root component to a string, which you then send as response.<br><img src='./assets/react/renderToString.png'></p>"
            },
            {
                "name": "How you implement Server Side Rendering or SSR?",
                "description": "<p>React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.<br><img src='./assets/react/renderToString1.png'><br><br>This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.</p>"
            },
            {
                "name": "How to enable production/build mode in React?",
                "description": "<p>Run the following command to serve the build version in a static server. <br>npm install -g serve <br>serve -s build</p><br><p><strong>Using Webpack</strong> - Webpack is one of the most popular choices when it comes to creating production build. If you are configuring webpack directly, make use of the TenserPlugin. <br><img src='./assets/react/webpack.png'></p><br><p><strong>Reactjs build directory</strong> - build command <strong>npm run build</strong><br><img src='./assets/react/build.png'><br><br>Firstly, inside the build directory we have the <strong>static </strong>folder. This <strong>build/static</strong> folder contains your CSS, JS and media files.<br><br>Files within the <strong>build/static </strong>folder, has a unique hash is appended to the file name. This hash code is generated based on the contents of the file itself, i.e., if the contents of the file change in the next build, the hash code (hence, the filename) will also change.<br><br>Therefore, the hash will be useful for enabling long term caching techniques. For example, on page reloading, the hashing will prevent re-downloading of all the assets if the contents of your file haven’t changed.<br><br>Many .js files are generated and placed inside the <strong>build/static/js </strong>directory. These are called <strong>chunks</strong>. <br><img src='./assets/react/chunk.png'><br><br>Your application code within <strong>App.js</strong> will be placed inside the following file.<br><img src='./assets/react/main.png'></p>"
            },
            {
                "name": "What is the recommended ordering of methods in component class?",
                "description": "<p><em>Recommended</em> ordering of methods from <em>mounting</em> to <em>render stage</em>:</p><ol><li><code>static</code> methods</li><li><code>constructor()</code></li><li><code>getChildContext()</code></li><li><code>componentWillMount()</code></li><li><code>componentDidMount()</code></li><li><code>componentWillReceiveProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>componentWillUpdate()</code></li><li><code>componentDidUpdate()</code></li><li><code>componentWillUnmount()</code></li><li>click handlers or event handlers like <code>onClickSubmit()</code> or <code>onChangeDescription()</code></li><li>getter methods for render like <code>getSelectReason()</code> or <code>getFooterContent()</code></li><li>optional render methods like <code>renderNavigation()</code> or <code>renderProfilePicture()</code></li><li><code>render()</code></li></ol>"
            },
            {
                "name": "What is a switching component?",
                "description": "<p>A <em>switching component</em> is a component that renders one of many components. We need to use object to map prop values to components.<br><img src='./assets/react/switchingComponent.png'></p>"
            },
            {
                "name": "Difference between super() and super(props) in React using ES6 classes?",
                "description": "<p>When you want to access <code>this.props</code> in <code>constructor()</code> then you should pass props to <code>super()</code> method.<br><br><strong>Using <code>super(props)</code>:</strong><br><img src='./assets/react/propspassing.png'><br><br><strong>Using <code>super()</code>:</strong><br><img src='./assets/react/propsnotpassing.png'><br><br>Outside <code>constructor()</code> both will display same value for <code>this.props</code>.</p>"
            },
            {
                "name": "Difference between React and ReactDOM?",
                "description": "<p><strong>React</strong> is a JavaScript library for building user interfaces. It provides a way to build reusable UI components and manage their state. <strong>ReactDOM</strong> is a separate library that provides specific methods for interacting with the DOM, such as <strong>render()</strong> and <strong>unmountComponentAtNode()</strong>. ReactDOM is the glue that connects React with the DOM.<br><br>The <code>react</code> package contains <code>React.createElement()</code>, <code>React.Component</code>, <code>React.Children</code>, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The <code>react-dom</code> package contains <code>ReactDOM.render()</code>, and in <code>react-dom/server</code> we have <em>server-side rendering</em> support with <code>ReactDOMServer.renderToString()</code> and <code>ReactDOMServer.renderToStaticMarkup()</code>.</p>"
            },
            {
                "name": "Difference between setState() and replaceState() methods?",
                "description": "<p>When you use <code>setState()</code> the current and previous states are merged. <code>replaceState()</code> throws out the current state, and replaces it with only what you provide. Usually <code>setState()</code> is used unless you really need to remove all previous keys for some reason. You can also set state to <code>false</code>/<code>null</code> in <code>setState()</code> instead of using <code>replaceState()</code>.</p>"
            },
            {
                "name": "Why can't you update props in React?",
                "description": "<p>You can't update props in React because they are passed down from a parent component and are considered to be immutable. Instead, you should use state to manage data that can change within a component, and pass that data down to child components as props.</p>"
            },
            {
                "name": "How to listen to state changes?",
                "description": "<p>The <code>componentDidUpdate</code> lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.<br><br><code>componentDidUpdate(object prevProps, object prevState)</code><br><br><strong>Note:</strong> The previous releases of ReactJS also uses <code>componentWillUpdate(object nextProps, object nextState)</code> for state changes. It has been deprecated in latest releases.</p>"
            },
            {
                "name": "How to focus an input element on page load?",
                "description": "<p>You can do it by creating <em>ref</em> for <code>input</code> element and using it in <code>componentDidMount()</code>:<br><img src='./assets/react/focus.png'></p>"
            },
            {
                "name": "How to avoid using relative path imports in create-react-app?",
                "description": "<p>Create a file called <code>.env</code> in the project root and write the import path:<br><br><code>NODE_PATH=src/app</code><br><br>After that restart the development server. Now you should be able to import anything inside <code>src/app</code> without relative paths.</p>"
            },
            {
                "name": "How to add Google Analytics for React Router?",
                "description": "<p>Add a listener on the <code>history</code> object to record each page view:<br><br><img src='./assets/react/ga.png'></p>"
            },
            {
                "name": "What is React Intl?",
                "description": "<p>The <em>React Intl</em> library makes internationalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of <em>FormatJS</em> which provides bindings to React via its components and API.</p>"
            },
            {
                "name": "What are the two ways of formatting in React Intl?",
                "description": "<p>The library provides two ways to format strings, numbers, and dates:</p><ol><li><strong>Using react components:</strong><br><img src='./assets/react/format.png'></li><li><strong>Using an API:</strong><br><img src='./assets/react/format1.png'></li></ol>"
            },
            {
                "name": "How to use <code>&lt;FormattedMessage&gt;</code> as placeholder using React Intl?",
                "description": "<p>The <code>&lt;Formatted... /&gt;</code> components from <code>react-intl</code> return elements, not plain text, so they can't be used for placeholders, alt text, etc. In that case, you should use lower level API <code>formatMessage()</code>. You can inject the <code>intl</code> object into your component using <code>injectIntl()</code> higher-order component and then format the message using <code>formatMessage()</code> available on that object.<br><img src='./assets/react/formatmessage.png'></p>"
            },
            {
                "name": "How to access current locale with React Intl?",
                "description": "<p><strong>using injectIntl()</strong><br><img src='./assets/react/currentlocale.png'></p>"
            },
            {
                "name": "What is Redux and its core principles?",
                "description": "<p>Redux is a library for managing the state of an application. It provides a centralized store to hold the state, and it uses actions and reducers to manage the state changes. Alternatives to Redux are Mobx, Apollo, and Unstated-next. <br><br>It's Core principals</p><ol><li><strong>Single source of truth:</strong> The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.</li><li><strong>State is read-only:</strong> The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.</li><li><strong>Changes are made with pure functions:</strong> To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.</li></ol>"
            },
            {
                "name": "What's the typical flow of data like in a React + Redux app?",
                "description": "<p>Callback from UI component dispatches an action with a payload, which then is intercepted in a reducer, possibly producing a new application state, which is then propagated down through the tree of components in the application from the Redux store.</p>"
            },
            {
                "name": "What are the downsides of Redux compared to Flux?",
                "description": "<p>Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:</p><ol><li><strong>You will need to learn to avoid mutations:</strong> Flux is un-opinionated about mutating data, but Redux doesn't like mutations and many packages complementary to Redux assume you never mutate the state. You can enforce this with dev-only packages like <code>redux-immutable-state-invariant</code>, Immutable.js, or instructing your team to write non-mutating code.</li><li><strong>You're going to have to carefully pick your packages:</strong> While Flux explicitly doesn't try to solve problems such as undo/redo, persistence, or forms, Redux has extension points such as middleware and store enhancers, and it has spawned a rich ecosystem.</li><li><strong>There is no nice Flow integration yet:</strong> Flux currently lets you do very impressive static type checks which Redux doesn't support yet.</li></ol>"
            },
            {
                "name": "Difference between mapStateToProps() and mapDispatchToProps()",
                "description": "<p><code>mapStateToProps()</code> is a utility which helps your component get updated state (which is updated by some other components):<br><img src='./assets/react/mapStateToProps.png'><br><br><code>mapDispatchToProps()</code> is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):<br><img src='./assets/react/mapDispatchToProps.png'><br><br>It is recommended to always use the “object shorthand” form for the <code>mapDispatchToProps</code>.<br><br>Redux wraps it in another function that looks like (…args) =&gt; dispatch(onTodoClick(…args)), and pass that wrapper function as a prop to your component.<br><img src='./assets/react/mapDispatchToProps1.png'></p>"
            },
            {
                "name": "What are the drawbacks of MVW pattern?",
                "description": "<ol><li>DOM manipulation is very expensive which causes applications to behave slow and inefficient.</li><li>Due to circular dependencies, a complicated model was created around models and views.</li><li>Lot of data changes happens for collaborative applications(like Google Docs).</li><li>No way to do undo (travel back in time) easily without adding so much extra code.</li></ol>"
            },
            {
                "name": "Are there any similarities between Redux and RxJS?",
                "description": "<p>These libraries are very different for very different purposes, but there are some vague similarities.<br><br>Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.</p>"
            },
            {
                "name": "How to use connect() from React Redux?",
                "description": "<p>You need to follow two steps to use your store in your container:</p><ol><li><strong>Use <code>mapStateToProps()</code>:</strong> It maps the state variables from your store to the props that you specify.</li><li><strong>Connect the above props to your container:</strong> The object returned by the <code>mapStateToProps</code> function is connected to the container. You can import <code>connect()</code> from <code>react-redux</code>.<br><img src='./assets/react/connect.png'></li></ol>"
            },
            {
                "name": "How to reset state in Redux?",
                "description": "<p>You need to write a <em>root reducer</em> in your application which will handle the action to the reducer generated by <code>combineReducers()</code>.<br><br>For example, let us take <code>rootReducer()</code> to return the initial state after <code>USER_LOGOUT</code> action. As we know, reducers are supposed to return the initial state when they are called with <code>undefined</code> as the first argument, no matter the action. <br><img src='./assets/react/rootreducer.png'><br><br>In case of using <code>redux-persist</code>, you may also need to clean your storage. <code>redux-persist</code> keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.<br><img src='./assets/react/rootreducer1.png'></p>"
            },
            {
                "name": "Difference Between Context API and Redux",
                "description": "<p>You can use <strong>Context</strong> in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for. Using context, we can avoid passing props through intermediate elements.<br><br>Whereas <strong>Redux</strong> is much more powerful and provides a large number of features that the Context API doesn't provide. Also, React Redux uses context internally but it doesn't expose this fact in the public API.</p>"
            },
            {
                "name": "Difference between component and container in React Redux?",
                "description": "<p><strong>Component</strong> is a class or function component that describes the presentational part of your application.<br><br><strong>Container</strong> is an informal term for a component that is connected to a Redux store. Containers <em>subscribe</em> to Redux state updates and <em>dispatch</em> actions, and they usually don't render DOM elements; they delegate rendering to presentational child components.</p>"
            },
            {
                "name": "How to structure Redux top level directories?",
                "description": "<ol><li><strong>Components</strong>: Used for <em>dumb</em> components unaware of Redux.</li><li><strong>Containers</strong>: Used for <em>smart</em> components connected to Redux.</li><li><strong>Actions</strong>: Used for all action creators, where file names correspond to part of the app.</li><li><strong>Reducers</strong>: Used for all reducers, where files name correspond to state key.</li><li><strong>Store</strong>: Used for store initialization.</li></ol>"
            },
            {
                "name": "What is redux-saga ?",
                "description": "<p><code>redux-saga</code> is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.<br><code>npm install --save redux-saga</code></p>"
            },
            {
                "name": "What is the mental model of redux-saga?",
                "description": "<p><em>Saga</em> is like a separate thread in your application, that's solely responsible for side effects. <code>redux-saga</code> is a redux <em>middleware</em>, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.</p>"
            },
            {
                "name": "Differences between call() and put() in redux-saga?",
                "description": "<p>Both <code>call()</code> and <code>put()</code> are effect creator functions. <code>call()</code> function is used to create effect description, which instructs middleware to call the promise. <code>put()</code> function creates an effect, which instructs middleware to dispatch an action to the store.</p><img src='./assets/react/saga.png'>"
            },
            {
                "name": "What is Redux Thunk?",
                "description": "<p><em>Redux Thunk</em> middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods <code>dispatch()</code> and <code>getState()</code> as parameters.</p>"
            },
            {
                "name": "Differences between redux-saga and redux-thunk?",
                "description": "<p>Both <em>Redux Thunk</em> and <em>Redux Saga</em> take care of dealing with side effects. In most of the scenarios, Thunk uses <em>Promises</em> to deal with them, whereas Saga uses <em>Generators</em>. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.</p>"
            },
            {
                "name": "What are Redux selectors and why to use them?",
                "description": "<p><em>Selectors</em> are functions that take Redux state as an argument and return some data to pass to the component.<br><img src='./assets/react/userstate.png'><br><br>These selectors have two main benefits,</p><ol><li>The selector can compute derived data, allowing Redux to store the minimal possible state</li><li>The selector is not recomputed unless one of its arguments changes</li></ol>"
            },
            {
                "name": "What is Redux Form?",
                "description": "<p><em>Redux Form</em> works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.<br><br>Some of the main features of Redux Form are:</p><ol><li>Field values persistence via Redux store.</li><li>Validation (sync/async) and submission.</li><li>Formatting, parsing and normalization of field values.</li></ol>"
            },
            {
                "name": "How to add multiple middlewares to Redux?",
                "description": "<p>You can use <code>applyMiddleware</code> where you can pass each piece of middleware as a new argument. So you just need to pass each piece of middleware you'd like. For example, you can add Redux Thunk and logger middlewares as an argument as below,<br><img src='./assets/react/applyMiddleware.png'></p>"
            },
            {
                "name": "What is NextJS and major features of it?",
                "description": "<p>NextJS is a framework for building web applications with React. It provides a set of features for building server-rendered React applications, including:</p><ul><li>Server-side rendering (SSR) out of the box</li><li>Automatic code splitting for faster load times</li><li>Built-in development server with hot reloading</li><li>Easy setup for custom routes with file-system based routing</li><li>Static site generation (SSG)</li></ul>"
            },
            {
                "name": "Is it good to use arrow functions in render methods?",
                "description": "<p>It's generally not good to use arrow functions in the render method because they create a new function on every render, which can negatively impact performance. If a component uses an arrow function in its render method, it will re-create that function on every render and cause the component to re- render even if its props haven't changed.</p>"
            },
            {
                "name": "How to set initial state in Redux?",
                "description": "<p>You need to pass initial state as second argument to createStore:<br><img src='./assets/react/createStore.png'></p>"
            },
            {
                "name": "How Relay is different from Redux?",
                "description": "<p>Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via <em>GraphQL</em> queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.</p>"
            },
            {
                "name": "What is an action in Redux?",
                "description": "<p><em>Actions</em> are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.<br>{&nbsp;&nbsp;type: ADD_TODO,&nbsp;&nbsp;text: 'Add todo &nbsp;&nbsp;item'&nbsp;&nbsp;}</p>"
            },
            {
                "name": "What is render hijacking in react?",
                "description": "<p>The concept of render hijacking is the ability to control what a component will output from another component. It means that you decorate your component by wrapping it into a Higher-Order component. By wrapping, you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enable hijacking, but by using HOC you make your component behave differently.</p>"
            },
            {
                "name": "What are HOC factory implementations?",
                "description": "<p>There are two main ways of implementing HOCs in React.</p><ol><li>Props Proxy (PP) and</li><li>Inheritance Inversion (II).</li></ol><p>But they follow different approaches for manipulating the <em>WrappedComponent</em>.<br><br><strong>Props Proxy</strong> - In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name Props Proxy.<br><img src='./assets/react/pphoc.png'><br><br><strong>Inheritance Inversion</strong> - In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems inverse.<br><img src='./assets/react/iihoc.png'></p>"
            },
            {
                "name": "Do I need to keep all my state into Redux? Should I ever use react internal state?",
                "description": "<p>It is up to the developer's decision, i.e., it is developer's job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as “is this dropdown currently open”, inside a component's internal state.<br><br>Below are the thumb rules to determine what kind of data should be put into Redux</p><ol><li>Do other parts of the application care about this data?</li><li>Do you need to be able to create further derived data based on this original data?</li><li>Is the same data being used to drive multiple components?</li><li>Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?</li><li>Do you want to cache the data (i.e, use what's in state if it's already there instead of re-requesting it)?</li></ol>"
            },
            {
                "name": "What is the purpose of registerServiceWorker in React?",
                "description": "<p>React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on a slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that's what you should know about service worker for now. It's all about adding offline capabilities to your site.</p>"
            },
            {
                "name": "What are the possible return types of render method?",
                "description": "<ol><li><strong>React elements:</strong> Elements that instruct React to render a DOM node. It includes html elements such as <code>&lt;div/&gt;</code> and user defined elements.</li><li><strong>Arrays and fragments:</strong> Return multiple elements to render as Arrays and Fragments to wrap multiple elements</li><li><strong>Portals:</strong> Render children into a different DOM subtree.</li><li><strong>String and numbers:</strong> Render both Strings and Numbers as text nodes in the DOM</li><li><strong>Booleans or null:</strong> Doesn't render anything but these types are used to conditionally render content.</li></ol>"
            },
            {
                "name": "Prevent or stop a function from being called multiple times?",
                "description": "<ol><li><strong>Throttling:</strong> Changes based on a time based frequency. For example, it can be used using _.throttle lodash function</li><li><strong>Debouncing:</strong> Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function</li><li><strong>RequestAnimationFrame throttling:</strong> Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function</li></ol>"
            },
            {
                "name": "How JSX prevents Injection Attacks?",
                "description": "<p>React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered.<br><img src='./assets/react/injectionattack.png'></p>"
            },
            {
                "name": "What are loadable components?",
                "description": "<p>If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.</p><img src='./assets/react/loadable.png'><p>Now OtherComponent will be loaded in a separated bundle</p>"
            },
            {
                "name": "What is suspense component?",
                "description": "<p>If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you’re waiting for it to load using a loading indicator. This can be done using <strong>Suspense</strong> component.<br><img src='./assets/react/suspense.png'></p>"
            },
            {
                "name": "What is route based code splitting?",
                "description": "<p>One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won't be disturbed.<br><img src='./assets/react/splitting.png'></p>"
            },
            {
                "name": "What are the problems of using render props with pure components?",
                "description": "<p>If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.</p>"
            },
            {
                "name": "How do you create HOC using render props?",
                "description": "<p>You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a  component, you could easily create one using a regular  with a render prop.<br><img src='./assets/react/renderhoc.png'></p>"
            },
            {
                "name": "What is windowing technique?",
                "description": "<p>Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.</p>"
            },
            {
                "name": "What is formik?",
                "description": "<p>Formik is a small react form library that helps you with the three major problems,</p><ol><li>Getting values in and out of form state</li><li>Validation and error messages</li><li>Handling form submission</li></ol>"
            },
            {
                "name": "What is Concurrent Rendering?",
                "description": "<p>The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there's something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,<br><img src='./assets/react/concurrent.png'></p>"
            },
            {
                "name": "Difference between async mode and concurrent mode?",
                "description": "<p>Async mode is an experimental feature that allows React to schedule updates and render components asynchronously. This can improve the performance of an application by reducing the number of updates that need to be processed at the same time. Concurrent mode is a feature that allows React to work in an asynchronous way and it's not yet released but it's planned to be in the future.</p>"
            },
            {
                "name": "Difference between Imperative and Declarative in React?",
                "description": "<p>The imperative way of doing this would be:<br><img src='./assets/react/imperative.png'><br><br>The declarative approach would be:<br><img src='./assets/react/declartive.png'></p>"
            },
            {
                "name": "What are the benefits of using typescript with reactjs?",
                "description": "<ol><li>It is possible to use latest JavaScript features</li><li>Use of interfaces for complex type definitions</li><li>IDEs such as VS Code was made for TypeScript</li><li>Avoid bugs with the ease of readability and Validation</li><li>Improved code quality and maintainability</li><<li>Better type checking and fewer runtime errors</li>/ol>"
            },
            {
                "name": "What is the purpose of eslint plugin for hooks?",
                "description": "<p>The ESLint plugin for hooks is a set of rules that enforces the rules of hooks as specified by the React team. It helps to prevent common mistakes and inconsistencies when using hooks. It also helps to make sure that hooks are only used in functional components and that they are called in the correct order.</p>"
            },
            {
                "name": "How do you make sure that user remains authenticated on page refresh while using Context API State Management?",
                "description": "<p>When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.<br><br><strong>App.js</strong><br><img src='./assets/react/loaduser.png'><br><br>But while using <strong>Context API</strong>, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as <strong>loadUser</strong> action will be triggered on each re-render.<br><br><strong>index.js</strong><br><img src='./assets/react/authstate.png'><br><br><strong>App.js</strong><br><img src='./assets/react/loaduser1.png'><br><br><strong>loadUser</strong><br><img src='./assets/react/loaduser2.png'></p>"
            },
            {
                "name": "What is state mutation and how to prevent it?",
                "description": "<p><code>State mutation</code> happens when you try to update the state of a component without actually using <code>setState</code> function. This can happen when you are trying to do some computations using a state variable and unknowingly save the result in the same state variable. This is the main reason why it is advised to return new instances of state variables from the reducers by using Object.assign({}, ...) or spread syntax.<br><br>This can cause unknown issues in the UI as the value of the state variable got updated without telling React to check what all components were being affected from this update and it can cause UI bugs.<br><img src='./assets/react/statemutation.png'><br><br><strong>How to prevent it:</strong> Make sure your state variables are immutable by either enforcing immutability by using plugins like Immutable.js, always using <code>setState</code> to make updates, and returning new instances in reducers when sending updated state values.</p>"
            },
            {
                "name": "What is wrong with using Context in React",
                "description": "<ul><li>Context is primarily used when some data needs to be accessible by <em>many</em> components at different nesting levels. Apply it sparingly because <strong>it makes component reuse more difficult</strong>.</li><li>If you only want to avoid passing some props through many levels, component composition is often a simpler solution than context.</li></ul><p>For example, consider a <code>Page</code> component that passes a <code>user</code> and <code>avatarSize</code> prop several levels down so that deeply nested <code>Link</code> and <code>Avatar</code> components can read it:<br><img src='./assets/react/context2.png'><br><br>It might feel redundant to pass down the <code>user</code> and <code>avatarSize</code> props through many levels if in the end only the <code>Avatar</code> component really needs it. It’s also annoying that whenever the <code>Avatar</code> component needs more props from the top, you have to add them at all the intermediate levels too.</p>"
            },
            {
                "name": "Why would you need to bind event handlers to this?",
                "description": "<p>Binding is not something that is specifc to React, but rather how <code>this</code> works in Javascript. When you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class. In JavaScript, class methods are not bound by default. If you forget to <code>bind this.someEventHandler</code> and pass it to <code>onChange</code>, this will be undefined when the function is actually called.<br><br>Generally, if you refer to a method without <code>()</code> after it, such as <code>onChange={this.someEventHandler}</code>, you should bind that method.</p>"
            },
            {
                "name": "How to create Props Proxy for HOC component?",
                "description": "<p>It’s nothing more than a function, propsProxyHOC, that receives a Component as an argument (in this case we’ve called the argument WrappedComponent) and returns a new component with the WrappedComponent within. To create a props proxy for an HOC components, you can use the <strong>React.forwardRef</strong> function<br><img src='./assets/react/propsproxy.png'><br><br>Props Proxy HOCs are useful to the following situations:</p><ol><li>Manipulating props</li><li>Accessing the instance via Refs (be careful, avoid using refs)</li><li>Abstracting State</li><li>Wrapping/Composing the WrappedComponent with other elements</li></ol>"
            },
            {
                "name": "Can you do Components Inheritance in React?",
                "description": "<p>Component inheritance lets the react app make a parent-child component connection and reuse properties like state values and function in its child components.<br><br>Except for the initial component class, which extends from the react package, react does not employ inheritance.<br><br>In react The keyword ‘extends’ is used in inheritance to allow any component connected to the parent to use the attributes and methods of another component./p><p>We can give the current component access to all of the component's properties, including the function, and activate it from the child component by using the ‘extends’ keyword.</p>"
            },
            {
                "name": "How would you store non-state/instance variables in functional React components?",
                "description": "<p>You can use <code>useRef hook</code><code>useRef</code> returns an object whose reference would not change across re-renders, the actual value for foo is then kept in the current property of that object. </p><ul><li>Declaring variable: <code>const a = useRef(5) // 5 is initial value</code></li><li>getting the value: <code>a.current</code></li><li>setting the value: <code>a.current = my_value</code></li></ul>"
            },
            {
                "name": "Explain some difference between Flux and AngularJS (1.x) approach",
                "description": "<p>UI components in AngularJS typically rely on some internal <code>$scope</code> to store their data. This data can be directly mutated from within the UI component or anything given access to <code>$scope</code> — a risky situation for any part of the component or greater application which relies on that data.<br><br>However, the Flux pattern encourages the use of immutable data. Because the store is the central authority on all data, any mutations to that data must occur within the store. The risk of data pollution is greatly reduced.</p>"
            },
            {
                "name": "Architectural difference between React and Angular?  ",
                "description": "<p>As a structural framework, Angular helps develop dynamic web applications, whereas React permits you to develop UI components because it’s a JavaScript library. Similarly, Angular is based on Model-View-Controller (MVC) with TypeScript, while React is entirely based on Virtual DOM with JavaScript.<br><br>Angular uses two-way data binding. It means that whenever any interface element changes, the model state also changes automatically. React uses one-way data binding, which renders the modifications in the interface model only once the model state is updated first. And whenever the UI components get changed, the model state remains the same without any changes.</p>"
            },
            {
                "name": "What is equivalent of this code using React Hooks?",
                "description": "<p><strong>Problem</strong> - Let's say in our project we have <code>componentWillUnmount</code> that is used for cleanup (like removing event listeners, cancel the timer etc). How to refactor this code using React Hooks? <br><img src='./assets/react/solution.png'><br><br><strong>Answer</strong> - React Hooks equivalent of above code will be as follows <br><img src='./assets/react/solution.png'></p>"
            },
            {
                "name": "What is equivalent of the following using React.createElement?  ",
                "description": "<p><strong>Problem</strong><br><img src='./assets/react/reactelement4.png'></p><br><p><strong>Answer</strong><br><img src='./assets/react/reactelement5.png'></p>"
            }
        ]
    },
    {
        "folder": "React Native",
        "title": "React Native",
        "url": "/folder/React Native",
        "icon": "logo-react",
        "question": [
            {
                "name": "What are native apps?",
                "description": "<ul><li>Native mobile apps are the most common type of app. </li><li>They are built for specific platforms and are written in languages that the platform accepts. For example, <code>Swift</code> and <em>Objective-C</em> for native <strong>iOS</strong> apps and <code>Java</code> or <code>Kotlin</code> for native <strong>Android</strong> apps. </li><li>Native apps are also built using the specific <em>Integrated Development Environment</em> (IDE) for the selected operating systems</li></ul>"
            },
            {
                "name": "What are the advantages of using React Native?",
                "description": "<ul><li><strong>Cross-platform compatibility:</strong> Most of the code is cross-platform, meaning developers only have to create one app rather than two separate apps for both iOS and Android</li><li><strong>Real-time feedback:</strong> React Native offers a ‘hot reloading’ feature where developers can immediately view the changes they’ve made in a separate preview window</li><li><strong>Flexible user interface:</strong> React Native’s interface is slick and makes it easy for multiple developers to work on a project together</li><li><strong>Third-party plugins:</strong> React Native is compatible with many third-party plugins that can be used to support and improve the app development process</li><li><strong>Community</strong>: As a popular open-source framework, React Native has a large community of developers that exchange knowledge</li></ul>"
            },
            {
                "name": "What are the main disadvantages of using React Native?",
                "description": "<ul><li><strong>Non-nativity:</strong> React Native isn’t a native solution, which means its apps may be slightly slower than native ones</li><li><strong>Debugging issues:</strong> React Native is built using Javascript, Objective-C, Java, and C or C ++, which can make debugging more difficult</li><li><strong>Memory management:</strong> Limitations on memory mean React Native is not suited to developing computation-intensive apps</li><li><strong>Low security:</strong> React Native’s open-source design leaves apps more exposed to threats, which is especially dangerous for apps containing sensitive information, such as banking services</li><li><strong>Learning curve:</strong> React Native is one of the more challenging software frameworks to learn, especially for junior developers</li></ul>"
            },
            {
                "name": "What are the advantages of native apps over hybrid apps?",
                "description": "<ul><li>They work efficiently as they are built for that specific platforms</li><li>Native apps are responsive on all the platform-specific devices</li><li>They are very fast and the best in the app performance</li><li>Native apps better integrate with mobile hardware</li><li>They have interactive and intuitive User Interface (UI) and User Experience (UX) as per the user expectations based on specific platforms</li><li>Some of the Native mobile apps work even without the Internet connection</li><li>Native apps are secured and reliable</li><li>They can easily access or utilize the other device-specific capabilities like GPS, Camera, Contacts, etc.</li></ul>"
            },
            {
                "name": "How do native apps differ from hybrid apps?",
                "description": "<p>Hybrid apps are developed to be used across all platforms, whereas native apps are developed for a particular platform. React Native is used for the development of hybrid apps.&nbsp;<br><br>While hybrid apps are faster to develop and typically require less maintenance than native apps, they may perform slightly worse than their native counterparts.</p>"
            },
            {
                "name": "What is React Native?",
                "description": "<ul><li><code>React Native</code> is a mobile app development framework that enables the development of multi-platform <strong>Android</strong> and <strong>iOS</strong> apps using native UI elements. </li><li>It is based on the <code>JavaScriptCore</code> runtime and <code>Babel</code> transformers. With this setup react native supports new <code>JavaScript</code> (ES6+) features, e.g. arrow functions, async/await etc.</li><li>This famous framework for <strong>mobile app development</strong> started in the summer of 2013 as Facebook’s internal hackathon project. </li><li>Its first public preview was released in January of 2015 at <code>Reactjs</code> Conference and in March of 2015, Facebook made React Native open and available on GitHub.</li></ul>"
            },
            {
                "name": "What are the core Components in React Native and what do they do? View / Text / Image / ScrollView / TextInput / ListView",
                "description": "<p>The core Components in React Native include:</p><ul><li> <strong>View</strong>: A container that supports layout with flexbox style, some touch handling, and accessibility controls.</li><li> <strong>Text</strong>: Displays, styles, and nests strings of text and even handles touch events.</li><li><strong>Image</strong>:Displays different types of images </li><li> <strong>Props</strong>: You can use props to pass data to different React components. Props are immutable, which means props can’t change their values. </li><li> <strong>States</strong>: You use states to control components. The state is mutable in React, meaning that it can change the value at any time. </li><li> <strong>ScrollView</strong>: A generic scrolling container that can contain multiple components and views.</li><li> <strong>TextInput</strong>: Allows the user to enter text </li><li> <strong>ListView</strong>: is a view component that contains the list of items and displays it in a vertically scrollable list. </li></ul>"
            },
            {
                "name": "What are hybrid apps?",
                "description": "<ul><li>Hybrid mobile apps are applications that are installed on a device, just like any other app.</li><li>Hybrid apps are deployed in a native container that uses a mobile <code>WebView</code> object. When the app is used, this object displays web content thanks to the use of web technologies (<code>CSS</code>, <code>JavaScript</code>, <code>HTML</code>).</li></ul>"
            },
            {
                "name": "List some benefits of using React Native for building mobile apps?",
                "description": "<ul> <li>Known for Optimal Performance</li><li>Large Community of Developers which helps a lot in troubleshooting and resolving bugs</li><li>Offers Simple User Interface</li><li>Can Reuse the Codes and Pre-Developed Components from rect with less modifications as required, and thus result in a Cost Effective Solution</li><li>Providing Handy Solutions and Libraries</li><li>Support for Third-Party Plugins</li></ul>"
            },
            {
                "name": "How do you dismiss the keyboard in react native?",
                "description": "<p>Using <code>Keyboard.dismiss()</code><br><img src='./assets/reactNative/keyboard.png'></p>"
            },
            {
                "name": "What are props in React Native?",
                "description": "<p>Props provide properties to components inserted in a program, which makes components modifiable and customizable. For example, the same component might be used in different parts of an app. When we use props, we can alter the component’s appearance or behavior.<br><img src='./assets/reactNative/props.png'><br><img src='./assets/reactNative/props1.png'></p>"
            },
            {
                "name": "What are the types of data that control a component?",
                "description": "<ul><li>There are two types of data that control a component: <code>props</code> and <code>state</code>.</li><li><code>props</code> are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use <code>state</code>.</li></ul>"
            },
            {
                "name": "What are components?",
                "description": "<ul><li><strong>Components</strong> are the building blocks of any <code>React</code> application.</li><li>Components let you split the UI into <strong>independent</strong>, <strong>reusable</strong> pieces, and think about each piece in <strong>isolation</strong>.</li><li><em>React Native</em> provides a number of built-in components. Some are:- <br>- Basic Components<br>- User Interface<br>- List Views<br>- iOS-specific<br>- Android-specific</li></ul>"
            },
            {
                "name": "How is React Native different from ReactJS?",
                "description": "<ul><li><strong>Usage Scope</strong><br>ReactJs is a JavaScript library for building Responsive User Interfaces for Building Web Application.<br>React Native - It is a framework for creating mobile applications with a native feel.</li><li><strong>Syntax</strong><br>Both React and React Native uses JSX (JavaScript XML) &nbsp;syntax but React uses html tags like &lt;div&gt; &lt;h1&gt; &lt;p&gt; etc while React Native uses &lt;view&gt; &lt;text&gt; etc.</li><li><strong>&nbsp;Animation And Gestures</strong><br>React uses CSS animations on a major scale to achieve animations for a web page while &nbsp;The recommended way to animate a component is to use the Animated API provided by React-Native.</li><li><strong>Routing Mechanism</strong><br>React uses a react-router for routing and does not have any inbuilt routing capabilities but React Native has a built-in Navigator library for navigating mobile applications.</li></ul><br><br><p><strong>Difference between React Native and React</strong></p><table><thead><tr><th>REACT JS</th><th>REACT NATIVE</th></tr></thead><tbody><tr><td>It is used for developing web applications.</td><td>It is used for developing mobile applications.</td></tr><tr><td>It uses React-router for navigating web pages.</td><td>It has a built-in navigator library for navigating mobile applications.</td></tr><tr><td>It uses HTML tags.</td><td>It does not use HTML tags.</td></tr><tr><td>It provides high security.</td><td>It provides low security in comparison to ReactJS.</td></tr><tr><td>In this, the virtual DOM renders the browser code.</td><td>In this, Native uses its API to render code for mobile applications.</td></tr></tbody></table>"
            },
            {
                "name": "Will this piece of code work? view text error",
                "description": "<p><strong>Problem</strong><br><img src='./assets/reactNative/textproblem.png'><br><br><strong>Answer:</strong> <strong>No</strong>.  An error will be thrown as <code>Text</code> strings <strong>must</strong> be rendered within <code>Text</code> component. Because here semi-colon in third line will be treated as text, and in React native all texts needs to be rendered inside <code>Text</code> tag.</p>"
            },
            {
                "name": "When would you use ScrollView over FlatList or vice versa?",
                "description": "<p>ScrollView loads all data items on one screen for scrolling purposes. All the data is stored on RAM, which can cause performance issues for large amounts of data.&nbsp;<br><br>FlatList only displays items that are currently shown on the screen (10 by default), thus sidestepping any performance issues.<br><br>Therefore, it is best to use FlatList for large datasets, whereas ScrollView can be used for smaller datasets.</p>"
            },
            {
                "name": "Tell us some options of storing persisting data in a react native app?",
                "description": "<ul><li>Async Storage (\"built-in\" to React Native)</li><li>SQLite</li><li>Realm</li><li>Firebase</li><li>MongoDB</li></ul>"
            },
            {
                "name": "What is the storage system in React Native?",
                "description": "<p>React Native <strong>AsyncStorage</strong> is a simple, unencrypted, asynchronous, persistent, storage system which stores the data globally in the app. It store data in the form of a key-value pair.<br><br>React Native recommended to use abstraction on top of <strong>AsyncStorage</strong> instead of AsyncStorage directly as it operates globally.<br><br>On iOS, <strong>AsyncStorage</strong> is approved by the native code. The iOS native code stores the small values in a serialized dictionary and the larger values in separate files.<br><br>On Android, AsyncStorage will use either <strong>SQLite</strong> or <strong>RocksDB</strong> based on the availability.<br><br>To use the AsyncStorage, import <strong>AsyncStorage</strong> library as:</p><strong>import {AsyncStorage} from 'react-native';</strong><p>To persist data</p><strong>AsyncStorage.setItem('key', 'value');</strong><p>To fetch data</p><strong>await AsyncStorage.getItem('key');</strong>"
            },
            {
                "name": "What determines the size of a component and what are the ways?",
                "description": "<ul><li>The <strong>height</strong> and <strong>width</strong> determine the size of component on the screen.</li><li>Two different ways to set height and width. <br>- Fixed Dimensions<br>- Flex Dimensions</li></ul>"
            },
            {
                "name": "What does the Gesture Responder System do?",
                "description": "<p>The <strong>gesture responder system</strong> manages the lifecycle of gestures in an app.</p>"
            },
            {
                "name": "State the lifecycle of Gesture Responder System?",
                "description": "<p>A touch event has three phases: start, move and release.<br><br><img src='./assets/reactNative/gesture.jpg'></p><ol><li><p><strong>Request</strong>A view can request to become the touch responder in the: - start phase by returning <code>true</code> from <code>onStartShouldSetResponder</code> - move phase by returning <code>true</code> from <code>onMoveShouldSetResponder</code></p></li><li><p><strong>Bubbling</strong> Similar to the web, these negotiation functions are called in a bubbling pattern. Therefore, the deepest component will become the responder.</p></li><li><p><strong>Override</strong> However, a parent can choose to override and claim responsibility. This is done by returning true from either <code>onStartShouldSetResponderCapture</code> or <code>onMoveShouldSetResponderCapture</code>.</p></li><li><p><strong>Granted or Rejected</strong> If a view's request is granted or rejected <code>onResponderGrant</code> or <code>onResponderReject</code> is invoked appropriately.</p></li><li><p><strong>Respond</strong> Finally the view can then respond using one of the following handlers:</p></li></ol><ul><li><code>onResponderMove</code></li><li><code>onResponderRelease</code></li><li><code>onResponderTerminationRequest</code></li><li><p><code>onResponderTerminate</code></p></li></ul><p>After a view has successfully claimed touch responder status, its relevant event handlers may be called.</p>"
            },
            {
                "name": "Describe Flexbox along with its most used properties.",
                "description": "<p><strong>Flexbox</strong> is a layout model that enables elements to coordinate and distribute space within containers. It provides a consistent layout on different screen sizes.<br><br>The main properties in Flexbox are <code>flexDirection</code>, <code>justifyContent</code>, and <code>alignItems</code>. Let's discuss what each of these properties does:</p><ul> <li> <strong>flexDirection ('column','row')</strong>: used to specify the alignment of elements (vertical or horizontal) </li><li> <strong>justifyContent ('center','flex-start','flex-end','space-around','space-between')</strong>: used to decide how elements should be distributed inside a given container </li><li> <strong>alignItems ('center','flex-start','flex-end','stretched')</strong>: used to specify the distribution of elements inside a given container along the secondary axis </li></ul>"
            },
            {
                "name": "differences between Flexbox in browser and in React Native?",
                "description": "<p>Flexbox generally works in the same way in React Native as it does in CSS on the web. However, there are a few minor differences in the values. These include:</p><ul><li>The default value in React Native is column, whereas the default value for CSS is row</li><li>The default value in React Native is flex-start, whereas the default value for CSS is stretch</li><li>The default value in React Native is 0, whereas the default value for CSS is 1</li></ul>"
            },
            {
                "name": "What is flex dimension and how is it different from fixed dimension?",
                "description": "<ul><li>The  <strong>flex</strong>  property styles the component to expand and shrink it dynamically according to available space unlike fixed dimension where a specific height, width is specified. </li><li>Setting <code>flex: 1</code> will fill all the available space to the component, and shared evenly among the other components of same as the parent. </li><li>Higher the flex value, occupy component higher ratio of space compared to its siblings.</li></ul>"
            },
            {
                "name": "How are props and state different?",
                "description": "<ul><li><strong>props :</strong> are <em>immutable</em> and are set by the parent and they are fixed throughout the lifetime of a component.</li><li><strong>state :</strong> is <em>mutable</em>. This means that state can be updated in the future while props can’t. we can initialize state in the constructor, and then call setState when we want to change it.</li></ul><p>Some other things to consider:</p><ul><li>Use props to pass data and settings through the component tree.</li><li>Never modify <code>this.props</code> inside of a component; consider props immutable.</li><li>Use props to for event handlers to communicate with child components.</li><li>Use state for storing simple view state like wether or not drop-down options are visible.</li><li>Never modify <code>this.state</code> directly, use <code>this.setstate</code> instead.</li></ul>"
            },
            {
                "name": "What does TouchableHighlight do and when do you use it?",
                "description": "<p><code>TouchableHighlight</code> darkens or lightens the background of the element when pressed.<br><br>It is mostly used on <strong>iOS</strong> for touchable elements or buttons that have a solid shape or background, and on <code>ListView</code> items.</p>"
            },
            {
                "name": "What are some features of Fast Refresh?",
                "description": "<ul><li>Fast Refresh <strong>preserves</strong> React <em>local state</em> in function components (and Hooks) by default.</li><li>Fast Refresh <strong>always</strong> remounts class components without preserving state. This ensures it works reliably.</li><li>Fast Refresh automatically retries rendering after a file is saved.</li><li><code>// @refresh reset</code> comment can be used to reset the React state on every edit.</li></ul>"
            },
            {
                "name": "How do you perform logging in React native?",
                "description": "<ul><li>Use  <code>console.log</code>,  <code>console.warn</code>  etc.</li><li>Use  <code>console.debug(\"text\");</code> to see the logs inside the terminal.</li></ul><p><strong>Steps:</strong><br><strong>#1. Run the application:</strong><br>react-native run-ios        # For iOS<br>react-native run-android    # For Android <br><br><strong>#2. Run the logger</strong><br>react-native log-ios        # For iOS<br>react-native log-android    # For Android </p>"
            },
            {
                "name": "How are Hot Reloading and Live Reloading in React Native different?",
                "description": "<p>Live reloading in React Native refreshes the entire app when a file changes, whereas hot reloading only refreshes the files that were changed.&nbsp;<br><br>When hot reloading is used on an app, the state remains the same and the developer is returned to the page they started on. The opposite is true for live reloading.</p>"
            },
            {
                "name": "What is Fast Refresh?",
                "description": "<ul><li>It is a React Native feature that allows you to get <strong>near-instant</strong> feedback for changes in your React components.</li><li>Most edits should be visible within a second or two.</li></ul>"
            },
            {
                "name": "What happens if you edit modules with exports that aren't React components in Fast Refresh?",
                "description": "<ul><li>Fast Refresh will <strong>re-run</strong> both that module, and the other modules importing it. </li><li>So if both Button.js and Modal.js import Theme.js, editing Theme.js will update both components.</li></ul>"
            },
            {
                "name": "What happens if you edit a module that only exports React components in Fast Refresh?",
                "description": "<ul><li>Fast Refresh will <strong>update</strong> the code <em>only</em> for that module, and <em>re-render</em> that component. </li><li><em>Anything</em> can be edited in that file, including styles, rendering logic, event handlers, or effects.</li></ul>"
            },
            {
                "name": "what happen if you edit files imported by modules outside of the React Tree in Fast Refresh?",
                "description": "<ul><li>Fast Refresh will fall back to doing a full reload. </li><li>For a file which renders a React component but also exports a value that is imported by a non-React component, consider <strong>migrating</strong> the query to a separate file and importing it into both files. This will <strong>re-enable</strong> Fast Refresh to work.</li></ul>"
            },
            {
                "name": "What is View and how important is it?",
                "description": "<ul><li><code>View</code> is the most fundamental component for building a UI in react native.</li><li>View is a container that supports layout with flexbox, style, some touch handling, and accessibility controls.</li><li><code>View</code> maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a <code>UIView</code>, <code>&lt;div&gt;</code>, <code>android.view</code>, etc.</li><li><code>View</code>  is designed to be nested inside other views and can have 0 to many children of any type.</li></ul>"
            },
            {
                "name": "What is State in react native?",
                "description": "<p>In React Native, the state refers to information about a property at a given time. Unlike props, the state is mutable; it can change. Typically, this will occur when a user interacts with the component.<br><br>For example, if your app had a filling form that users are invited to complete, the state of that component would change when the user types something in.<br><br><img src='./assets/reactNative/state.png'><br><img src='./assets/reactNative/state1.png'></p>"
            },
            {
                "name": "What are Touchable components / Interactions in react Native and which one to use when?",
                "description": "<p>Tapping gestures can be captured by Touchable components and can display feedback when a gesture is recognized.<br><br>React Native provides <strong>4</strong> separate components for handling touch interactions, Depending on what kind of feedback you want to provide <br><br>Generally, we use <strong>TouchableHighlight</strong> anywhere you would use a button or link on the web. The background of the view will be darkened when the user presses down on the button.<br><br>We can use <strong>TouchableNativeFeedback</strong> on Android to display ink surface reaction ripples that respond to the user's touch.<br><br><strong>TouchableOpacity</strong> can be used to provide feedback by reducing the opacity of the button, allowing the background to be seen through while the user is pressing down.<br><br>If we need to handle a tap gesture but you don't want any feedback to be displayed, use <strong>TouchableWithoutFeedback</strong>.</p>"
            },
            {
                "name": "Explain Flatlist component and What is the use of FlatList?",
                "description": "<p>The <strong>FlatList component</strong> displays similarly structured data in a scrollable list. It works well for large lists of data where the number of list items might change over time. <br><br><strong>Key Feature:</strong> The FlatList shows only those rendered elements which are currently displaying on the screen, not all the elements of the list at once.</p><br><br><strong>use of FlatList</strong><ul><li><code>FlatList</code> renders items lazily, when they are about to appear, and removes items that scroll way off screen to save memory and processing time.</li><li>The  <code>FlatList</code>  component displays a scrolling list of changing, but similarly structured, data.</li><li><code>FlatList</code>  works well for long lists of data, where the number of items might change over time. Unlike the more generic  <code>ScrollView</code>, the  <code>FlatList</code>  only renders elements that are currently showing on the screen, not all the elements at once.</li></ul>"
            },
            {
                "name": "How do you re-render a FlatList?",
                "description": "<p>By using <code>extraData</code> property on the <code>FlatList</code> component.<br><br><img src='./assets/reactNative/flatlistrerender.png'><br><br>By passing <code>extraData={this.state}</code> to <code>FlatList</code> we make sure <code>FlatList</code> will re-render itself when the <code>state.selected</code> changes. Without setting this prop, <code>FlatList</code> would not know it needs to re-render any items because it is also a <code>PureComponent</code> and the prop comparison will not show any changes.</p>"
            },
            {
                "name": "What are some best practices to consider for an action?",
                "description": "<p>To improve UX, every action should have the following attributes:</p><ul><li><strong>Feedback/highlighting</strong>- show the user what is handling their touch, and what will happen when they release the gesture</li><li><strong>Cancel-ability</strong> - when making an action, the user should be able to abort it mid-touch by dragging their finger away</li></ul><p>These features make users more comfortable while using an app, because it allows people to experiment and interact without fear of making mistakes.</p>"
            },
            {
                "name": "How do you style a component in react native?",
                "description": "<ul><li>With React Native, you style your application using JavaScript. </li><li>All of the core components accept a prop named  <code>style</code>. The style names and  values usually match how CSS works on the web, except names are written using camel casing, e.g.  <code>backgroundColor</code>  rather than  <code>background-color</code>.</li><li>The  <code>style</code>  prop can be a plain old <code>JavaScript</code> object. That's the simplest and what we usually use for example code. </li><li>You can also pass an array of styles - the last style in the array has precedence, so you can use this to inherit styles.</li></ul><p>As a component grows in complexity, it is often cleaner to use  <code>StyleSheet.create</code>  to define several styles in one place. Here's an example:<br><br><img src='./assets/reactNative/reactstyle.png'></p>"
            },
            {
                "name": "What is the use of ScrollView component?",
                "description": "<ul><li>The <code>ScrollView</code> is a generic scrolling container that can contain multiple components and views. The <strong>scrollable</strong> items need not be homogeneous, and you can scroll both vertically and horizontally (by setting the <code>horizontal</code> property).</li><li><code>ScrollView</code>  renders all its react child components at once, but this has a performance downside.</li></ul>"
            },
            {
                "name": "What is Lifting State Up?",
                "description": "<p>When several components need to share the same changing data then it is recommended to lift the shared state up to their <strong>closest common ancestor</strong>. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.</p>"
            },
            {
                "name": "What is 'autolinking' in react-native?",
                "description": "<p><strong>Autolinking</strong> is a mechanism built into the react-native-cli that allows adding a dependency with <strong>native</strong> components for React Native to be as simple as:<br><br><img src='./assets/reactNative/yarnlink.png'><br><br>Autolinking is a replacement for <code>react-native link</code> that brings new features (such as ability to easily integrate native dependencies on iOS) and fixes some of the long-standing issues.</p>"
            },
            {
                "name": "What is AppRegistry? Why is it required early in \"require\" sequence?",
                "description": "<ul><li><code>AppRegistry</code> is the JS entry point to running <strong>all</strong> React Native apps. </li><li>App root components should register themselves with <code>AppRegistry.registerComponent</code>, then the native system can load the bundle for the app and then actually run the app when it's ready by invoking <code>AppRegistry.runApplication</code>.</li></ul><p><code>AppRegistry</code> should be required early in the <code>require</code> sequence to make sure the JS execution environment is setup before other modules are required.</p>."
            },
            {
                "name": "What does StyleSheet.create do and why is it useful?",
                "description": "<p>A <code>StyleSheet</code> is an abstraction similar to CSS StyleSheets. <code>StyleSheet.create</code> creates a StyleSheet style reference from the given object.<br><img src='./assets/reactNative/styleSheet.png'><br>Use a StyleSheet:<br><img src='./assets/reactNative/styleSheet1.png'><br><br><code>StyleSheet</code> are useful because:</p><ul><li>By moving styles away from the render function, you're making the code easier to understand.</li><li>Naming the styles is a good way to add meaning to the low level components in the render function.</li></ul>"
            },
            {
                "name": "What are Container/Smart components?",
                "description": "<ul><li>React components which have access to the store.</li><li>These components make API calls, do processing and contain the business logic of the app.</li><li>The job of container components is to compute the values and pass them as props to the presentational components</li></ul><br><br><p><strong>Features of container/smart components</strong></p><ul><li>are concerned with how things work.</li><li>don’t usually have any markup of their own except for some wrapping Views, and never have any styles.</li><li>provide the data and behavior to presentational or other container components.</li><li>call Redux actions and provide these as callbacks to the presentational components.</li><li>are often stateful, as they tend to serve as data sources.</li><li>are usually generated using higher order components such as connect() from React Redux, <code>createContainer()</code> from Relay, or <code>Container.create()</code> from Flux Utils, rather than written by hand.</li></ul><br><img src='./assets/reactNative/smart.png'>"
            },
            {
                "name": "What are Presentational/Dumb Components?",
                "description": "<ul><li>Components whose only job is to render a view according to the styling and data passed to them.</li><li>They do not contain any business logic</li><li>They don't have direct access to data stores. Data is passed to them via <code>props</code>.</li></ul><br><br><p><strong>Features of presentational/dumb components</strong></p><ul><li>are concerned with how things look.</li><li>have markup and styles of their own.</li><li>have no dependencies on the rest of the app, such as Redux stores.</li><li>don’t specify how the data is loaded or mutated.</li><li>receive data and callbacks exclusively via props.</li><li>rarely have their own state (when they do, it’s UI state rather than data).</li></ul><br><img src='./assets/reactNative/dumb.png'>"
            },
            {
                "name": "What is Component Driven Development (CDD)?",
                "description": "<ul><li>A <strong>component</strong> is a well-defined and independent piece of our app's UI. A chat window, a button, a slider are all components.</li><li>Components can also be composed out of smaller components and fragments. Each is a building block.</li><li>Modern frameworks such as  <strong>React</strong>, <strong>Vue</strong>, <strong>React Native</strong>, etc.  let us build our applications through <strong>modular</strong> components, providing the patterns and tools needed to develop each component in separation and compose them together.</li><li><strong>Component-driven development</strong> means designing your software applications by building loosely-coupled <strong>independent</strong> components. </li><li>Each component has an interface to communicate with the rest of the system, and multiple components are composed together into a modular application.</li></ul>"
            },
            {
                "name": "What are some advantages of Component Driven Development - CDD?",
                "description": "<ul><li><strong>Faster development</strong>: Separating development into components lets you build modular parts with narrowly-focused APIs.</li><li><strong>Simpler maintenance</strong>: When you need to modify or update a part of your application, you can extend or update the component instead of having to refactor larger parts of your application.</li><li><strong>Better reusability</strong>: Through the separation of concerns components can be reused and extended to build multiple application instead of having to rewrite them over and over again</li><li><strong>Better TDD</strong>: Larger systems can be more easily tested as it's easier to understand and separate the responsibilities of every part of the system.</li><li><strong>Shorter learning curves</strong>: It's much easier to learn and understand the structure of a defined component than dive into an entire application.</li><li><strong>Better modeling of the system</strong>: When a system is composed out of modular components, it's easier to grasp, understand and operate on.</li></ul>"
            },
            {
                "name": "What does React Native Packager do in the React Native?",
                "description": "<ul><li>Transpile and bundle all the JavaScript code into a single file.</li><li>Convert the assets (e.g., PNG file) used in the project into objects, which can be displayed by an <code>Image</code> component.</li></ul>"
            },
            {
                "name": "What are some limitations of using react-native-cli for instantiating a project?",
                "description": "<ul><li>Needs <em>Android Studio</em> and/or <em>XCode</em> to run the projects</li><li>You can't develop for iOS without having a mac.</li><li>Device has to be connected via USB to use it for testing.</li><li>Fonts need to be imported manually in XCode.</li><li>If you want to share the app you need to send the whole .apk / .ipa file</li><li>Does not provide JS APIs out of the box, e.g. Push-Notifications, Asset Manager, they need to be manually installed and linked with npm for example</li><li>Setting up a working project properly (inlcuding device configuration) is rather complicated and can take time.</li></ul>"
            },
            {
                "name": "What is AsyncStorage and how do you use it?",
                "description": "<p>AsyncStorage is React Native’s key-value, unencrypted storage module that allows developers to store data for offline use. Typically, it’s used to store data when an app is not linked to a cloud service, or when specific features require data storage.<br><br><img src='./assets/reactNative/asyncStorage.png'></p>"
            },
            {
                "name": "What JavaScript engine does React native use?",
                "description": "<p>React Native uses two engines.</p><ul><li><code>JavaScriptCore</code> engine is used primarily, which Safari browser runs on. </li><li><code>V8</code> engine is used when using Chrome debugging. All JavaScript code runs within Chrome itself, communicating with native code via WebSockets.</li></ul>"
            },
            {
                "name": "Difference between ScrollView and FlatList?",
                "description": "<ul><li><code>ScrollView</code>  renders all its react child components at once, but this has a performance downside while <code>FlatList</code> renders items lazily, when they are about to appear, and removes items that scroll way off screen to save memory and processing time.</li><li><code>FlatList</code>  is built to render a large list of items. <code>ScrollView</code>  is built to render a generic content in a way that it scrolls when the content is bigger than the  <code>ScrollView</code>  itself.  </li><li><code>FlatList</code> is optimized to have very good performances with very large arrays because it actually only renders the items that need to be displayed at the moment while <code>ScrollView</code> does not provide the same optimization of the flat list for very long content.</li><li>Component state is <strong>not</strong> maintained with the <code>FlatList</code> component but component state is maintained with <code>ScrollView</code> This is due to the fact that <code>ScrollView</code> renders all the children in one go and maintains them. Meanwhile, <code>FlatList</code> unmounts components once they are way off the screen and recreates them from scratch once the item comes back from screen (thus state is lost).</li></ul>"
            },
            {
                "name": "Are libraries such as TypeScript that compile to JavaScript compatible with React Naive?",
                "description": "<ul><li>Languages that compile to JavaScript are generally compatible with React Native. </li><li>React Native uses <strong>Babel</strong> to transform JavaScript into a form that is consumable by the native OS’s JavaScript runtime, using the <code>react-native</code> Babel plugin. </li><li>As long as Babel can compile your JavaScript, and your code does not rely on web- or Node.js-specific dependencies, it will run in React Native.</li></ul>"
            },
            {
                "name": "How would you implement animations on events?",
                "description": "<p>React Native comes with the  <code>Animated</code>  API built in. This API is declarative: We define specific animations, using  <code>Animated.timing</code>,  <code>Animated.spring</code>, etc., and provide the exact parameters needed for the animation to run. This technique falls apart when we need lots of subtle and delicate animations on the fly; it’s not performant, and maintaining all that code would be a nightmare.<br><br>Instead, we look to the  <code>LayoutAnimation</code>  module, which is an interpolative API. We can invoke predefined  <code>LayoutAnimation</code>s, or define our own.  <code>LayoutAnimation</code>  watches changes in the positions of elements between cycles of the render loop, and computes the positional differences between elements at different cycles. Then, it interpolates those changes and produces a smooth, natively driven animation.</p>"
            },
            {
                "name": "How many threads run in a React Native app?",
                "description": "<p>The single sequential flow of control within a program can be controlled by a thread.<br><br><strong>React Native right now uses 3 threads:</strong></p><ul><li><strong>MAIN/UI &nbsp;Thread</strong> — This is the main application thread on which your Android/iOS app is running. The UI of the application can be changed by the Main thread and it has access to it .<br>&nbsp;</li><li><strong>Shadow Thread</strong> — layout created using React library in React Native can be calculated by this and it is a background thread.<br>&nbsp;</li><li><strong>JavaScript Thread</strong> — The main Javascript code is executed by this thread.</li></ul>"
            },
            {
                "name": "Does React Native compile JavaScript into Java for Android?",
                "description": "<p>Basically, Javascript communicates with native components (Java on Android, Objective C on iOS, C# on Windows).<br><br>The communication occurs through the so-called \"<strong>bridge</strong>\". If at any time you feel that this communication slows things down too much, you can choose to implement the Javascript functionality in Java, Objective C or C# respectively in order to run purely native. In this case, you are writing directly in native code, so there's no Javascript to native compilation.</p>"
            },
            {
                "name": "What are some benefits of Container-Presentational pattern?",
                "description": "<ul><li><strong>Less code duplication</strong>. Because you are forced to move all the layout components out as separate presentational components, you can directly reuse them instead of copy-pasting the code in every page.</li><li>Presentational components are essentially your app’s View layer. Hence, you can change the styling without touching the app's logic.</li><li><strong>Better separation of concerns</strong>. You understand your app and your UI better by writing components this way.</li><li><strong>Better reusability</strong>. You can use the same presentational component with completely different state sources, and turn those into separate container components that can be further reused.</li></ul>"
            },
            {
                "name": "Does React Native have a Virtual DOM?",
                "description": "<p><strong>Yes</strong>, just like Virtual DOM in React, React Native creates a <strong>tree hierarchy</strong> to define the initial layout and creates a diff of that tree on each layout change to optimize the renderings. <strong>Except</strong> React Native manages the UI updates through couple of architecture layers that in the end translate how views should be rendered while trying to optimize the changes to a minimum in order to deliver the fastest rendering possible.</p>"
            },
            {
                "name": "What is wrong with this code for querying a native API?",
                "description": "<p><strong>Problem</strong><br><img src='./assets/reactNative/gyroPosition.png'></p><br><p><strong>Answer</strong> - <br><br>This code will always throw an error because the value of <code>gyroscopePosition</code> will always be an unresolved <code>Promise</code>. <br><br>It’s important to remember that the <strong>bridge</strong> that connects JavaScript and native code is <em>asynchronous</em>. We can either receive results from this side by passing in a callback (not done in this example), or by returning a <code>Promise</code>. In this case, we need to append a <code>then()</code> call to the <code>gyroPosition()</code> call and set the position <em>inside</em> it.</p>"
            },
            {
                "name": "What is Fabric in React Native?",
                "description": "<p>Fabric is a modern type of architecture that was first created in 2018 and aims to address some of React Native’s performance issues. Fabric modernizes the framework’s rendering layer by allowing specified priority tasks to be executed synchronously and, therefore, quicker. <br><br>There are basically three main principles of Fabric :</p><ul><li><strong>Prioritizing the Tasks</strong> : - JavaScript treats all async events as the same and all of the events/processes are treated equally in terms of resource allocation - With <strong>Fabric</strong>, the user interactions such as scrolling, touch, hold, gestures etc will be prioritized and will be executed <strong>synchronously</strong> in the main thread or native thread. - Other tasks such as API requests will be executed asynchronously.</li><li><strong>Immutable Shadow Tree</strong> - This is a very important concept which would ensure that there would not be any deadlock condition independent of a synchronous or asynchronous request. - With this, it won’t matter where the changes are coming from as long as our tree is consistent with all other thread that it is being shared with.</li><li><strong>Reducing Memory Consumption</strong> - A new concept is introduced to keep a single copy of DOM nodes, instead of 2, in the memory while the other threads such as JavaScript would only have a reference of it to perform any operations.</li></ul>"
            },
            {
                "name": "How does the Fabric architecture work?",
                "description": "<p>In the new <strong>Fabric</strong> architecture, there are still three threads but designed in a way to make them as performant and efficient as possible. <br><br>The first main concept that is used is, now the tasks are divided into <strong>sync</strong> and <strong>async</strong> instead of only async. It enables us to perform the important UI operations first and in sync with the frame rate of the mobile screen. In this way, absolute no frame is dropped as the tasks are executed in sync with the user interactions (high priority). Also as any thread can bring out the changes in the Shadow thread (synced with the main thread for priority tasks), it would have to be made immutable to have the consistency and avoid deadlocks.<br><br>The other important concept which would greatly reduce the memory consumption is using references instead of a whole new copy of the DOM nodes. This is very helpful in having consistent and efficient DOM nodes. Also with the reference, we can perform any operation that we would have done with its copy but in a much quicker way.</p>"
            },
            {
                "name": "How is InteractionManager important?",
                "description": "<p><code>InteractionManager</code>  is very important because React Native has two threads. There is a JavaScript UI thread which handles drawing updates to the screen, and another thread used for all tasks not on the UI thread. <br><br>Since there is only one thread for making UI updates, it can get overloaded and drop frames, especially during things like navigation screen animations. <br><br>We use the  <code>InteractionManager</code>  to ensure that our function is executed  <em>after</em>  these animations occur so that we do not drop frames on the UI thread. Trying to draw a new screen while it is being animated is often too much for the thread to handle.</p>"
            },
            {
                "name": "What is InteractionManager and how is it used?",
                "description": "<p>In React Native, the interaction manager is used to defer the execution of a function until a specified ‘interaction’ has been completed.&nbsp;<br><br>This is important as React Native is single-threaded in nature, meaning queued animations on the UI can become congested. The interaction manager helps with this issue and ensures that animations run smoothly in a scheduled manner.</p>"
            },
            {
                "name": "How is user Input Handled in React Native ?",
                "description": "<p>TextInput is a Core Component that allows the user to enter text. It has an onChangeText prop that takes a function to be called every time the text changes, and an onSubmitEditing prop that takes a function to be called when the text is submitted.<br><br><pre><strong>Example</strong><br>&lt;TextInput<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style={{height: 40}}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder=\"Type here to translate!\"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onChangeText={text => setText(text)}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultValue={text}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&gt;</pre></p>"
            },
            {
                "name": "What is Redux in React Native and give important components of Redux used in React Native app ?",
                "description": "<p>Redux is a predictable state container for JavaScript apps. It helps write applications that run in different environments. This means the entire data flow of the app is handled within a single container while persisting previous state.<br><br><u>Actions:</u> are payloads of information that send data from your application to your store. They are the only source of information for the store. This means if any state change is necessary the change required will be dispatched through the actions.<br><br><u>Reducers:</u> “Actions describe the fact that something happened, but don’t specify how the application’s state changes in response. This is the job of reducers.” when an action is dispatched for state change its the reducers duty to make the necessary changes to the state and return the new state of the application.<br><br><u>Store:</u> a store can be created with help of reducers which holds the entire state of the application. The recommended way is to use a single store for the entire application rather than having multiple stores which will violate the use of redux which only has a single store.<br><br><u>Components:</u> this is where the UI of the application is kept.</p>"
            },
            {
                "name": "List down Key Points to integrate React Native in an existing Android mobile application",
                "description": "<p>Primary points to note to integrating React Native components into your Android application are to:</p><ul><li>Set up React Native dependencies and directory structure.</li><li>Develop your React Native components in JavaScript.</li><li>Add a ReactRootView to your Android app. This view will serve as the container for your React Native component.</li><li>Start the React Native server and run your native application.</li><li>Lastly, we need to Verify that the React Native aspect of your application works as expected.</li></ul>"
            },
            {
                "name": "How is the entire React Native code processed to show the final output on a mobile screen",
                "description": "<p>The process for rendering code in React Native is the following:</p><ol><li>When the app is opened, the main thread (or UI thread) starts execution by loading JavaScript bundles</li><li>Once the JavaScript code has been loaded successfully, the main thread sends it to the second JS thread where more calculations are performed</li><li>When React Native starts rendering, the reconciler algorithm generates a virtual DOM or layout, which is then sent to a third shadow thread</li><li>The shadow thread calculates a new DOM and sends the layout characteristics to the main UI thread</li><li>The UI thread then renders the received DOM for display on the mobile app</li></ol>"
            },
            {
                "name": "What is a bridge and why is it used in React Native ? Explain for both android and IOS ?",
                "description": "<p>Bridge in ReactNative is basically a transport layer which acts as a connection between Javascript and Native modules, it does the work of transporting asynchronous serialized batched response messages from JavaScript to Native modules.<br><br>In the rendering process: <br><ul><li>The bridge first receives the user response to open the app from the Native module</li><li>It then passes the serialized payload to the JavaScript module</li><li>Once the event has been processed and a virtual DOM has been generated in the JavaScript module, the bridge receives the serialized batched response</li><li>The bridge passes the serialized batched response to the Native module for final rendering</li></ul>"
            },
            {
                "name": "How can you write different code for IOS and Android in the same code base ? Is there any module available for this ?",
                "description": "<p>The <strong>Platform</strong> module detects the platform in which the app is running.<br><img src='./assets/reactNative/platform.png'><br><br>Additionally <strong>Platform.select</strong> method available that takes an object containing <strong>Platform.OS</strong> as keys and returns the value for the platform you are currently on.<br><br><img src='./assets/reactNative/platform1.png'></p>"
            },
            {
                "name": "What’s the real cause behind performance issues in React Native ?",
                "description": "<p>The performance issue in React Native app occurs when you’re passing the components from one thread to another unnecessarily or more than required.<br><br>Where as Some of the most common performance issues in React Native include:</p><ul><li><strong>High CPU usage:</strong> Offloading complex functions to the JavaScript thread can cause performance issues</li><li><strong>Memory leak: </strong>Information can be lost in the Bridge during the transfer from the Primary to the React Native domains, especially in Android apps</li><li><strong>Slow navigation:</strong> Multiple thread bridging can also cause slower navigation times</li></ul><br><br><p>A major thumb rule to avoid any kind of performance-related issue in React Native is to keep the passes over the bridge to a minimum. </p><ul><li>Native thread built for running Java/ Kotlin, Swift/ Objective C</li><li>Javascript thread is the primary thread that runs everything from javascript-based animations to other UI components</li><li>The bridge as the name suggests acts as an &nbsp;intermediate communication point for the native and JS thread</li></ul>"
            },
            {
                "name": "List down some of the steps to optimize the application.",
                "description": "<p><strong>Some commonly used techniques</strong></p><ul><li>Remove all console statements</li><li>Resize and scale down images</li><li>Cache images internally</li><li>Compress or convert raw JSON data</li><li>Use code splitting for large lists</li><li>Schedule animations</li><li>Remove unnecessary libraries and features</li></ul><p><strong>Advanced answer</strong></p><ul> <li>Use key attribute on list items, it helps React Native to pick which list to update when rendering a long list of data&nbsp;</li><li>Compress images and other graphic elements. Another option to reduce image size is using file types like APNG in place of PNG files.</li><li>Optimize native libraries.</li><li>Optimize the number of state operations and remember to use pure and memoized components when needed</li><li>Clear all the active timers which may lead to heavy memory leakage issues.</li><li>Use Global State wisely for example worst-case scenario is when state change of single control like TextInput or CheckBox propagates render of the whole application. Use libraries like Redux or Overmind.js to handle your state management in a more optimized way.</li><li>Use VirtualizedList, FlatList, and SectionList for large data sets.</li><li>Don’t store raw JSON data, &nbsp;eIther we need to Compress it or convert it into static object IDs.</li><li>Use Proguard to minimize the application size.(It does this by stripping parts of the React Native Java bytecode (and its dependencies) that your app is not using)</li><li>Create reduced-sized APK files for specific CPU architectures. When you do that, your app users will automatically get the relevant APK file for their specific phone's architecture. This eliminates the need to keep JSCore binaries that support multiple architectures and consequently reduces the app size.</li></ul>"
            },
            {
                "name": "Explain setNativeProps. Does it create Performance issues and how is it used ?",
                "description": "<p>It is sometimes necessary to make changes directly to a component without using state/props to trigger a re-render of the entire subtree. When using React in the browser, for example, you sometimes need to directly modify a DOM node, and the same is true for views in mobile apps. setNativeProps is the React Native equivalent to setting properties directly on a DOM node.<br>Use setNativeProps when frequent re-rendering creates a performance bottleneck.<br><br>Direct manipulation will not be a tool that you reach for frequently; you will typically only be using it for creating continuous animations to avoid the overhead of rendering the component hierarchy and reconciling many views. setNativeProps is imperative and stores state in the native layer (DOM, UIView, etc.) and not within your React components, which makes your code more difficult to reason about. Before you use it, try to solve your problem with setState and shouldComponentUpdate.</p>"
            },
            {
                "name": "When should setNativeProps be used in React Native?",
                "description": "<p>In React Native, setNativeProps is used to change a component directly on a DOM node rather than in the app’s state. While this can help to solve issues, it also makes code more difficult to work with in the future.&nbsp;<br><br>It’s considered a backup solution to performance issues linked to animations, and should only be used if setState and shouldComponent fail to resolve the problem.</p>"
            },
            {
                "name": "How do you start / run the React Native app development?",
                "description": "<p>Starting a project from scratch is always a little bit harder that is why there are some tooling available which we can use to bootstrap a React Native project.<br><br><strong>#1. Using react-native-cli</strong> - It creates a pure react native application. You can see ios and android folder in a directory structure as they are required to run React native application successfully on the device. <br><br><strong>#2 Using expo-cli</strong> - is a third party tooling which provides base files and easy setup steps to start React Native app development. It also provides barcode based steps to share the app with other team members. The only drawback here is the size of the basic app is considerably big as expo cli includes few expo based libraries with the app.</p>"
            },
            {
                "name": "What is the role of timers in a React Native app?",
                "description": "<p>In React Native, timers allow developers to manipulate the order in which events in a program occur. There are four different types of timers, each one serving a different purpose:</p><ol><li><strong>Timeout</strong> implements a delay</li><li><strong>Interval </strong>allows repeat actions to occur at given intervals</li><li><strong>Immediate </strong>allows actions to occur as soon as possible</li><li><strong>Animation </strong>allows animations to display when the program is ready to render frames</li></ol>"
            },
            {
                "name": "How do you create a basic button in React Native?",
                "description": "<p>We can create basic buttons using the following syntax: &lt;import { View, Button, StyleSheet } from “react-native”&gt;. Basic buttons support a minimal level of customization and can be modified using TouchableOpacity or TouchableWithoutFeedback.</p>"
            },
            {
                "name": "How do you import components in React Native?",
                "description": "<p>In React Native, you can import components from scratch, or also import ready-made ones from another file.&nbsp;<br><br>To import a component, you need to type &lt;import { Component } from ‘react-native’&gt;, changing the word in brackets depending on the type of component you want to import.</p>"
            },
            {
                "name": "How can sensitive data be stored securely in React Native?",
                "description": "<p>Most React Native data is stored in Async Storage. As an unencrypted, local form of storage, it’s not suitable for storing sensitive data such as tokens and passwords.<br><br>Alternatively, React Native Keychain offers a secure form of storage that also works similarly to Async Storage. For iOS, Keychain storage can be used to protect sensitive data, while Android developers can use Facebook Conceal and Android Keystone.</p>"
            },
            {
                "name": "How do you ensure animations run smoothly in React Native apps?",
                "description": "<p>Several steps can be taken to optimize animations in React Native. These include:</p><ul><li><strong>Use lazy loading</strong> so components are only rendered when in use</li><li><strong>Remove animated values from the state</strong> to avoid unnecessary overhead</li><li><strong>Use shouldComponentUpdate</strong> to fast-track the rendering process</li><li><strong>Use useNativeDriver for Android</strong> to transfer all the animating work to the native layer</li></ul>"
            },
            {
                "name": "What steps would you take in React Native if you have an app that crashes continually?",
                "description": "<p>Use a third-party error reporting integration to pull up an error report and further diagnose the bug. These plugins help collect, organize, and analyze crash reports and also provide quick fixes so the app can get back up and running. Popular error reporting plugins include:</p><ul><li>Bugsnag</li><li>Crashlytics</li><li>Sentry</li><li>TestFairy</li><li>Rollbar</li></ul>"
            },
            {
                "name": "How can Redux be implemented in React Native?",
                "description": "<p>Redux is a useful state management tool. It can be implemented by following these steps:</p><ol><li>Install the necessary Redux packages online</li><li>Create a Redux folder at the root of the app</li><li>Within the Redux folder, add three files: actions.js, reducer.js, and store.js</li><li>In the new reducer.js file, import &lt;combineReducers&gt; from ‘redux’</li><li>In the store.js file, import &lt;createStore&gt; from ‘redux’ to create the store</li><li>Import the store to the React Native app</li></ol>"
            },
            {
                "name": "How can you optimize FlatList items in React Native?",
                "description": "<p>There are several techniques for optimizing the performance of FlatList items. For example, we can:</p><ul><li>Avoid using 1080P HD images</li><li>Optimize the maxToRenderPerBatch prop</li><li>Use the getItemLayout prop</li><li>Use the keyExtractor prop</li><li>Use fewer views</li><li>Optimize the windowSize prop</li></ul>"
            },
            {
                "name": "What is metro bundler in react-native?",
                "description": "<p>Metro is a JavaScript bundler which takes in options, an entry file, and gives you a JavaScript file including all JavaScript files back. Every time you run a react native project, a compilation of many javascript files are done into a single file. This compilation is done by a bundler which is called Metro.<br><br>Answers to your questions: <br><br>1&gt; Bundled file is located on the device itself on  which you are building your app and is stored in different formats like in case of Android Plain bundling in which .bundle is created. Another format is of Indexed RAM bundle in which file is stored as binary file. <br><br>2&gt; Webpack is also a similar type of module bundler which does bundling to ReactJS web platform and its modules are accessible through browser. Bundling process is while similar to metro.<br><br>3&gt; These bundled files are indexed and stored in a particular numerical format and thus its easy at the run time to arrange JS files in order. <br><br>Metro has three separate stages in its bundling process:<br><br><strong>Resolution</strong> - Metro needs to build a directed graph of all the modules that are required from the entry point to start the building process. To find which file is required from another file Metro uses a resolver. For eg to understand better if we have an app with multiple screens then Navigation libraries make a directed map of screens according to their order, in similar way Resolution maps javascript files in an order. This stage happens in parallel with the transformation stage.<br><br><strong>Transformation</strong> - All modules go through a transformer. A transformer is responsible for converting a module to a format that is understandable by the target platform (eg. React Native). Transformation of modules happens in parallel based on the amount of cores that you have.<br><br><strong>Serialization</strong> - After going through transformation process and converting modules into accessible format they will be serialized. A serializer combines the modules to generate one or multiple bundles. A bundle is literally a bundle of modules combined into a single JavaScript file.</p>"
            },
            
            {
                "name": "How do you install and create a React Native application?",
                "description": "<p>Before you begin, make sure you have Node.js and NPM installed on your system.<br><br>To install a React Native application, you can use the following command:</p><strong><code>$ npm install -g create-react-native-app</code></strong><p>To create a React Native project, you can use the following command:</p><strong><code>$ create-react-native-app AppName</code></strong><p>To navigate in your project, use the following command:</p><strong><code>$ cd AppName</code></strong><p>And to start your project, run this command:</p><strong><code>$ npm start</code></strong>"
            },
            {
                "name": "How do you debug React apps and what tools can you use?",
                "description": "<p>There are many different ways to do your debugging in React Native applications. Since React Native has both IOS and Android environments, there's a wide range of different problems you can encounter and a wide range of different tools needed.</p><ol> <li><strong>Developer menu</strong> - The developer menu includes some different ways to debug and access debugging tools.<ul> <li><strong>Reload</strong>: reloads the app</li><li><strong>Debug JS Remotely</strong>: opens to a JavaScript debugger</li><li><strong>Enable Live Reload</strong>: causes the app to reload automatically after selecting “Save”</li><li><strong>Enable Hot Reloading</strong>: watches for changes</li><li><strong>Toggle Inspector</strong>: toggles the inspector interface so we can inspect UI elements and their properties</li><li><strong>Show Perf Monitor</strong>: monitors performance</li></ul></li><li><strong>Chrome DevTools</strong> - You can use these DevTools to debug React Native apps. You need to make sure that it's connected to the same WiFi. If you’re using Windows or Linux, press <em><strong>Ctrl + M+</strong></em>, and if you’re using macOS, press <em><strong>Command + R</strong></em>. In the developer menu, you select “Debug JS Remotely” and it will open the default debugger.</li><li><strong>React Developer Tools</strong> - To use React's Developer Tools, you have to use the desktop app. These tools allow you to debug React components and styles.</li><li><strong>React Native Debugger</strong> - If you’re using Redux in your React app, this is a good debugger for you. It's a desktop app that integrates Redux's and React's developer tools in one app.</li><li><strong>React Native CLI</strong> - You can use the React Native command-line interface to do debugging as well.</li></ol>"
            },
            
            {
                "name": "How do you create a stackNavigator in React Native?",
                "description": "<p><img src='./assets/reactNative/stacknavigator.png'></p>"
            },
            {
                "name": "How to create stack of screens in react native?",
                "description": "<p>React Navigation provides a straightforward navigation solution, with the ability to present common stack navigation and tabbed navigation patterns on both Android and iOS.<br><br><strong>Installation and Setup</strong></p><strong><code>npm install @react-navigation/native @react-navigation/native-stack</code></strong><p>After installation, <p>Now, you need to wrap the whole app in <code>NavigationContainer</code>. Usually you'd do this in your entry file, such as <code>index.js</code> or <code>App.js</code>:</p><br><br><img src='./assets/reactNative/navigationwrapper.png'><br><br>Now you can create an app with a home screen and a about screen:<br><br><img src='./assets/reactNative/navigationexample.png'><br><br>In this example, there are 2 screens (<code>Home</code> and <code>About</code>) defined using the <code>Stack.Screen</code> component. Similarly, you can define as many screens as you like.<br><br>You can set options such as the screen title for each screen in the <code>options</code> prop of <code>Stack.Screen</code>.<br><br>Each screen takes a <code>component</code> prop that is a React component. Those components receive a prop called <code>navigation</code> which has various methods to link to other screens. For example, you can use <code>navigation.navigate</code> to go to the <code>About</code> screen:<br><br><img src='./assets/reactNative/navigationexample1.png'><br><br>This <code>native-stack</code> navigator uses the native APIs: <code>UINavigationController</code> on iOS and <code>Fragment</code> on Android so that navigation built with <code>createNativeStackNavigator</code> will behave the same and have the same performance characteristics as apps built natively on top of those APIs.</p>"
            },
            {
                "name": "What is Axios and why it is used?",
                "description": "<p>Axios is a Promise-based HTTP client for JavaScript which can be used in your front-end application and in your Node.js backend.<br><br>Axios is a Promise-based HTTP client for JavaScript which can be used in your front-end application and in your Node.js backend.</p><ul><li>Make XMLHttpRequests from the browser</li><li>Make http requests from node.js</li><li>Supports the Promise API</li><li>Intercept request and response</li><li>Transform request and response data</li><li>Cancel requests</li><li>Automatic transforms for JSON data</li><li>Client side support for protecting against XSRF</li></ul>"
            },
            {
                "name": "How does React Native handle different screen sizes?",
                "description": "<p>There are different ways to handle different screen sizes but some of them are really difficult to implement and for some there is not much help in the official documentation. Let me list down the ways to handle layout for different devices and their cons and pros :</p><ol> <li><strong>Flex</strong> - Using flex for alignments or to design a single component is really an easy task and it handles different screens automatically without any extra effort but for designing a whole page using flex is a whole different story and it takes a lot of time to do it.</li><li><strong>Pixel Ratio</strong> - PixelRatio class gives access to the device pixel density. You should get a higher resolution image if you are on a high pixel density device. A good rule of thumb is to multiply the size of the image you display by the pixel ratio.”</li><li>Dimensions - Using Dimensions to handle different screen size is really easy and we can style our page precisely using this. Let me tell you how to implement this and to obtain dimensions of current device : <br><strong><code>import Dimensions from ‘Dimensions’; <br>const { width, height } = Dimensions.get(‘window’); <br>&lt;View&gt;&lt;Text style=❴❴fontSize: width * .3 ❵❵&gt;Some text&lt;/Text&gt;&lt;/View&gt;</code></strong></li></ol><p>A combination of tools and concepts, will give you the best results: such as</p><ul><li><strong>Density Independent Pixels:</strong> - With density independent pixels (dp), React Native defines a coordinate space separate from the resolution of the device. This makes it much more simpler to place items. An item of 300(dp) in width, will generally cover the same amount of space no matter the screen size, even if the resolution of the devices varies. It is predictable, and easy to guess roughly where elements are placed and sized.</li><li><strong>Flexbox:</strong> -  Flexbox also gives you some very useful alignment features for child components, where you may space these items evenly no matter the screen width.</li><li><strong>Dimensions:</strong> Calculate sizes/position based on device dimensions, you can try placing items on screen depending on the screen width or height. To do this you will use the Dimensions object from React Native</li><li><strong>Percentages:</strong> Dimensions Relative to its container, You may use percentages to size items, which are helpful in some situations as well.</li><li><strong>PixelRatio:</strong> Handle sizing depending on pixel depth, like Images which haven’t been properly sized for your screen won’t look great, so make sure to use PixelRatio for that too.</li></ul><p><img src='./assets/reactNative/imagepixelratio.png'></p>"
            },
            
            
            {
                "name": "Describe Memory leak Issue in React Native, how can it be detected and resolved ?",
                "description": "<p>A memory leak occurs when memory that is no longer needed by an app remains in the app rather than being returned to the operating system. This is one of the most common causes of performance issues.</p><p>In theory, memory management is handled automatically by the garbage collector. However, this process is still prone to errors. Debugging tools can be used to identify memory leak issues. Some of the most common causes for issues are:</p><ul><li>Timers and listeners in componentDidMount</li><li>Inline styles</li><li>Closure scope leaks</li><li>The use of console.log</li></ul>"
            },
            {
                "name": "What is reselect and how it works?",
                "description": "<p><em>Reselect</em> is a <strong>selector library</strong> (for Redux) which uses <em>memoization</em> concept. It was originally written to compute derived data from Redux-like applications state, but it can't be tied to any architecture or library.<br><br>Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It's memoization and cache are fully customizable.<br><br>Let's see the main features of Reselect library,</p><ol><li>Selectors can compute derived data, allowing Redux to store the minimal possible state.</li><li>Selectors are efficient. A selector is not recomputed unless one of its arguments changes.</li><li>Selectors are composable. They can be used as input to other selectors.</li></ol><p><strong>Example of Reselect usage</strong> - Let's take calculations and different amounts of a shipment order with the simplified usage of Reselect:<br><img src='./assets/react/reselect.png'><br><img src='./assets/react/reselect1.png'></p>"
            },
            {
                "name": "Difference between Flow and PropTypes",
                "description": "<p>Flow is a <em>static analysis tool</em> (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.<br><br>PropTypes is a <em>basic type checker</em> (runtime checker) which has been patched onto React. It can't check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.</p>"
            }
        ]
    },
    {
        "folder": "HTML",
        "title": "HTML",
        "url": "/folder/HTML",
        "icon": "logo-html5",
        "question": [
            {
                "name": "New in HTML?",
                "description": "<p>New Elements: &lt;header&gt;, &lt;footer&gt;, &lt;nav&gt;, &lt;section&gt;, &lt;article&gt;, &lt;aside&gt;, &lt;figure&gt;, &lt;figcaption&gt;, &lt;mark&gt;, &lt;/mark&gt;, &lt;audio&gt;,  &lt;video&gt;, &lt;embed&gt;, &lt;source&gt;, &lt;track&gt;</p><p>New Inline Elements - &lt;mark&gt;, &lt;progress&gt;</p><p>New Input Types: color, date, datetime, email, range, search, tel, time, url </p><p>New Input Attributes: autocomplete, autofocus, formaction, formnovalidate, min and max, multiple, pattern (regexp), required</p><p><strong>Make your content editable</strong><br><img src='./assets/html/contenteditable.png'></p><p><strong>No More Types for Scripts and Links</strong> - <br>Back in HTML 4 <br><img src='./assets/html/notype.png'><br><br>Now in HTML 5<br><img src='./assets/html/notype1.png'></p>"
            },
            {
                "name": "What Is Semantic HTML?",
                "description": "<p><strong>Semantic HTML</strong> is all about adding meaning to the content on a web page, rather than merely define its appearance. <strong>Semantic HTML</strong> helps search engines, screen readers, and other user devices determine the significance and context of web content.</p><p><strong>Advantages are</strong><br>1. Clearer code and easier to maintain<br>2. Help your site be accessible for screen reading softwares.<br>3. Improve your SEO positioning</p><p>Semantic Tags</p><ul><li>Header tags &lt;h1&gt;&nbsp;through &lt;h6&gt;</li><li>&lt;blockquote&gt;</li><li>&lt;code&gt;</li><li>&lt;em&gt;</li><li>&lt;abbr&gt;</li><li>&lt;acronym&gt;</li><li>&lt;address&gt;</li><li>&lt;cite&gt;</li><li>&lt;strong&gt;</li><li>&lt;em&gt;</li><li>&lt;pre&gt;</li><li>&lt;sub&gt;</li><li>&lt;sup&gt;</li></ul>"
            },
            {
                "name": "Difference between HTML elements and tags",
                "description": "<table><tbody><tr><td><b>HTML Elements</b></td><td><b>Tags</b></td></tr><tr><td>1. The element is an individual component of the HTML web page or document that consists of a start tag, its attributes, an end tag, and everything in between.&nbsp;</td><td>1. HTML tag (either opening or closing) is used to mark the start or end of an element.</td></tr><tr><td>2. They usually consist of a start tag, content, and an end tag.</td><td>2. They begin with &lt; symbol and end with &gt; symbol. Whatever is written inside &lt; and &gt; are called tags.</td></tr><tr><td>3. HTML Elements hold the content.</td><td>&nbsp;3. HTML Tags hold the HTML element.</td></tr><tr><td>4. They specify the general content.</td><td>4. HTML tags are like keywords. Each tag has a unique meaning.</td></tr><tr><td>5. For example, &lt;p&gt;This is an example of a paragraph.&lt;/p&gt;</td><td>5. For example, &lt;a&gt; is an opening anchor tag and &lt;/a&gt; is a closing anchor tag.</td></tr></tbody></table>"
            },
            {
                "name": "What are HTML Attributes?",
                "description": "<p>HTML attributes provide additional information about HTML elements. They are defined directly after the tag name. They only appear in opening tags and not in closing tags.</p><p>HTML attributes usually consist of name/value pairs like name=”value”.</p><p>Some commonly used HTML attributes include src Attribute, alt Attribute, id Attribute, and href Attribute.</p>"
            },
            {
                "name": "Explain the layout of HTML",
                "description": "<p>HTML layout represents how all the elements in the document are arranged</p><ul><li>&lt;header&gt;: define a header for a document or a section.</li><li>&lt;nav&gt;: defines a container for navigation links</li><li>&lt;section&gt;: it defines a section in a document</li><li>&lt;article&gt;: define an independent, self-contained article</li><li>&lt;aside&gt;: it defines content aside from the content</li><li>&lt;footer&gt;: define a footer for a document or a section</li><li>&lt;details&gt;: define additional details</li></ul>"
            },
            {
                "name": "What are the building blocks of HTML5?",
                "description": "<ul><li><strong>Semantics</strong> - Allowing you to describe more precisely what your content is.</li><li><strong>Connectivity</strong> - Allowing you to communicate with the server in new and innovative ways.</li><li><strong>Offline and storage</strong> - Allowing webpages to store data on the client-side locally and operate offline more efficiently.</li><li><strong>Multimedia</strong> - Making video and audio first-class citizens in the Open Web.</li><li><strong>2D/3D graphics and effects</strong> - Allowing a much more diverse range of presentation options.</li><li><strong>Performance and integration</strong> - Providing greater speed optimization and better usage of computer hardware.</li><li><strong>Device access</strong> - Allowing for the usage of various input and output devices.</li><li><strong>Styling</strong> - Letting authors write more sophisticated themes.</li></ul>"
            },
            {
                "name": "Briefly describe the correct usage of the following HTML5 semantic elements: <header>, <article>, <section>, <footer>",
                "description": "<ul><li><p><code>&lt;header&gt;</code> is used to contain introductory and navigational information about a section of the page. This can include the section heading, the author's name, time and date of publication, table of contents, or other navigational information.</p></li><li><p><code>&lt;article&gt;</code> is meant to house a self-contained composition that can logically be independently recreated outside of the page without losing it's meaining. Individual blog posts or news stories are good examples.</p></li><li><p><code>&lt;section&gt;</code> is a flexible container for holding content that shares a common informational theme or purpose.</p></li><li><p><code>&lt;footer&gt;</code> is used to hold information that should appear at the end of a section of content and contain additional information about the section. Author's name, copyright information, and related links are typical examples of such content.</p></li></ul>"
            },
            {
                "name": "What were some of the key goals and motivations for the HTML5 specification?",
                "description": "<p>HTML5 was designed to replace HTML 4, XHTML, and the HTML DOM Level 2. The key goals and motivations behind the HTML5 specification were to:</p><ul><li>Deliver rich content (graphics, movies, etc.) without the need for additional plugins, such as Flash.</li><li>Provide better semantic support for web page structure through new structural element tags.</li><li>Provide a stricter parsing standard to simplify error handling, ensure more consistent cross-browser behaviour, and simplify compatibility with documents written to older standards.</li><li>Provide better cross-platform support whether running on a PC, Tablet, or Smartphone.</li></ul>"
            },
            {
                "name": "Explain meta tags in HTML?",
                "description": "<ul><li><strong>Meta tags</strong> always go inside <strong>head tag</strong> of the HTML page</li><li><strong>Meta tags</strong> is always passed as name/value pairs</li><li><strong>Meta tags</strong> are not displayed on the page but intended for the browser</li><li><strong>Meta tags</strong> can contain information about <strong>character encoding</strong>, <strong>description</strong>, <strong>title</strong> of the document etc,</li></ul>"
            },
            {
                "name": "What is Character Set / Encoding?",
                "description": "<p>To display an HTML page correctly, a web browser must know which character set (character encoding) to use. This is specified in the <meta> tag:<br><code>&lt;meta charset='UTF-8'&gt;</code></p>"
            },
            {
                "name": "How do I modify the url without reloading the page? or History",
                "description": "<p> HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively.<br><code>window.history.pushState('page2', 'Title', '/page2.html');</code></p>"
            },
            {
                "name": "How can you highlight or mark text in HTML??",
                "description": "<p><code>&lt;mark&gt;highlighted text&lt;/mark&gt;</code><br>or<br><code>&lt;span style='background-color: #FFFF00'&gt;Yellow text.&lt;/span&gt;</code></p>"
            },
            {
                "name": "Difference between HTML attribute and DOM property?",
                "description": "<p>Attributes are defined by Html, whereas properties are defined by the DOM. Attribute initialize DOM properties, once the initialization complete the attribute job is done. Property value can change, whereas attribute value can’t.</p>"
            },
            {
                "name": "Block, inline and inline-block elements?",
                "description": "<p>*Block elements* are those that take up the full width available on a web page, and blocks out any other elements from sitting next to it on the left or right. <br> *Inline elements* are those who only take up as much width as is needed to display the contents of the element, thereby allowing other elements to be in line with the inline element.<br> *Inline block elements* are similar to inline elements, except they can have padding and margins and set height and width values.</p>"
            },
            {
                "name": "When is it appropriate to use the small element?",
                "description": "<p>The HTML <code>&lt;small&gt;</code> element makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser's minimum font size. In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation.</p>"
            },
            {
                "name": "Doctype in HTML?",
                "description": "<p>Doctype stands for Document Type Declaration. It informs the web browser about the type and version of HTML used in building the web document. This helps the browser to handle and load it properly.<br> <code>&lt;!DOCTYPE html&gt;</code> </p>"
            },
            {
                "name": "Difference between localStorage, sessionStorage and cookies?",
                "description": "<p>#<strong>localStorage</strong> stores information as long as the user does not delete them. Strorage sizes 5MB. The data can be shared between multiple windows of the browser.<br><img src='./assets/js/local.png'><br><br>#<strong>sessionStorage</strong>  stores information as long as the session goes. Usually until the user closes the tab/browser. Data is accessible only in the current window of the browser.<br><img src='./assets/js/session.png'><br><br>#<strong>Cookies</strong>The data is sent back to the server for every HTTP request increasing the amount of traffic between client and server. The 4Kb is the limit for the entire cookie, including name, value, expiry date etc <br>#One of the most important differences over <strong>local/session strorage</strong> with a <strong>cookies</strong>, data does not have to be sent back and forth with every HTTP request.</p><br><img src='./assets/js/cookies.png'>"
            },
            {
                "name": "Explain an image map in HTML",
                "description": "<p><strong>Ans.</strong> An image map is defined by the &lt;map&gt; tag. Using this the image map tag, we can linking the different web pages using a single image. We can add one or more clickable areas in a single image using&nbsp;&lt;area&gt; tags.</p>"
            },
            {
                "name": "What is XHTML?",
                "description": "<p>XHTML stands for EXtensible HyperText Markup Language</p><p>XHTML is more extensible and flexible to work with other data formats (such as XML). In addition, browsers ignore errors in HTML pages, and try to display the website even if it has some errors in the markup. So XHTML comes with a much stricter error handling.</p><p>The Most Important Differences from HTML as follows</p><ul><li>&lt;!DOCTYPE&gt; is <strong>mandatory</strong></li><li>The xmlns attribute in &lt;html&gt; is <strong>mandatory</strong></li><li>&lt;html&gt;, &lt;head&gt;, &lt;title&gt;, and &lt;body&gt; are <strong>mandatory</strong></li><li>Elements must always be <b>properly nested</b> within each other(e.g. <code>&lt;b&gt;&lt;i&gt;Some text&lt;/i&gt;&lt;/b&gt;</code> )</li><li>Elements must always be <b>closed</b></li><li>Elements must always be in <b>lowercase</b></li><li>Attribute names must always be in <b>lowercase</b></li><li>Attributes values must be enclosed in <b>quotes</b></li><li>Attribute minimization is forbidden (e.g. one has to use <code>checked='checked'</code> instead of <code>checked</code>)</li></ul><ul>"
            },
            {
                "name": "What is the difference between HTML and XHTML?",
                "description": "<table><tbody><tr><td><b>HTML</b></td><td><b>XHTML</b></td></tr><tr><td>HTML stands for Hypertext Markup Language.</td><td>XHTML stands for Extensible Hypertext Markup Language.</td></tr><tr><td>It is extended from SGML (Standard Generalized Markup Language).</td><td>It has features of both XML and HTML.</td></tr><tr><td>HTML is a static Web Page.</td><td>XHTML is a dynamic Web Page.</td></tr><tr><td>It uses a document file format.</td><td>It uses markup language.</td></tr><tr><td>HTML is about displaying information.</td><td>It is about describing the information.</td></tr><tr><td>Not case sensitive.</td><td>XHTML is case-sensitive. Every tag and attribute should be in lower case.</td></tr><tr><td>Not necessary to close the tags in the order they are opened.</td><td>It is necessary to close the tags in the order they are opened.</td></tr><tr><td>All content can be included in the body element.</td><td>All contents must be put in blocks.</td></tr><tr><td>It requires a lenient HTML-specific parser.</td><td>Parsing is done with a standard XML parser.</td></tr></tbody></table>"
            },
            {
                "name": "How do you set IE compatibility mode?",
                "description": "<p><code>&lt;meta http-equiv='X-UA-Compatible' content='IE=edge' /&gt;</code> - IE=edge mode tells Internet Explorer to display content in highest mode available</p>"
            },
            {
                "name": "What is URL Encoding? Why are URLs encoded in HTML?",
                "description": "<p> URL Encoding is the process of encoding non-ASCII characters in URLs to a format that is universally accepted by web browsers. URLs are sent over the Internet using the ASCII character set. If a URL contains characters outside the ASCII set, the URL has to be converted.</p><p>URL is encoded in HTML as it converts non-ASCII characters into a format that can be transmitted over the web. The URL encoding replaces non-ASCII characters with a “%” followed by hexadecimal digits.</p>"
            },
            {
                "name": "What is the use of the figure tag in HTML 5",
                "description": "<p> The &lt;figure&gt; tag identifies self-contained content related to the main content. It is used for adding self-contained content like photos, diagrams, illustrations, etc. The figure, its caption, and its contents are referenced as a single unit from the main flow of the document. The &lt;figure&gt; tag has two elements img src and figcaption. Img src is used for adding image source in a document while figcaption sets the caption of an image.</p>"
            },
            {
                "name": "If there isn’t any text in between the HTML tags, what will happen?",
                "description": "<p> If no text is present in between the tags, there would be nothing to format. As a result, nothing will show up on the screen. Some tags, such as those that don’t have a closing tag, like the &lt;img&gt; tag, don’t need any text in between them.</p>"
            },
            {
                "name": "What is the use of Geolocation API in HTML5?",
                "description": "<p>One of the best HTML5 APIs is Geolocation API which is used to determine the geographical location of the user for a web application. With HTML5, you can now browse to the visitor’s current website’s latitude and longitude coordinates. These coordinates can be recorded by JavaScript and sent to the server, allowing it to display your position on the page. The geolocation API is used with navigation.geolocation object. A Geolocation object that contains the user’s location information and can produce a customized result is returned via the read-only property of the object. Syntax: <br><strong><code>var geolocation = navigator.geolocation</code></strong><br><img src='./assets/html/geoexample.png'></p>"
            },
            {
                "name": "What is the benefit of collapsing the white space in HTML?",
                "description": "<p>it helps to reduce the size of the HTML document, which can improve the performance and loading time of a web page.</p><p>Collapsing white space eliminates unnecessary spaces, newline characters, and indentations, which can be present in the HTML code but are not visible in the rendered web page.</p><p>By removing these extra spaces, the HTML document becomes smaller and easier to parse and render, resulting in faster performance and better user experience.</p>"
            },
            {
                "name": "What is the use of the MathML element in HTML5",
                "description": "<p>Mathematics Markup Language is known as MathML. Like other HTML elements, it is used to display mathematical statements or equations in web browsers.<br><img src='./assets/html/mathml.png'><br><img src='./assets/html/mathml1.png'></p>"
            },
            {
                "name": "Is it possible for the text to occasionally appear elsewhere other than the browser?",
                "description": "<p>The text is automatically wrapped to fit the browser window by default. The text might, however, go outside the browser window if it is a component of a table cell with a fixed width.</p>"
            },
            {
                "name": "What is the difference between meter and progress tag?",
                "description": "<p>The meter tag measures data within a specified range, whereas the progress tag just represents the task’s progress.</p>"
            },
            {
                "name": "What is data transfer API?",
                "description": "<p>The management of data transfers from one user to another within a domain is handled by the Data Transfer API. This transfer can be used, for example, to redistribute application data that belonged to a user who has left the company. You must first define a transfer before starting it with the insert method in order to use the Data Transfer API. The transfer can include application-specific parameters and is described in terms of one or more apps whose data will be transmitted.</p><ul><li>Choose which application(s) you want to transmit data to.</li><li>Create a transfer resource that lists the users at the source and destination as well as the programs to which the data is to be sent.</li><li>To add the transfer request, use the insert method.</li></ul>"
            },
            {
                "name": "What does HTML5’s application cache do and why is it necessary?",
                "description": "<p>The HTML 5 application cache functionality is used to cache website data, making it accessible even when there is no internet connection. For desktop-based web applications that need to save data on local systems, it is highly helpful.</p>"
            },
            {
                "name": "What is the use of the <output> tag in HTML and what are its attributes?",
                "description": "<p><strong>Ans.</strong> To represent a result for any kind of calculation in HTML &lt;output&gt; tag is used. Its attributes are mentioned below:</p><ul><li>for: It outlines the connection between the calculation’s inputs and outputs.</li><li>form: This specifies the form to which the output element belongs.</li><li>name: An &lt;output&gt; element’s name is specified via the name attribute.</li></ul>"
            },
            {
                "name": "Describe the difference between <script>, <script async> and <script defer>?",
                "description": "<ul><li><code>&lt;script&gt;</code> - HTML parsing is blocked, the script is fetched and executed immediately, HTML parsing resumes after the script is executed.</li><li><code>&lt;script async&gt;</code> - The script will be fetched in parallel to HTML parsing and executed as soon as it is available (potentially before HTML parsing completes). Use <code>async</code> when the script is independent of any other scripts on the page, for example, analytics.</li><li><code>&lt;script defer&gt;</code> - The script will be fetched in parallel to HTML parsing and executed when the page has finished parsing. If there are multiple of them, each deferred script is executed in the order they were encoun­tered in the document. If a script relies on a fully-parsed DOM, the <code>defer</code> attribute will be useful in ensuring that the HTML is fully parsed before executing. There's not much difference in putting a normal <code>&lt;script&gt;</code> at the end of <code>&lt;body&gt;</code>. A deferred script must not contain <code>document.write</code>.</li></ul>"
            },
            {
                "name": "What is WebP?",
                "description": "<ul><li>WebP is an image format like <strong>jpg</strong>, <strong>png</strong> which is <strong>approximately</strong> <strong>10-20% less</strong> in size than other formats.</li><li>Developed and <strong>introduced</strong> by <strong>Google</strong> in <strong>2010</strong>.</li><li>Not all the browsers <strong>support</strong> WebP.</li><li>Plugins are available to convert other formats to <strong>WebP</strong>.</li></ul>"
            },
            {
                "name": "What is progressive rendering?",
                "description": "<p>Progressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.</p><p>Examples of such techniques:</p><ul><li>Lazy loading of images - Images on the page are not loaded all at once. JavaScript will be used to load an image when the user scrolls into the part of the page that displays the image.</li><li>Prioritizing visible content (or above-the-fold rendering) - Include only the minimum CSS/content/scripts necessary for the amount of page that would be rendered in the users browser first to display as quickly as possible, you can then use deferred scripts or listen for the <code>DOMContentLoaded</code>/<code>load</code> event to load in other resources and content.</li></ul>"
            },
            {
                "name": "Why you would use a `srcset` attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute?",
                "description": "<p>The srcset attribute is used when you want to show different images to users depending on their device display width - showing higher quality images to devices with retina display enhances the user experience while showing lower resolution images to low-end devices increase performance and decrease data wastage</p><p>For example: &lt;img srcset='small.jpg 500w, medium.jpg 1000w, large.jpg 2000w' src='default.png'&gt; tells the browser to display the small, medium or large .jpg graphic depending on the client's resolution. The first value is the image name and the second is the width of the image in pixels. For a device width of 320px, the following calculations are made: <br><br> <code> 500 / 320 = 1.5625<br> 1000 / 320 = 3.125 <br> 2000 / 320 = 6.25</code></p>"
            },
            {
                "name": "Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?",
                "description": "<p>The main reason as to why <strong>JS</strong> files are linked at the bottom of the body is because whenever a browser encounters any JS, it parses it and executes that on the spot. Hence if it was to be added at the top, it would make the page rendering slow and thus it would take more time for page load.</p><p>CSS files are linked in the head because they get applied regardless of DOM already rendered or not. Hence the webpage looks elegant as soon as the page loads.</p><p>However just like JS if you can link the CSS at the end , this would mean that the webpage will first loads with just plain HTML and then the CSS is applied to it. If in case the user has slow Internet connection, the CSS load would take lot of time, which means that the webpage shows just the HTML during the mean time. This might make the user close the website without waiting for it to load fully.</p>"
            },
            {
                "name": "Setting The Viewport?",
                "description": "<code>&lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt;</code>"
            },
            {
                "name": "How Can I Get Indexed Better by Search Engines?",
                "description": "<p>It is possible to get indexed better by placing the following 'keyword and description' statements in the <code>&lt;HEAD&gt;</code> part of your documents:</p><p><code><META NAME='keywords' CONTENT='keyword, keyword_1, keyword_2, keyword_3'>      <META NAME='description' CONTENT='description of your site'></code></p><p>Both may contain up to 1022 characters. If a keyword is used more than 7 times, the keywords tag will be ignored altogether. Also, you cannot put markup (other than entities) in the description or keywords list.</p>"
            },
            {
                "name": "How can you highlight text in HTML?",
                "description": "&lt;mark&gt;highlighted text&lt;</mark&gt;"
            },
            {
                "name": "When is it appropriate to use the small element?",
                "description": "<p>The HTML <code>&lt;small&gt;</code> element makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser's minimum font size. In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation.</p>"
            },
            {
                "name": "How do you serve a page with content in multiple languages?",
                "description": "<p>When an HTTP request is made to a server, the requesting user agent usually sends information about language preferences, such as in the <code>Accept-Language</code> header. The server can then use this information to return a version of the document in the appropriate language if such an alternative is available. The returned HTML document should also declare the <code>lang</code> attribute in the <code>&lt;html&gt;</code> tag, such as <code>&lt;html lang='en'&gt;...&lt;/html&gt;</code>.</p><p>In the back end, the HTML markup will contain <code>i18n</code> placeholders and content for the specific language stored in YML or JSON formats. The server then dynamically generates the HTML page with content in that particular language, usually with the help of a back end framework.</p>"
            },
            {
                "name": "What is the purpose of cache busting and how can you achieve it?",
                "description": "<p>Cache busting is the process of forcing the browser to download the new files. This is done by naming the file something different to the old file.</p><p>A common technique to force the browser to re-download the file is to append a query string to the end of the file.</p><ul><li><code>src='js/script.js'</code> =&gt; <code>src='js/script.js?v=2'</code></li></ul><p>The browser considers it a different file but prevents the need to change the file name.</p>"
            },
            {
                "name": "What are Web Workers?",
                "description": "<ul><li><strong>Web Workers</strong> helps us to run <strong>javascript code</strong> in the <strong>background</strong> <strong>without blocking</strong> application.</li><li><strong>Web Workers</strong> runs in an <strong>isolated (new) thread</strong> for <strong>executing</strong> our javascript code.</li><li><strong>Web Workers</strong> are usually used for <strong>large tasks</strong>.</li><li><strong>Web Workers</strong> needs a <strong>seperate file</strong> for our javascript code.</li><li><strong>Web Workers</strong> files are <strong>downloaded</strong> <strong>asynchronously</strong>.</li><li><strong>Web Workers</strong> are<strong>supported</strong> in all <strong>latest</strong> browser.</li></ul><br><br><p>There are three types of web workers</p><ul><li><strong>Dedicated Workers </strong>- These are workers that are utilized by a single script.</li><li><strong>Shared Workers</strong> -These are workers that are utilized by multiple scripts running in different windows, IFrames, etc.</li><li><strong>Service Workers</strong> - These act as proxy servers between web applications, the browser, and the network. Mostly used for push notifications and sync APIs.</li></ul><p>Example</p><br><img src='./assets/html/webworker.png'>"
            },
            {
                "name": "How would you select svg or canvas for your site?",
                "description": "<p>SVG is a language for describing 2D graphics in XML. Canvas draws 2D graphics, with a JavaScript. The differences between SVG and Canvas would be helpful in selecting the right one.</p><p><strong>Canvas</strong></p><ul><li>Resolution dependent</li><li>No support for event handlers</li><li>Poor text rendering capabilities</li><li>You can save the resulting image as .png or .jpg</li><li>Well suited for graphic-intensive games</li></ul><p><strong>SVG</strong></p><ul><li>Resolution independent</li><li>Support for event handlers</li><li>Best suited for applications with large rendering areas (Google Maps)</li><li>Slow rendering if complex (anything that uses the DOM a lot will be slow)</li><li>Not suited for game application</li></ul><p><strong>Conclusion:</strong> </p><ul><li>SVG is better for applications and apps with few items</li><li>Canvas is better for thousands of objects and careful manipulation, but a lot more code (or a library) is needed to get it off the ground.</li></ul>"
            },
            {
                "name": "Why is it generally a good idea to position CSS's between head and JS's just before body tags? Do you know any exceptions?",
                "description": "<p><strong>Placing <code>&lt;link&gt;</code>s in the <code>&lt;head&gt;</code></strong></p><p>Putting <code>&lt;link&gt;</code>s in the head is part of the specification. Besides that, placing at the top allows the page to render progressively which improves the user experience. The problem with putting stylesheets near the bottom of the document is that it prohibits progressive rendering in many browsers, including Internet Explorer. Some browsers block rendering to avoid having to repaint elements of the page if their styles change. The user is stuck viewing a blank white page. It prevents the flash of unstyled contents.</p><p><strong>Placing <code>&lt;script&gt;</code>s just before <code>&lt;/body&gt;</code></strong></p><p><code>&lt;script&gt;</code>s block HTML parsing while they are being downloaded and executed. Downloading the scripts at the bottom will allow the HTML to be parsed and displayed to the user first.</p><p>An exception for positioning of <code>&lt;script&gt;</code>s at the bottom is when your script contains <code>document.write()</code>, but these days it's not a good practice to use <code>document.write()</code>. Also, placing <code>&lt;script&gt;</code>s at the bottom means that the browser cannot start downloading the scripts until the entire document is parsed. One possible workaround is to put <code>&lt;script&gt;</code> in the <code>&lt;head&gt;</code> and use the <code>defer</code> attribute.</p>"
            },
            {
                "name": "What is accessibility & ARIA role means in a web application?",
                "description": "<p>Accessibility means letting the user navigate and interact with a website by any means. Let it be a keyboard, a mouse or people with disabilities or impairments.</p><ul><li><strong>ARIA</strong> stands for <strong>Accessible Rich Internet Application</strong>.</li><li><strong>ARIA</strong> is a <strong>spec</strong> from <strong>W3C</strong>.</li><li><strong>ARIA</strong> is created to <strong>improve accessibility</strong> in <strong>web applications</strong>.</li><li><strong>ARIA</strong> provides a <strong>extra information</strong> to <strong>screen readers</strong> via <strong>HTML attributes</strong>.</li><li><strong>ARIA</strong> <strong>doesn't affect</strong> how <strong>an element</strong> is <strong>rendered</strong> in a browser.</li></ul>"
            },
            {
                "name": "Make your Stream videos accessible to people with disabilities",
                "description": "<ul><li>Include captions and subtitles for videos</li><li>Include a unique and descriptive video title</li><li>Include a description for your video</li></ul>"
            },
            {
                "name": "Base Tag",
                "description": "<p>The <code>&lt;base&gt;</code> tag specifies the base URL and/or target for all relative URLs in a document.</p>"
            },
            {
                "name": "Optimize, increase website speed",
                "description": "<ul><li><strong>Reduce the Number of HTTP Requests</strong> - Your first step should be to eliminate requests that are simply unnecessary. One should remove any unnecessary images, JavaScript files, stylesheets, fonts, etc.</li><li><strong>Optimize Image Sizes</strong> - If your images are not compressed, or if you use too high of a resolution it will slow down your website's performance.</li><li><strong>Use a Content Delivery Network (CDN)</strong> - CDNs will optimize the delivery of static files such as CSS, images, fonts, and JavaScript to your visitors. CDNs use geographically distributed servers. What this means is that the server closest to your visitor will be serving the files.</li><li><strong>Minify and Combine CSS, JavaScript, and HTML Files</strong> - This is accomplished by minifying and combining separate JS and CSS files into single bundles</li><li><strong>Load JavaScript Asynchronously</strong> - If you set the async flag on the <code>script</code> tag then the browser will load the script asynchronously. It will continue parsing the page while the script is loaded.<br>We also suggest moving the &lt;script&gt; tags to the bottom of the page, near the closing <code>&lt;/body&gt;</code> tag. This way older browsers that don’t support the async attribute will load the script after parsing the rest of the page.</li><li><strong>Write Mobile-First Code</strong> - As Google mainly uses the mobile version of websites in its rankings, it's recommended to think mobile-first when it comes to designing and optimising your site's speed.</li><li><strong>Consider Using Prefetch, Preconnect, and Prerender Techniques</strong> - There are different prefetching and preloading techniques that you can use to give hints to the browser about which resources will be required to render the page before the browser actually needs those resources.<br><strong>DNS prefetching</strong> - You can tell the browser that certain domain names will need to be resolved to an IP address before the browser actually sees resources from that domain name<br><img src='./assets/html/dnsprefetch.png'><br><strong>TCP preconnect</strong> - allows the browser to set up early connections before an HTTP request is actually sent to the server, Connections such as TCP Handshake, and TLS negotiation can be initiated beforehand, eliminating roundtrip latency for those connections and saving time for users<br><img src='./assets/html/tcppreconnect.png'><br><strong>Prefetching</strong> - If we’re certain that a specific resource will be required in the future, then we can ask the browser to request that item and store it in the cache for reference later.<br><img src='./assets/html/prefetch.png'><br><strong>Prerendering</strong> - This should be reserved for when you really know that the next step a user will take is to go to a certain page. You can instruct the browser to prerender the complete page, along with downloading all the required assets by specifying the URL like this:<br><img src='./assets/html/prerender.png'></li><li><strong>Leverage Browser Caching</strong> means <strong>storing static files of a website in visitor browser</strong>. And then retrieving them from browser quickly instead again from server. Actually it uses to speed up each page of a website.<br>The code below tells browsers what to cache and how long to remember it. It should be added to the top of your .htaccess file.<br><strong>Mod Headers</strong><br><img src='./assets/html/lc_htaccess_mod_headers.png'></li><li><strong>Enabling GZIP compression</strong> - GZip Compress the files like html , js and css files while serving the request to the browser. As size of the file is reduced it is served to the user in faster manner<br>How to check<br><img src='./assets/html/gzip.png'><br><br><img src='./assets/html/mod_deflate.png'><br><img src='./assets/html/mod_gzip.png'></li></ul>"
            },
            {
                "name": "How to optimize website assets loading?",
                "description": "<p>To optimize website load time we need to optimize its asset loading and for that:</p><ul><li><strong>CDN hosting</strong> - A CDN or content delivery network is geographically distributed servers to help reduce latency.</li><li><strong>File compression</strong> - This is a method that helps to reduce the size of an asset to reduce the data transfer</li><li><strong>File concatenation</strong> - This reduces the number of HTTP calls</li><li><strong>Minify scripts</strong> - This reduces the overall file size of js and CSS files</li><li><strong>Parallel downloads</strong> - Hosting assets in multiple subdomains can help to bypass the download limit of 6 assets per domain of all modern browsers. This can be configured but most general users never modify these settings.</li><li><strong>Lazy Loading</strong> - Instead of loading all the assets at once, the non-critical assets can be loaded on a need basis.</li></ul>"
            },
            {
                "name": "What are the different kinds of Doctypes available?",
                "description": "<p>The three kinds of Doctypes which are available:</p><ul><li>Strict Doctype</li><li>Transitional Doctype</li><li>Frameset Doctype</li></ul>"
            },
            {
                "name": "What is the significance of <head> and <body> tag in HTML?",
                "description": "<p>&lt;head&gt; tag provides the information about the document. This tag contains the metadata about the webpage and other tags like &lt;link&gt;, &lt;meta&gt;, &lt;style&gt;, &lt;script&gt;, etc. are not displayed on the web page. Also, there can be only 1 &lt;head&gt; tag in the entire Html document and will always be before the &lt;body&gt; tag.</p><p>&lt;body&gt; tag defines the body of the HTML document. All the contents which needs to be displayed on the web page like images, text, audio, video, contents, using elements like &lt;p&gt;, &lt;img&gt;, &lt;audio&gt;, &lt;heading&gt;, &lt;video&gt;, &lt;div&gt;, etc. will always be enclosed by the &lt;body&gt; tag.</p>"
            },
            {
                "name": "Difference between link tag <link> and anchor tag <a>?",
                "description": "<p>The anchor tag &lt;a&gt; is used to create a hyperlink to another webpage or to a certain part of the webpage and these links are clickable, whereas, link tag &lt;link&gt; defines a link between a document and an external resource and these are not clickable.</p>"
            },
            {
                "name": "When to use scripts in the head and when to use scripts in the body?",
                "description": "<p>If the scripts contain some event-triggered functions or jquery library then we should use them in the head section. If the script writes the content on the page or is not inside a function then it should be placed inside the body section at the bottom. In short, follow below three points:</p><ol><li>Place library scripts or event scripts in the head section.</li><li>Place normal scripts that do not write anything on the page, in the head section until there is any performance issue.</li><li>Place scripts that render something on the web page at the bottom of the body section.</li></ol>"
            },
            {
                "name": "What are some of the advantages of HTML5 over its previous versions?",
                "description": "<ul><li>Included new Semantic tags and form control tags.</li><li>It has Multimedia Support.</li><li>It has the capabilities to store offline data using SQL databases and application cache.</li><li>Javascript can be run in the background.</li><li>HTML5 also allows users to draw various shapes like rectangles, circles, triangles, etc.</li></ul>"
            },
            {
                "name": "Difference between <figure> tag and <img> tag?",
                "description": "<p>The &lt;figure&gt; tag specifies the self-contained content, like diagrams, images, code snippets, etc. &lt;figure&gt; tag is used to semantically organize the contents of an image like image, image caption, etc., whereas the &lt;img&gt; tag is used to embed the picture in the HTML5 document.</p>"
            },
            {
                "name": "Is the <datalist> tag and <select> tag same?",
                "description": "<p>No. The &lt;datalist&gt; tag and &lt;select&gt; tag are different. In the case of &lt;select&gt; tag a user will have to choose from a list of options, whereas &lt;datalist&gt; when used along with the &lt;input&gt; tag provides a suggestion that the user selects one of the options given or can enter some entirely different value.</p>"
            },
            {
                "name": "What is new about the relationship between the <header> and <h1> tags in HTML5?",
                "description": "<p>As HTML5 was all about better semantics and arrangements of the tags and elements, the &lt;header&gt; tag specifies the header section of the webpage. Unlike in previous version there was one &lt;h1&gt; element for the entire webpage, now this is the header for one section such as &lt;article&gt; or &lt;section&gt;. According to the HTML5 specification, each &lt;header&gt; element must at least have one &lt;h1&gt; tag.</p>"
            },
            {
                "name": "What are raster images and vector images?",
                "description": "<p><strong>Raster Images</strong> - The raster image are basically arrangement of pixels in a grid with exactly what color the pixel should be. Few raster file formats include PNG(.png), JPEG(.jpg), etc.<br><strong>Vector Images</strong> - The vector image is defined with shape and path definitions that can be used to render the image on-screen written in a similar markup fashion. The file extension is .svg</p>"
            },
            {
                "name": "How to support SVG in old browsers?",
                "description": "<p>To support old browsers instead of defining the resource of svg in src attribute of &lt;img&gt; tag, it should be defined in srcset attribute and in src the fallback png file should be defined.</p><p><code>&lt;img src=\"circle.png\" alt=\"circle\" srcset=\"circle.svg\"&gt;</code></p>"
            },
            {
                "name": "What is a manifest file in HTML5?",
                "description": "<p>The manifest file is used to list down resources that can be cached. Browsers use this information to make the web page load faster than the first time. There are 3 sections in the manifest file</p><ul><li><strong>CACHE Manifest</strong> - Files needs to be cached</li><li><strong>Network</strong> - File never to be cached, always need a network connection.</li><li><strong>Fallback</strong> - Fallback files in case a page is inaccessible</li></ul><p><img src='./assets/html/cache.png'></p>"
            },
            {
                "name": "Check HTML Markup Validity",
                "description": "<p><strong>Problem</strong> - Consider the following markup. Is it valid? If not, can you explain why?<br><img src='./assets/html/html.png'></p><br><br><p><strong>Answer</strong> - The markup uses the relatively new picture element. The code is all valid apart from the last image specified in the srcset attribute. <code>320y</code> is not a valid value, and the <code>y</code> should be replaced with a <code>w</code>.</p>"
            },
            {
                "name": "What are Web Components?",
                "description": "<ul><li>Web components are a set of web platform API.</li><li>Web components allow us to create <strong>custom re-usable widgets</strong> or <strong>component</strong> in a web application. </li><li>Web components are a <strong>part of the browser</strong> and <strong>will work</strong> across <strong>all modern browser</strong>.</li><li>Web components <strong>doesn't require</strong> need <strong>any external libraries</strong> to <strong>work</strong>.</li></ul><br><br><p><strong>Features</strong></p><ul><li>Custom Elements - let write our <strong>own fully featured</strong> DOM elements.</li><li>Shadow DOM - gives the best feature of a <strong>iframe, style and markup</strong> for the web page.</li><li>HTML Templates - allows to <strong>store</strong> some <strong>markup on the web page</strong> and we can later <strong>clone</strong> and <strong>reuse</strong> them.</li><li>HTML Imports - allow to <strong>import</strong> an <strong>external HTML document</strong>.</li></ul>"
            },
            {
                "name": "What is an IndexedDB?",
                "description": "<ul><li><strong>IndexedDB</strong> is javascript based <strong>object oriented database</strong>.</li><li><strong>IndexedDB</strong>is useful when we want to store <strong>large amount</strong> of <strong>data</strong> in a web applications.</li><li><strong>IndexedDB</strong> stores data as <strong>key-value</strong> pair.</li><li><strong>IndexedDB</strong> is an <strong>asynchronous></strong> API.</li><li><strong>IndexedDB</strong> is <strong>supported</strong></a> in <strong>most of browsers</strong>.</li></ul>"
            },
            {
                "name": "What is ARIA? While creating a Tab module how you will decide the ARIA tags?",
                "description": "<p>ARIA stands for Accessible Rich Internet Application. ARIA is useful for screenreader users.</p><p>ARIA provides information about such modules by defining the roles, properties, and states for screenreaders.</p><p>In short, ARIA is the bridge between missing information in HTML and screenreaders.</p>"
            },
            {
                "name": "Is the below code accessible or not? Why?",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/html/cssaccessbility.png'></p><br><br><p><strong>Answer</strong> - No, the above code is not accessible one of the issues is the content is coming from the CSS which will be not be picked by the screen readers.</p><br><br><br><p><strong>Problem</strong> - <br><img src='./assets/html/cssaccessbility1.png'></p><br><br><p><strong>Answer</strong> - No, the above code is not accessible due to the alt tag. Though I am assuming here based on the image name it is decorative image only and for screen readers this alt tag is not adding any value at all.</p>"
            },
            {
                "name": "As a senior developer how you will make sure that accessibility is getting followed?",
                "description": "<p>First of all - \"Accessibility is not a feature. It is a human right\". I strongly believe in this. Hence, instead of setting my team's expectation that they will get the requirement from the client or product manager about accessibility, I will ask them to focus on writing the right code. As well, I will make sure that every developer is using the ESA11y plugin in their code editor, lighthouse test, and integrated with the CI pipeline.</p>"
            },
            {
                "name": "For accessibility should we use em or rem?",
                "description": "<p>For accessibility, it is preferred to use rem for the margin/padding and em for the font-size. One more way we can do here is:</p><p><code><strong>\"html{ font-size: 100%; }\"</strong></code></p><p>The above code snippet is going to help the users to take the font-size according to the user's setting.</p>"
            },
            {
                "name": "Why type is important in the input?",
                "description": "<p>The HTML type attribute is important for screenreader users. The types will help them to understand what input type it is as well as the security reason associated with the password field. If the password type is missing then the screenreader will speak aloud the password user is entering.</p>"
            },
            {
                "name": "What is an accessibility tree?",
                "description": "<p>Just like we have the DOM similarly we have the accessibility tree. We can see this tree in the firefox and Chrome debugger too. This helps the developer to see how the accessibility elements are getting added such as role, focusable, alt tag, aria-labeldby, etc.</p>"
            },
            {
                "name": "What are tags and attributes in HTML?",
                "description": "<p>Tags are the primary component of the HTML that defines how the content will be structured/ formatted, whereas Attributes are used along with the HTML tags to define the characteristics of the element. For example, &lt;p align=” center”&gt;Interview questions&lt;/p&gt;, in this the ‘align’ is the attribute using which we will align the paragraph to show in the center of the view.</p>"
            },
            {
                "name": "How is Cell Padding different from Cell Spacing?",
                "description": "<p>Cell Spacing is the space or gap between two consecutive cells. Whereas, Cell Padding is the space or gap between the text/ content of the cell and the edge/ border of the cell. Please refer to the above figure example to find the difference.</p>"
            },
            {
                "name": "How to specify the link in HTML and explain the target attribute?",
                "description": "<ol><li><strong>_self</strong>: This is a default value. It opens the document in the same window or tab as it was clicked.</li><li><strong>_blank</strong>: It opens the document in a new window or tab.</li><li><strong>_parent</strong>: It opens the document in a parent frame.</li><li><strong>_top</strong>: It opens the document in a full-body window.</li></ol>"
            },
            {
                "name": "What is Microdata in HTML5?",
                "description": "<p>It is used to help extract data for site crawlers and search engines. It is basically a group of name-value pairs. The groups are called items, and each name-value pair is a property. Most of the search engines like Google, Microsoft, Yandex, etc follow schema.org vocabulary to extract this microdata.<br><img src='./assets/html/microdata.png'></p><ul><li><strong>itemid</strong> – The unique, global identifier of an item.</li><li><strong>itemprop</strong> – Used to add properties to an item.</li><li><strong>itemref</strong> – Provides a list of element ids with additional properties.</li><li><strong>itemscope</strong> – It defines the scope of the itemtype associated with it.</li><li><strong>itemtype</strong> – Specifies the URL of the vocabulary that will be used to define itemprop.</li></ul><p>The above example will be parsed by Google as<br><img src='./assets/html/Microdata_in_HTML5.png'></p>"
            },
            {
                "name": "What are the New tags in Media Elements in HTML5?",
                "description": "<ul><li><strong>&lt;audio&gt;</strong> - Used for sounds, audio streams, or music, embed audio content without any additional plug-in.</li><li><strong>&lt;video&gt;</strong> - Used for video streams, embed video content etc.</li><li><strong>&lt;source&gt;</strong> - Used for multiple media resources in media elements, such as audio, video, etc.</li><li><strong>&lt;embed&gt;</strong> - Used for an external application or embedded content.</li><li><strong>&lt;track&gt;</strong> - Used for subtitles in the media elements such as video or audio.</li></ul><br><img src='./assets/html/mediatags.png'>"
            },
            {
                "name": "What is the usage of a novalidate attribute for the form tag that is introduced in HTML5?",
                "description": "<p>Its value is a boolean type that indicates whether or not the data being submitted by the form will be validated beforehand. By making this false, forms can be submitted without validation which helps users to resume later also.</p><p><form action = '' method = 'get' novalidate><br> .... <br></form></p>"
            },
            {
                "name": "How to deliver high quality video/ott products",
                "description": "<ul><li><strong>Maximize the Initial Quality of your Videos</strong></li><li><strong>Choose the Right Encoder Settings</strong> - An encoder is a software or hardware tool that transforms your videos into streaming compatible formats.like codecs, bitrates,frames per second</li><li><strong>Use Adaptive Bitrate (ABR) Technology for Transcoding</strong> - which means bitrates as per the screen resolutions</li><li><strong>Configure Multiple CDNs for Ultra Fast Video Playback</strong></li><li><strong>Monitor all the Quality Control factors</strong> - like <br>#1. Check the performance of your streaming website & apps, and identify potential weak points in the architecture. <br>#2. Test the initial quality of your videos <br>#3. Test the video quality at different bitrate levels on both slow & fast internet connections. <br>#4. Monitor the CDN performance</li><li><strong>Use any video streaming platform to host your videos. You can embed the videos with a url on your site and now you don’t have to worry about file size limits nor slowing your site down.</strong></li></ul>"
            },
            {
                "name": "What Are Best Practices? to start for a web development",
                "description": "<ul><li><strong>Start By Planning</strong> - The first step of a project should be to identify the overall goal. the next step is to plan out how you are going to reach that goal. It may feel like you’re wasting time that could be used to build projects on the planning stages. But, it’s quite the contrary. Planning will make a project organized, minimize the space for errors, and allow you to stay focused without questioning the next step. So, it actually saves you a lot of time.</li><li><strong>Stick To The Standards</strong> - Creativity can often help developers devise unique solutions for tricky problems. But deviating too far from industry norms often results in failure. Some industry norms for web development are as follows: <br>#1. The navigation map should be the same for all pages of your website. It makes your website more uniform and coherent. <br>#2. The size of the hyperlinks should be appropriate and easily visible to the user.</li><li><strong>Code Smarter, Not Longer</strong> - Every line of code that you write should fulfill a necessary and particular purpose. Avoid writing anything too complex that could make your code hard to understand and edit in the future. </li><li><strong>Sprint updating on ontervals</strong> - to maintain a balance between today’s demand and future innovation. The user-interface created today will naturally become outdated a few months or years down the line. Therefore, it’s imperative to design and develop the backend accordingly. This makes sure that the User Interface (UI) can be modified in the future without doing a complete overhaul.</li><li><strong>Establish multi-device compatibility</strong> - Devices such as smartphones, laptops, and tablets have different screen resolutions as well as form factors. To ensure a quality user experience, it’s important to make sure your data is displayed correctly across all devices.</li></ul>"
            },
            {
                "name": "How to ensure your team follows coding standard",
                "description": "<p>Think of coding standards as a set of rules, techniques, and best practices to create cleaner, more readable, more efficient code with minimal errors. They offer a uniform format by which software engineers can use to build sophisticated and highly functional code.</p><p>Best Practices To Follow includes many things such as</p><ul><li><strong>Choose industry-specific coding standards</strong> - The standards required for coding software for luxury automobiles will differ from those for coding software for gaming.</li><li><strong>Focus on code readability</strong> - #1. Write as few lines as possible., #2. Use appropriate naming conventions. #3. Use indentation to marks the beginning and end of control structures. Clearly specify the code between them, #4. Don’t use lengthy functions. Ideally, a single function should carry out a single task, #5. Use the DRY (Don’t Repeat Yourself) principle. Automate repetitive tasks whenever necessary. The same piece of code should not be repeated in the script. #6. Avoid Deep Nesting. Too many nesting levels make code harder to read and follow. #7. Avoid long lines. It is easier for humans to read blocks of lines that are horizontally short and vertically long.</li><li><strong>Don’t use a single identifier for multiple purposes</strong>  Ascribe a name to each variable that clearly describes its purpose. Naturally, a single variable can’t be assigned multiple values or used for numerous functions. This would confuse everyone reading the code and would make future enhancements more difficult to implement. Always assign unique variable names.</li><li><strong>Turn daily backups into an instinct</strong> - Back up the workflow on any version control system.</li><li><strong>Leave comments and prioritize documentation</strong> - Take an extra minute to write a comment describing the code function at various points in the script. Ensure that the comments guide any readers through the algorithm and logic implemented.</li><li><strong>Try to formalize Exception Handling</strong> - Keep the code in a try-catch block. Use real-time log analysis tools.</li><li>Despite adhering to the coding best practices detailed above, bear in mind that all code needs to be extensively tested on real browsers and devices. Comprehensive and error-free testing ensures that no major bugs pass undetected into production, thus enabling software to offer the highest possible levels of user experience</li></ul>"
            },
            {
                "name": "How to adapt your website/app for TV browsers?",
                "description": "<p>Several rules can improve legibility on screen:</p><ul><li><p>Larger fonts, as TV sets are usually about 3m / 10feet away and resolution is usually 1920x1080 (smaller pixels)</p></li><li><p>Bright text (not too bright) on dark background</p><ul><li><p>TVs are usually in living room which is not lighted as much as offices therefore an average color close to white is too bright for eyes</p></li><li><p>Since TVs are further away, higher contrast is required. This can be achieved with or dark bright text on dark background text on not too bright background<br><i>Constrast = (0.05 + brighter intensity out of 1) / (0.05 + darker intensity out of 1)</i></p></li></ul></li><li><p>Bigger and further apart buttons - small buttons are harder to click on with many remote pointing devices (e.g. trackpad, air mouse)</p></li><li><p>Don't assume site is using full-screen - since the TV screen can be very large, some users open up multiple sites side by side and horizontal scrolling is annoying and not simple with some input devices</p></li><li><p>If site is to be used via TV's internal browser (no via a connected computer) then these also apply (many of these apply to mobile too):</p><ul><li><p>Don't use pop-ups or assume user can see tooltips</p></li><li><p>Reduce textual input to minimum and support (but don't enforce) auto-completion</p></li><li><p>Less menus (this is always a good idea, but in this case especially). Navigation between menus using a remote control requires a lot of clicks. Try to use one bigger menu, preferably at side of screen.</p></li><li><p>Consider keeping history in tabs since opening multiple links in a new windows may not be possible. Or perhaps enable opening link differently with different remote buttons (e.g. select = current tab, right = new tab in background, right and then select = new tab and jump to it)</p></li><li><p>Enable log in with a hardware id of the TV e.g. MAC address (if use logs in regularly and adds hardware id as an optional log-in) - this can save user input, however, encrypt the id using https.</p></li><li><p>Save favorites / recent / most commonly visited pages or functions in a more accessible region (save clicks as search will be more difficult)</p></li></ul></li></ul>"
            },
            {
                "name": "How can you store data in Android and iOS? Which databases and native solutions are available?",
                "description": "<p>The native data storage solution for Android is <code>SharedPreferences</code>. This is intended to store small amounts of data, like user preferences or settings. The data are stored in an XML file.</p><p>The native data storage solution for Android is <code>SharedPreferences</code>. This is intended to store small amounts of data, like user preferences or settings. The data are stored in an XML file.</p>"
            },
            {
                "name": "What are internationalization and localization? Do these terms mean the same thing?",
                "description": "<p><strong>Internationalization (“i18n”)</strong> is the process of adapting app code to other languages. For example, an app might need to display data in a different format, prices, or numbers with the correct decimal or thousands separators, or even handling whether text is written right-to-left or left-to-right. It also requires taking into account the user’s timezone.</p><p><strong>Localization (“l10n”)</strong>, on the other hand, is the process of preparing the content of the app to be available in different languages. This includes translating most of the app’s resources, like texts, images, and sounds. Resources for different languages are usually kept in different files or directories, and the OS chooses the right one based on user settings.</p>"
            },
            {
                "name": "What is the best way for a server to notify an app that some new data is available?",
                "description": "<p>A mobile app might use <strong>push notifications.</strong></p><ul><li><strong>Apple Push Notifications</strong> sends push notifications to iOS devices only.</li><li><strong>Firebase Cloud Messaging</strong> is Google’s mechanism for sending push notifications to devices and has replaced Google Cloud Messaging (GCM). This is touted as “multi-platform,” meaning that it also supports iOS devices, relaying via the Apple Push Notification service (APNs) under the hood.</li></ul>"
            },
            {
                "name": "How can you debug your app when it’s already released?",
                "description": "<p>There are lot of tools that provide crash and usage reports from mobile apps.</p><p>One of the most popular (and free) is Firebase Crashlytics, which supports both iOS and Android. It provides a lot of useful information about app crashes like the full-stack trace, operating system version, device manufacturer, and user language.</p>"
            },
            {
                "name": "What is the difference between native apps and hybrid apps? What are the advantages and disadvantages of hybrid apps?",
                "description": "<p>Native apps are written specifically for one platform, in the language used on said platform, i.e. Objective-C or Swift for iOS, and Java or Kotlin for Android. These apps have the best performance and can be designed for the specific platform which users are used to, so iOS users will not be surprised by some Android behavior or layout and vice versa.</p><p>Hybrid apps can work on multiple platforms. Under the hood, a hybrid app is actually a web page displayed in a web view, so it is usually written in JavaScript and HTML. Popular hybrid frameworks are Ionic, Cordova, and PhoneGap.</p><p>Hybrid apps have performance issues when compared with native apps, though. Access to device hardware (like sensors) might be problematic sometimes, and very often has to be written separately for each platform, so the developer must get into native code and write platform-specific things anyway.</p><p>It is also very hard to design one app that looks nice and is user-friendly for both iOS and Android. On the other hand, the process of writing a hybrid app might be cheaper and faster than writing a native app for each platform. But this technique is especially suitable for small and simple apps.</p><p>There is also a third group of apps, developed using technologies like React Native or Flutter. These are frameworks that try to connect the ease of writing multi-platform apps with native performance. They offer the possibility to write code in one language—JavaScript, C#, or Dart—and compile it into native code. The frameworks often use native implementations of controls, so the user experience is a bit better than for hybrid apps.</p>"
            },
            {
                "name": "What are the main things you have to be cautious about when writing for mobile?",
                "description": "<p><strong>Network</strong> - The phone may frequently switch between networks. Loading tons of heavy data when users use their cellular network will drain their data packets and expose them to additional costs. The developer might provide an offline mode and different data loading behavior when working on WiFi, LTE, 3G or H; e.g., do not download movies or request lower-quality images.</p><p><strong>Fragmentation</strong> - it is always good to have variety of physical devices for testing or use a test-device cloud platform.</p><p><strong>RAM</strong> - taking care of good memory management is still necessary. The OS will kill apps that use too much memory, so a developer must care about memory leaks and optimize long-running operations.</p><p><strong>Disk Space</strong> - the developer should try to keep the app as small as possible. Having to download 500 MB to use a small app like a calculator will discourage users from trying the app in the first place. But also once installed, keeping unnecessary files and otherwise taking up too much space may lead to users uninstalling the app and looking for a better alternative.</p><p><strong>Battery</strong> - This is one of the weakest points of contemporary phones. Every action we take in an app affects the battery. The developer must take care when it comes to using different services like GPS. Developers should use such features only when necessary and use optimized OS solutions to update data in the background.</p>"
            },
            {
                "name": "Describe the process of publishing apps on Google Play and in Apple’s App Store. What do you need to publish an app to each store?",
                "description": "<h3>Google Play</h3><p>Google requires that you have a developer account to publish apps.</p><p>When an app is ready, it should be built into an APK file.</p><p>The APK must be signed to prove that it comes from your specific company. The signing is done using a keystore, which is a file containing one or more private keys belonging to the company/developer. (If this file is lost, no updates can be done for the app.)</p><br><br><h3>The App Store</h3><p>Apple requires a developer account connected with the Apple Developer Program to publish apps here.</p><p>First, the app must have a profile created for it in iTunes Connect.</p><p>The finished app is built into an IPA file, which has to be signed by some certificates. Xcode helps to do it all automatically using the Distribution Certificate (DC) and the Provisioning Profile, which connects the DC to the app ID.</p><p>Once sent, the app is checked by a team at Apple. It may take several days until the app is approved (or rejected) for publishing.</p>"
            },
            {
                "name": "What is app sandboxing and what is it for?",
                "description": "<p>App sandboxing is a security mechanism that isolates apps at the kernel level. Each app is run in its own sandbox, which means that it has a very limited access to data: It can access only its own data and files, and no other app can read or write them.</p><p>This is to protect user data from malicious software which might be accidentally or intentionally installed on the device. Apps are still able share some data, but only the data they want to, using mechanisms provided by the system (e.g., <code>ContentProvider</code> on Android).</p>"
            }
        ]
    },
    {
        "folder": "CSS",
        "title": "CSS",
        "url": "/folder/CSS",
        "icon": "logo-css3",
        "question": [
            {
                "name": "List the components of a CSS Style?",
                "description": "<ul><li>Selector: It is an HTML tag at which a style will be applied.</li><li>Property: It is a type of attribute of HTML tag.</li><li>Value: These are assigned to properties.</li></ul>"
            },
            {
                "name": "Difference between CSS and CSS3?",
                "description": "<table style='width:100%;'><thead><tr><th style='text-align:left;'>CSS<br></th><th style='text-align:left;'>CSS3<br></th></tr></thead><tbody><tr><td style='width:50%;vertical-align:top;'>CSS main focus was on providing formatting features and basic styling to the HTML elements.<br></td><td style='width:50%;vertical-align:top;'>CSS3 has evolved to overcome the drawbacks of CSS with a lot of new features and better performance.<br></td></tr><tr><td style='vertical-align:top;'>In CSS, everything was a kind of specification which defined different features.<br></td><td style='vertical-align:top;'>CSS3 has made this simpler by bringing in the concept of modules.<br></td></tr><tr><td style='vertical-align:top;'>CSS will not support media queries for responsive design.<br></td><td style='vertical-align:top;'>CSS3 supports media queries for responsive design.<br></td></tr><tr><td style='vertical-align:top;'>CSS supports only standard hex colors and It's a pain to use elegant colors and make the UI better.<br></td><td style='vertical-align:top;'>CSS3 supports RGBA, HSL, HSLA and gradient colors too. Using these types of colors helps us to frame and use better colors in UI.<br></td></tr><tr><td style='vertical-align:top;'>CSS supports simple selectors. Like the ones with ID, class and tag names.<br></td><td style='vertical-align:top;'>CSS3 calls the components as a sequence of selectors in a very different and advanced way.<br></td></tr><tr><td style='vertical-align:top;'>CSS supports only ‘web-safe fonts’ to make sure that the text displays in all the browsers.<br></td><td style='vertical-align:top;'>CSS3 has introduced designers to use special fonts like those available in Google fonts.<br></td></tr></tbody></table>"
            },
            {
                "name": "Explain Grouping and Nesting in CSS.",
                "description": "<p>Grouping allows you to give the same properties to different selectors without repeating them. It reduces the code by grouping selectors that have the same properties or values. To group them, separate them with a comma, and the same properties will get applied to them all. Nesting allows you to have elements nested inside other elements.</p>"
            },
            {
                "name": "Describe the box model in CSS3? What is the use of the CSS Box Model",
                "description": "<ul><li><strong>Content:</strong> &nbsp;Actual Content of the box where the text or image is placed.</li><li><strong>Padding:</strong> Area surrounding the content (Space between the border and content).</li><li><strong>Border:</strong> Area surrounding the padding.</li><li><strong>Margin:</strong> Area surrounding the border.</li></ul><br><br><p><strong>Its use</strong> - The CSS Box model is used to create the design and layout of web documents. It is a box that contains multiple properties including content, padding, border, and margin. It allows us to add a border all around elements and define space between elements.</p>"
            },
            {
                "name": "What is a pseudo-class? Explain with an example?",
                "description": "<p>A pseudo-class is a special keyword which is added to a selector which specifies the state of the element. There are around ~60 pseudo-classes available. Some of the relevant examples of pseudo-classes are active, checked, disabled, empty, first-child, hover, focus, in-range, invalid, last-child, nth-child, optional, read-only, target, valid, visited, root, required which can actually be used to apply styles.</p><p><img src='./assets/css/pseudoclass1.png'></p>"
            },
            {
                "name": "What are pseudo-elements? Explain with an example.",
                "description": "<p>Pseudo-elements are used to style or modify the specific part of an HTML element using CSS.</p><p><img src='./assets/css/pseudoelement1.png'></p>"
            },
            {
                "name": "What are Media Types rules",
                "description": "<p>If we don’t apply a media type, the @ media rule selects all types of devices by default. Otherwise, Media types come right after the @ media rule. There are many kinds of devices but we can group them into 4 categories:</p><ul><li>all — for all media types</li><li>print — for printers</li><li>screen — for computer screens, tablets and, smart-phones</li><li>tv - for television type devices</li></ul><p>For example, when I want to select only screens, I will set the screen keyword right after the @media rule. I also must concatenate the rules with the “and” keyword:<br><img src='./assets/css/mediatype.png'></p>"
            },
            {
                "name": "Define a CSS preprocessor.",
                "description": "<p>A CSS preprocessor is a tool that is used for extending the basic functionality of default vanilla CSS through its scripting language. It helps us in using complex logical syntaxes such as functions, mixins, variables, code nesting and inheritance. These preprocessors compile the code that is written through a special compile. It is then used for creating a CSS file that can be referenced by the main HTML document.</p>"
            },
            {
                "name": "What are the different types of Selectors in CSS?",
                "description": "<p><strong>1. Element Selector:</strong> The element selector selects HTML elements based on the element name or tag. It matches one or more HTML elements of the same name. Example \"h2 { color: red }\"</p><p><strong>2. ID Selector:</strong> The ID selector uses the ID attribute of an HTML element to select a specific element. It matches any HTML element that has an ID attribute with the same value as that of the selector. Example \"#myID { color: red }\"</p><p><strong>3. Universal Selector:</strong> The universal selector selects all the elements in an HTML document.Example \"* { color: red }\"</p><p><strong>4. Group Selector:</strong> It styles all comma-separated elements with the same style. Example \" h1, h2, h3, p { color: red }\"</p><p><strong>5. Attribute Selector:</strong> Using the attribute selector, the HTML elements can be styled based on the presence of an attribute. Example \" [attribute=\"value\"] { color: red }\"</p><p><strong>6. Class Selector:</strong> The class selector also matches HTML elements with a specific class attribute. It matches the elements that have their class attribute the same as that of the class. Example \"#myClass { color: red }\"</p>"
            },
            {
                "name": "CSS Combinators",
                "description": "<table style='width:100%;'><thead><tr><th style='text-align:left;'>Name<br></th><th style='text-align:left;'>Syntax<br></th><th style='text-align:left;'>Selects<br></th></tr></thead><tbody><tr><td style='width:33.3333%;'>Selector List<br></td><td style='width:33.3333%;'>A, B<br></td><td style='width:33.3333%;'>Selects the matching element A/B.<br></td></tr><tr><td>Descendant Combinator<br></td><td>A B<br></td><td>Selects any element matching B that is descendant of an element matching A.<br></td></tr><tr><td>Child Combinator<br></td><td>A &gt; B<br></td><td>Selects any element matching B that is the direct child of an element matching A.<br></td></tr><tr><td>Adjacent Sibling Combinator<br></td><td>A + B<br></td><td>Selects any element matching B that is the next sibling of the element matching A.<br></td></tr><tr><td>General Sibling Combinator<br></td><td>A ~ B<br></td><td>Selects any element matching B that is one of the next siblings of an element matching A.<br></td></tr></tbody></table>"
            },
            {
                "name": "What is viewport height/viewport width in CSS?",
                "description": "<p>It is a CSS unit that is used for measuring the height and width in percentage w.r.t. the viewport. It is mainly used in responsive design techniques. The measure VH is 1/100 of the height of the viewport. If the height of browser is equal to 1000px, 1vh is  10px. and if the width is 1000px, 1 vw is 10px.</p>"
            },
            {
                "name": "What’s the difference between resetting and normalizing CSS? Which would you choose, and why?",
                "description": "<ul><li><strong>Resetting</strong> — is meant to strip all default browser styling on elements. For e.g. <code>margins</code>, <code>paddings</code>, <code>font-sizes</code> of all elements are reset to be the same. You will have to redeclare styling for common typographic elements.</li><li><strong>Normalizing</strong> — preserves useful default styles rather than “unstyling” everything. It also corrects bugs for common browser dependencies.</li></ul><p>It's a good idea to choose resetting when you have very a customized or unconventional site design such that I need to do a lot of my own styling do not need any default styling to be preserved.</p>"
            },
            {
                "name": "What is the use of the z-index?",
                "description": "<p>An element’s stack order is indicated by the z-index property. An element with a higher stack order will always be in front of a lower stack order element. It only works with the elements defined with position properties(position: relative, absolute, sticky, or fixed) and flex property. Z-index specifies the following values: auto, number, inherit, or initial.</p>"
            },
            {
                "name": "When does DOM reflow take place?",
                "description": "<p>The web browser mechanism known as “reflow” recalculates the locations and geometries of document elements to redraw all or a portion of the document again. Below mentioned points tell us when DOM reflow occurs:</p><ul><li>When content is modified on a web page.</li><li>Moving or animating the DOM element.</li><li>Whenever updating, insertion, or deletion of an element occurs in DOM then also reflow mechanism happens.</li><li>While changing a CSS style.</li></ul>"
            },
            {
                "name": "Explain CSS position property",
                "description": "<ul><li><strong>Static:&nbsp;</strong>It's a default value of position to any element. Element is rendered one after the other in order. It's the way as it is. There's no change in the display of elements. Which will display in the window with default paddings and margins?</li><li><strong>Absolute:&nbsp;</strong>The absolute value is used to position the element relative to its parent element. Say if the parent element has ‘x’ margin in the left. The child element ‘y’ margin towards left. The total margin of the child element would be ‘x+y’.</li><li><strong>Fixed:&nbsp;</strong>The fixed value is used to position the element relative to the viewport (browser window) and the position of the element would be fixed.</li><li><strong>Relative:&nbsp;</strong>The relative value is used to position the element relative to its normal position.&nbsp;</li><li><strong>Sticky:&nbsp;</strong>The stick value is used to position the element based on the user's scroll. Its position is relative until a given offset position is met. Then it will stick in a place like it's fixed.</li><li><strong>Initial:&nbsp;</strong>This property value allows us to use the default behavior of the element.</li><li><strong>Inherit:&nbsp;</strong>This property value allows us to inherit the property of its parent.</li></ul>"
            },
            {
                "name": "Difference between visibility: hidden and display: none",
                "description": "<p>visibility:hidden hides the element, but it still takes up space in the layout and affects it. display:none removes the element from the document as if it never existed. It does not take up any space in the layout.</p>"
            },
            {
                "name": "Is testing the website across several browsers necessary?",
                "description": "<p>Due to the frequent updates that browsers receive, testing your website routinely in various browsers can assist you to ensure that every webpage is compatible with it.</p>"
            },
            {
                "name": "How can you tell if a browser supports a particular feature",
                "description": "<p>To check if the current browser supports a specific feature, you can use the @support property in CSS.<br><img src='./assets/css/support.png'></p>"
            },
            {
                "name": "What does Accessibility (a11y) mean?",
                "description": "<p><strong>Accessibility (a11y)</strong>is a measure of a computer system's accessibility is to all people, including those with disabilities or impairments. It concerns both software and hardware and how they are configured in order to enable a disabled or impaired person to use that computer system successfully.</p><p>Accessibility is also known as <em>assistive technologyn></em></p>"
            },
            {
                "name": "How does CSS actually work (under the hood of browser)?",
                "description": "<p>When a browser displays a document, it must combine the document's content with its style information. It processes the document in two stages:</p><ul><li>The browser converts <em>HTML</em> and <em>CSS</em> into the <em>DOM (Document Object Model)</em>. The DOM represents the document in the computer's memory. It combines the document's content with its style.</li><li>The browser displays the contents of the DOM.</li></ul><br><img src='./assets/css/rendering.svg'>"
            },
            {
                "name": "How does calc() work?",
                "description": "<p>We can conduct mathematical calculations on property values using the CSS3 calc() feature. We can use calc() to declare, for instance, that an element’s width is the result of the addition of two or more numerical values rather than stating static pixel values for that width.</p>"
            },
            {
                "name": "How do you specify units in the CSS?. What are the different ways to do it?",
                "description": "<p>There are different ways to specify units in CSS like px, em, rem, pt, percentage (%).</p><p><strong>PX: Pixels (px)</strong> are considered absolute units, </p><p><strong>EM</strong>: Relative to the parent element</p><p><strong>REM</strong>: Relative to the root element (HTML tag)</p><p><strong>%</strong>: Relative to the parent element</p><p><strong>VW</strong>: Relative to the viewport’s width</p><p><strong>VH</strong>: Relative to the viewport’s height</p><p>Unlike PX, relative units like %, EM, and REM are better suited to responsive design and also help <strong>meet accessibility standards</strong>. Relative units scale better on different devices because they can scale up and down according to another element’s size.</p>"
            },
            {
                "name": "How are the CSS selectors matched against the elements by the browser?",
                "description": "<p>The order of matching selectors goes from <strong>right to left </strong>of the selector expression. The elements in the DOM are filtered by browsers based on the key selectors and are then traversed up to the parent elements for determining the matches.<br><img src='./assets/css/pspan.png'></p><p>Here, the browser first finds all <code>span</code> elements in the DOM and then it traverses to each of its parent elements to check if they are the paragraph <code>p</code> elements.</p><p>Here, the browser first finds all <code>span</code> elements in the DOM and then it traverses to each of its parent elements to check if they are the paragraph <code>p</code> elements.</p><p>Once the browser finds <strong>all</strong> matching span tags having paragraph elements as parent and applies the color of black to the content, the matching process is stopped.</p>"
            },
            {
                "name": "What is cascading in CSS?",
                "description": "<p>“Cascading” refers to the process of going through the style declarations and defining weight or importance to the styling rules that help the browser to select what rules have to be applied in times of conflict.</p>"
            },
            {
                "name": "Different Box Sizing Property?",
                "description": "<ul><li><strong>Content-box:</strong> The default width and height values apply to the element's content only. The padding and border are added to the outside of the box.</li><li><strong>Padding-box:</strong> Width and height values apply to the element's content and its padding. The border is added to the outside of the box. Currently, only Firefox supports the padding-box value.</li><li><strong>Border-box:</strong> Width and height values apply to the content, padding, and border.</li></ul>"
            },
            {
                "name": "What is specificity?",
                "description": "<p>In CSS, say if you have two conflicting styles for an element, the browser should decide which one to apply and render. This is chosen by the browser-based on specificity. Specificity is nothing but a set of rules. Some of the rules are mentioned below.</p><ol><li>Say- if you have two element selectors selecting the same element but having different styles. The element selector which is read latest by the browser will get applied</li><li>The element selector has less priority compared to a class selector. So, the styles written in the class selector gets applied.</li><li>The class selector has less priority compared to an ID selector. So, the styles written in the ID selector gets applied.</li><li>If we use !important along with the value for a CSS property. This style gets applied no matter it's a class or an element or an ID selector.</li></ol>"
            },
            {
                "name": "What is progressive rendering? How do you implement progressive rendering in the website?. What are the advantages of it?",
                "description": "<p>Progressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.</p><p>We can implement the progressive rendering of the page by loading the lazy loading of the images. &nbsp;We can use Intersection Observer API to lazy load the image. The API makes it simple to detect when an element enters the viewport and take an action when it does. Once the image enters the viewport, we will start loading the images.</p>"
            },
            {
                "name": "What are the advantages of using translate() instead of absolute position?",
                "description": "<p>Translate() does not cause the browser to trigger repaint and layout and instead only acts on the compositor. The absolute position triggers the repaint or DOM reflow. So, translate() gives better performance.</p>"
            },
            {
                "name": "How is margin different from padding in CSS?",
                "description": "<p>Margin property using which we can create space around the elements. We can also create space for borders defined at the exteriors.<.p><p>The padding property is used for generating the space around the element’s content and inside any known border.</p>"
            },
            {
                "name": "What's new in CSS3?",
                "description": "<p>CSS3 is the latest evolution extending CSS2. It has a lot of new features like selectors, rounded corners, border-image, text-shadow, box-shadow, transitions, animations, gradients, and grid layouts.</p><ul><li><strong>Selectors</strong>: Selectors are used to selecting the content which you want to add styles too. There are five types of selectors in CSS.<ul><li>Type Selector (Element Selector)</li><li>ID Selector</li><li>Class Selector</li><li>Universal Selector</li><li>Attribute Selector</li></ul></li><li><strong>Rounded Corners:&nbsp;</strong>Using this feature, we can apply smooth corners to any element. The <em>border-radius</em> property is used to give the element smooth edges. Check out the example below for syntax and usage.</li><li><strong>Border Image:&nbsp;</strong><em>border-image&nbsp;</em>property allows us to use an image as a border. Check the example below for syntax and usage.</li><li><strong>Shadow:&nbsp;</strong>It's an effect which can be applied to text and box. <em>text-shadow</em> and <em>box-shadow</em> are the property names used to added shadow to text and box respectively.</li><li><strong>Transitions:&nbsp;</strong>CSS Transitions allows us to change the values of the <em>transition&nbsp;</em>property smoothly.</li><li><strong>Gradients:&nbsp;</strong>We can directly use gradients in for two or more colors using <em>linear-gradient</em> and <em>radial-gradient</em> properties.</li><li><strong>Grid Layouts:&nbsp;</strong>We have two new display properties which are grid and inline-grid which offers us a grid-based layout with similar rows and columns concept.</li></ul>"
            },
            
            {
                "name": "How is responsive design different from adaptive design?",
                "description": "<p>Both <em>responsive</em> and <em>adaptive</em> design attempt to optimize the user experience across different devices, adjusting for different viewport sizes, resolutions, usage contexts, control mechanisms, and so on.</p><p><strong>Responsive design</strong> works on the principle of flexibility&#8202;—&#8202;a single fluid website that can look good on any device. Responsive websites use <em>media queries</em>, <em>flexible grids</em>, and <em>responsive images</em> to create a user experience that flexes and changes based on a multitude of factors. Like a single ball growing or shrinking to fit through several different hoops.</p><p><strong>Adaptive design</strong> is more like the modern definition of progressive enhancement. Instead of one flexible design, adaptive design detects the device and other features, and then provides the appropriate feature and layout based on a <em>predefined set of viewport sizes</em> and other characteristics. The site detects the type of device used, and delivers the pre-set layout for that device. Instead of a single ball going through several different-sized hoops, you’d have several different balls to use depending on the hoop size.</p>"
            },
            {
                "name": "How is responsive design different from adaptive design?",
                "description": "<p>Both <em>responsive</em> and <em>adaptive</em> design attempt to optimize the user experience across different devices, adjusting for different viewport sizes, resolutions, usage contexts, control mechanisms, and so on.</p><p><strong>Responsive design</strong> works on the principle of flexibility&#8202;—&#8202;a single fluid website that can look good on any device. Responsive websites use <em>media queries</em>, <em>flexible grids</em>, and <em>responsive images</em> to create a user experience that flexes and changes based on a multitude of factors. Like a single ball growing or shrinking to fit through several different hoops.</p><p><strong>Adaptive design</strong> is more like the modern definition of progressive enhancement. Instead of one flexible design, adaptive design detects the device and other features, and then provides the appropriate feature and layout based on a <em>predefined set of viewport sizes</em> and other characteristics. The site detects the type of device used, and delivers the pre-set layout for that device. Instead of a single ball going through several different-sized hoops, you’d have several different balls to use depending on the hoop size.</p>"
            },
            {
                "name": "In how many ways can a CSS be written / call / render in an HTML file?",
                "description": "<ol><li><strong>Inline:</strong> Writing CSS for an element along with the element definition using the style property. Ex.  &lt;h1 style=”color: red;”&gt;Hello, World!&lt;/h1&gt;</li><li><strong>Embedded:</strong> Writing the CSS in the head using the style tag. Ex. - &lt;style&gt;h1{color: red;}&lt;/style&gt;</li><li><strong>External:</strong> Having CSS written in an external document and linking it via link tag. Ex. - &lt;link rel=”stylesheet” type=”text/css” href=”main.css”&gt;</li></ol>"
            },
            {
                "name": "Difference between serif and sans-serif fonts?",
                "description": "<p>Serif and sans-serif are the parent fonts to all the available fonts. Serif fonts usually have a hook (commonly known as feet) for all the letters, whereas in sans-serif (sans means without in French), we will not have those hooks. Some of the examples of popular serif fonts are Times New Roman, Bookman, Baskerville, Cambria, Courier, Century, Copper Black, Minion, and New York. Some of the examples of popular sans-serif fonts are Arial, Calibri, and Comic Sans, Helvetica, Geneva, San Francisco, and Ubuntu.</p><p><img src='./assets/css/sansserif.png'></p>"
            },
            {
                "name": "What are conditional comments?",
                "description": "<p>Conditional comments are developed by microsoft. And it only worked with IE browser. The conditional comments help to target IE browser & comments can be written to target the different version of IE 5-IE 9. CSS rules or code embedded inside of the comments will be used by Internet explorer based browser.  Whereas from IE10 & above the support for conditional comments has been dropped.</p><p><img src='./assets/css/conditioncomments.png'></p>"
            },
            {
                "name": "How to write media queries for a device with aspect ratio 16/9?",
                "description": "<p>The aspect ratio is defined as the ratio of width media feature to the ratio of height media features W:H.</p><p><img src='./assets/css/mediaaspectratio.png'></p>"
            },
            {
                "name": "How to style the first line of the paragraph as uppercase?",
                "description": "<p><strong>p:first-line { text-transform: uppercase }</strong></p>"
            },
            {
                "name": "How to render the first letter of a paragraph with red color & red border?",
                "description": "<strong>p::first-letter { <br> &nbsp; border: 1px solid; <br> &nbsp; font-weight: bold; <br> &nbsp; color: red;&nbsp; <br> }</strong>"
            },
            {
                "name": "CSS Vendor prefixes?",
                "description": "<ul><li>-webkit- (Chrome, Safari, newer versions of Opera, almost all iOS browsers (including Firefox for iOS); basically, any WebKit based browser)</li><li>-moz- (Firefox)</li><li>-o- (Old, pre-WebKit, versions of Opera)</li><li>-ms- (Internet Explorer and Microsoft Edge)</li></ul>"
            },
            {
                "name": "Explain CSS sprites, and how you would implement them on a page or site.",
                "description": "<p>CSS sprites combine multiple images into one single larger image.</p><p><strong>Advantages</strong>:</p><ul><li>Reduce the number of HTTP requests for multiple images (only one single request is required per spritesheet). But with HTTP2, loading multiple images is no longer much of an issue.</li><li>Advance downloading of assets that won’t be downloaded until needed, such as images that only appear upon <code>:hover</code> pseudo-states. Blinking wouldn't be seen.</li></ul>"
            },
            {
                "name": "Inherit, Initial and Unset Values for CSS Properties?",
                "description": "<ul><li> <strong>inherit</strong>: Get the property from the parent element.</li><li> <strong>initial</strong>: The default value for the property (the browser default).</li><li> <strong>unset</strong>: Acts as either inherit or initial. It’ll act as inherit if the parent has a value that matches, or else it will act as initial.</li></ul>"
            },
            {
                "name": "Flexbox?",
                "description": "<ul><li>To start using the Flexbox model, you need to first define a flex container. <br><img src='./assets/css/flex-container.png'></li><li> Parent Container Properties<ul><li><strong>flex-direction:</strong> row | row-reverse | column | column-reverse; <br>#This establishes the main-axis, where it defines the direction for the flex items are placed in the flex container.<br><img src='./assets/css/flex-direction.png'></li><li><strong>flex-wrap:</strong> nowrap | wrap | wrap-reverse; <br>#By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap<br><img src='./assets/css/flex-wrap.png'></li><li><strong>flex-flow:</strong> This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container's main and cross axes. The default value is <code>row nowrap</code>.</li><li><strong>justify-content:</strong> flex-start | flex-end | center | space-between | space-around | space-evenly; <br>#This defines the alignment along the main axis. It helps distribute all the free space leftover on the main axis line.<br> <img src='./assets/css/jstify-content.png'></li><li><strong>align-items:</strong> stretch | flex-start | flex-end | center | baseline; <br>#This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).<br><img src='./assets/css/align-items.png'></li><li><strong>align-content:</strong> flex-start | flex-end | center | space-between | space-around | space-evenly | stretch; #This aligns a flex container's lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.<br><img src='./assets/css/align-content.png'></li></ul></li><li> Children Item Properties<ul><li><strong>order:</strong> property specifies the order of the flex items which means the flex item should be displayed in the which order. Default is 0</li><li><strong>flex-grow:</strong> property specifies how much a flex item will grow relative to the rest of the flex items. Default is 0</li><li><strong>flex-shrink:</strong>property specifies how much a flex item will shrink relative to the rest of the flex items. Default is 1</li><li><strong>flex-basis:</strong>property specifies the initial length of a flex item. Default is auto</li><li><strong>flex:</strong>property is a shorthand property for the <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code> properties</li><li><strong>align-self:</strong> property specifies the alignment for the selected item inside the flexible container. It overrides the default alignment set by the container's <code>align-items</code> property.</li></ul></li></ul><br><br>-- Flex Container properties<br>1. flex-direction (row column row-reverse column-reverse)<br>2. justify-content (flex-start, flex-end, center, space-around, space-between, space-evenly) -  works across main axis<br>3. align-items (flex-start, flex-end, center) -  works across cross axis<br>4. flex-wrap (wrap nowrap wrap-reverse) - specifies items are forced into single line or can be wrapped into multiple lines wrap-reverse changes cross axis direction<br>5. align-content(flex-start, flex-end, center, space-around, space-between, space-evenly) - works with align-item in cross axis, we can manipulate space on cross axis<br><br><br>-- Flex item properties<br>1. align-self (flex-start, flex-end, center stretch) - It works on cross axis to align itself.<br>2. flex-basis -  gives width along main axis and has more priority than css width property.<br>3. flex-grow (number) -  it expands block on ration basis<br>4. flex-shrink (number) - it shrinks block on ration basis<br>5. order (number) - sets the order of the block, default order is 0."
            },
            {
                "name": "What are the different ways to visually hide content (and make it available only for screen readers)?",
                "description": "<ul><li><code>visibility: hidden</code>. However the element is still in the flow of the page, and still takes up space.</li><li><code>width: 0; height: 0</code>. Make the element not take up any space on the screen at all, resulting in not showing it.</li><li><code>position; absolute; left: -99999px</code>. Position it outside of the screen.</li><li><code>text-indent: -9999px</code>. This only works on text within the block elements.</li><li><code>.sr-only</code> class for Bootstrap</li></ul>"
            },
            {
                "name": "what do you mean by shorthand notations in CSS3?",
                "description": "<p>Shorthand notations are also called as shorthand properties in CSS. That lets you set multiple values of CSS properties simultaneously. It's often good to use shorthand notations because it reduces the file size and even improves the performance.</p><p><img src='./assets/css/shorthand.png'></p>"
            },
            
            {
                "name": "In an HTML page there are two <input> elements with default values; one is editable and the other one not editable. Add cyan as the background color for the input element which is not editable using CSS. [Hint: Use pseudo-class]",
                "description": "<p><img src='./assets/css/readonly.png'></p>"
            },
            {
                "name": "Draw a circle using CSS?",
                "description": "<p><code>border-radius: 50%;</code></p>"
            },
            {
                "name": "table-layout property?",
                "description": "<p>The table-layout property in css defines the algorithm used to set the lay out of the table cells, rows, and columns.</p><ul><li>auto - As stated earlier the browsers use an automatic table layout algorithm. The column width is set by the widest unbreakable content in the cells. The content will dictate the layout.</li><li>fixed - The layout is fixed based on the first row. Set the width of those, and the rest of the table follows. If no widths are present on the first row, the column widths are divided equally across the table, regardless of content inside the cells.</li><li>initial - Sets this property to its default value.</li><li>inherit - Inherits this property from its parent element.</li></ul>"
            },
            {
                "name": "Fixing cross browser-specific styling issues?",
                "description": "<ul><li>After identifying the issue and the offending browser, use a separate style sheet that only loads when that specific browser is being used. This technique requires server-side rendering though.</li><li>Use libraries like Bootstrap that already handles these styling issues for you.</li><li>Use <code>autoprefixer</code> to automatically add vendor prefixes to your code.</li><li>Use Reset CSS or Normalize.css.</li></ul>"
            },
            {
                "name": "Which one of [ID, class] selector has higher priority?",
                "description": "<p>In CSS, ID is suggested to be unique for an element whereas the class name is can be the same for many elements. As the ID is unique for the element, ID has higher priority than class in CSS. </p>"
            },
            {
                "name": "Define a two column layout using flexbox?",
                "description": "<p><img src='./assets/css/flex.png'></p>"
            },
            {
                "name": "How to style label associated with the selected radio input and checked checkboxes?",
                "description": "<p>We can use the CSS pseudo-class property :checked on input type radio & checkbox and the adjacent sibling combinator (E + F) E is the first element which is input type radio or checkboxes and F is the next element which is label.</p><p><img src='./assets/css/csscheckbox.png'></p>"
            },
            {
                "name": "How to declare variables in CSS?",
                "description": "<p>CSS variables enables developers to reuse the code, once the variable are defined and it can be reused effectively, which gives good control over stylesheet in terms of code readability, maintenance and bring consistency.</p><p>We can declare the variable via :root pseudo-class and reusing the variable using var followed by variable name in parenthesis and assigning to CSS property.</p><p><img src='./assets/css/rootvar.png'></p>"
            },
            {
                "name": "What is the difference between position:sticky and position:fixed?",
                "description": "<p>The element with position:fixed property will be displayed at the specific offset (top, bottom, left and right) based on the position relative to the viewport.</p><p>It will stay at same place when the page is scrolled.</p><p>Whereas in position:sticky the element behave as relatively positioned element and once the containing block of the element crosses a specified threshold value it act as position:fixed element. So, the element switches its position based on the threshold value specified by top, bottom, left &amp; right co-ordinates value.</p>"
            },
            {
                "name": " How to style hyperlinks which are relative or internal to a webpage?",
                "description": "<p>We can do a pattern match for such urls by</p><p><img src='./assets/css/cssmatch.png'></p>"
            },
            {
                "name": "Difference between border-box and content-box Which box model is more in accordance with w3c box model?",
                "description": "<p>The difference between the two lies how the effective width of the container is calculated. The border-box &amp; content-box belong to box-sizing property. The box-sizing property tell the browser how the effective width of the container to be calculated.</p><p>content-box is based on default css box sizing behavior. The rendered width of the container will include the container width+padding+border. Whereas the border-box tell the browser to include the padding &amp; border values with-in the declared width for e.g. 200 pixels. So, the rendered width will be 200 pixels only.</p><ul> <li><strong>HTML</strong><p><img src='./assets/css/html.png'></p></li><li><strong>CSS</strong><p><img src='./assets/css/css.png'></p></li><li><strong>OUTPUT</strong><p><img src='./assets/css/output2.png'></p></li></ul>"
            },
            {
                "name": "What are counters?",
                "description": "<p>CSS Counters are similar to variables. It allows to number a list of element.<br>It is also supported by vast number of browsers IE, Edge, Firefox, Chrome, Safari &amp; Opera. CSS counters can be used to order </p><p>It can be used in various ways to dynamically manage the information with sequential number with prefix or suffix content. It is a great addon for css authors if they are working on a content which include table of content, chapters heading and the numbering is been prefered to be handled by dynamically, rather fixing the numbers manually at each location/line in the code.</p><ul> <li> content- Used with the ::before and ::after pseudo-elements, to insert generated content </li><li>counter-increment - Increments one or more counter values </li><li>counter-reset - Creates or resets one or more counters </li><li>counter() - Returns the current value of the named counter </li></ul><p><img src='./assets/css/counter.png'></p><p><img src='./assets/css/counter1.png'></p>"
            },
            {
                "name": "How to select all immediate div which is the descendant of class cw-alert, whereas the descendant div with class name .alert-button-container not to be selected. The css rules to applicable for languages who text-direction is right to left?",
                "description": "<p>To select language text direction the selector will be <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">[dir=rtl]</span> and followed by class <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">.cw-alert</span>, and to select the div except class <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">.alert-button-container :not&nbsp;</span>pseudoclass can be used as follows.</p><strong>[dir=rtl] .cw-alert&gt;div:not(.alert-button-container){<br>/* Your code here */<br>}</strong>"
            },
            {
                "name": "What is object-fit:fill property and its other values?",
                "description": "<p><span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">object-fit</span> is the property which handles the picture based on the available width and height.</p><p>Using <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">fill</span> value the aspect ratio (Width:Height) will be maintained and image will not appear distorted or squeezed, it will resized so that the longest of either the height or width can fit in the given dimensions.<br><br>Other values are <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">cover, none, scale-down</span>.</p>"
            },
            {
                "name": "How to draw a triangle using CSS?",
                "description": "<p><strong>&lt;!-- HTML Code --&gt; <br> &lt;div class=\"triangle\"&gt;&lt;/div&gt; <br> /* CSS Code */ <br> .triangle { <br> &nbsp; &nbsp; height: 0; <br> &nbsp; &nbsp; width: 0; <br> &nbsp; &nbsp; border-top: 100px solid transparent; <br> &nbsp; &nbsp; border-bottom: 100px solid transparent; <br> &nbsp; &nbsp; border-right: 100px solid red; <br> }</strong></p>"
            },
            {
                "name": "Write the style to display inner div in center for the below HTML code?",
                "description": "<ul><li><strong>Using Position</strong><p><img src='./assets/css/usingposition.png'></p></li><li><strong>Using Flex</strong><p><img src='./assets/css/flex1.png'></p></li></ul>"
            },
            
            {
                "name": "Mobile first strategy?",
                "description": "<p>It means that we should default and define all the styles for mobile devices, and only add specific responsive rules to other devices later.</p><p>A mobile-first strategy has 2 main advantages:</p><ul><li>It's more performant on mobile devices, since all the rules applied for them don't have to be validated against any media queries.</li><li>It forces to write cleaner code in respect to responsive CSS rules.</li></ul>"
            },
            {
                "name": "Explain the rule set in CSS?",
                "description": "<p>In CSS, rule sets are the complete composition of writing a style to an element. Which comprises of selector along with a pseudo-class or a pseudo-element, declaration block with style properties and values.</p><p><img src='./assets/css/ruleset.jpg'></p>"
            },
            {
                "name": "What are media queries in css",
                "description": "<p>The Media query in CSS is used to create a responsive web design. It means that the view of a web page differs from system to system based on screen or media types.</p><p><strong>Using media queries</strong><br>#1. Using HTML<br><img src='./assets/css/mediaquery.png'><br>#2. Using CSS<br><img src='./assets/css/mediaquery1.png'><br>#3. Using Javascript<br><img src='./assets/css/mediaquery2.png'></p>"
            },
            {
                "name": "Can you explain the difference between a screen and print media query?",
                "description": "<p>A screen media query is used to format a document for display on a screen, such as a computer monitor or a mobile phone. A print media query is used to format a document for printing.</p>"
            },
            {
                "name": "How do you define different styles for multiple devices using media queries?",
                "description": "<p>You can use media queries to target different styles to different devices. For example, you could use a media query to target mobile devices and give them a different style than you would give to desktop devices. To do this, you would first create a separate style sheet for each device. Then, you would use a media query in the head of your HTML document to target the appropriate style sheet to each device.</p>"
            },
            {
                "name": "What is the default size of an image in HTML5?",
                "description": "<p>The default size of an image in HTML5 is 16×16 pixels.</p>"
            },
            {
                "name": "What does min-width media query mean?",
                "description": "<p>A min-width media query is used to apply different styles to a document depending on the minimum width of the browser window. This is useful for responsive design, where you want to change the layout of a page depending on the size of the screen. For example, you might use a min-width media query to make a sidebar appear on a desktop browser, but not on a mobile browser.</p>"
            },
            {
                "name": "Why should we use media queries instead of JavaScript or CSS to adjust layouts",
                "description": "<p>There are several reasons why media queries are preferable to using JavaScript or CSS to adjust layouts. First, media queries are more efficient because they only download the CSS that is needed for the specific device or screen size. Second, media queries are more reliable because they are based on the actual device or screen size, rather than on estimates. Finally, media queries are easier to use because they are based on standard CSS syntax.</p>"
            },
            {
                "name": "What is the best way to add color to your website?",
                "description": "<p>The best way to add color to your website is to use a CSS file to style your HTML elements. You can use CSS to change the color of your text, background, and even images. You can also use CSS to create hover effects and other dynamic styling changes.</p>"
            },
            {
                "name": "What’s the advantage of using CSS over images to create buttons, borders, and gradients?",
                "description": "<p>There are several advantages to using CSS over images to create buttons, borders, and gradients. First, CSS is much more flexible than images, so it can be easily adapted to different screen sizes and resolutions. Second, CSS is much faster to load than images, so it can help improve page load times. Finally, CSS is much easier to maintain than images, so it can save you time and effort in the long run.</p>"
            },
            {
                "name": "Is it possible to display text on top of an image? If yes, then how?",
                "description": "<p>Yes, it is possible to display text on top of an image using media queries. You can use the CSS property “position: absolute” to position the text on top of the image.</p>"
            },
            {
                "name": "What are some ways to optimize images for mobile apps?",
                "description": "<p>One way to optimize images for mobile apps is to use a technique called responsive image design. This involves creating images that can adapt to different screen sizes and resolutions. Another way to optimize images for mobile apps is to use a technique called compression. This involves reducing the file size of an image without reducing its quality.</p>"
            },
            {
                "name": "Can you give me some examples of real-world web applications that use media queries?",
                "description": "<p>Many responsive web design frameworks use media queries to target different screen sizes. Some popular examples include Bootstrap and Foundation. Additionally, many individual websites use media queries to optimize their site for different devices.</p>"
            },
            {
                "name": "What are some of the most popular frameworks used to build responsive websites",
                "description": "<p>Some of the most popular frameworks used to build responsive websites are Foundation, Bootstrap, and Skeleton.</p>"
            },
            {
                "name": "What is the importance of viewport meta tag when using media queries?",
                "description": "<p>The viewport meta tag is used to control the width and scaling of a webpage on different devices. When using media queries, it is important to set the viewport meta tag so that the media query will be applied correctly. Without the viewport meta tag, media queries may not work as intended.</p>"
            },
            {
                "name": "Which one would you prefer – device width or device height?",
                "description": "<p>There is no right or wrong answer to this question, as it depends on the specific needs of the project. If the content is more important than the layout, then device width might be the better option. However, if the layout is more important than the content, then device height might be the better option. Ultimately, it is up to the designer to decide which one is more important in each individual case.</p>"
            },
            {
                "name": "What are responsive design patterns?",
                "description": "<p>Responsive design patterns are layouts that respond to the size of the screen they are being viewed on. This means that the same content can be rearranged and displayed differently depending on whether it is being viewed on a phone, tablet, or desktop computer. Some common responsive design patterns include the column drop, layout shifter, and off-canvas menu.</p>"
            },
            {
                "name": "Can you explain the difference between fixed layout and fluid layout?",
                "description": "<p>A fixed layout has a set width and height, and will not resize no matter what screen size it is viewed on. A fluid layout, on the other hand, will resize itself to fit the width of the screen it is being viewed on. This makes fluid layouts more responsive to different screen sizes.</p>"
            },
            {
                "name": "What are the main challenges involved in creating a responsive web application",
                "description": "<p>The main challenges involved in creating a responsive web application are ensuring that the application can adapt to different screen sizes and resolutions, and that the user interface is easy to use on a variety of devices. Another challenge is optimizing the application for performance on mobile devices, which often have slower internet connections than desktop computers.</p>"
            },
            {
                "name": "Can you provide any tips or tricks to improve performance while using media queries?",
                "description": "<p>One potential issue with using media queries is that they can sometimes be slow to load. This can be improved by using media query conditions that are as specific as possible. For example, rather than using a media query that targets all devices with a screen width of 768px or less, it would be more specific to use a media query that only targets devices with a screen width of 480px or less. This can help improve performance by reducing the number of devices that need to be checked when the media query is executed.</p>"
            },
            {
                "name": "When is it okay to use inline styles? Do they have any benefits over external stylesheets?",
                "description": "<p>In general, it is best to avoid inline styles whenever possible. External stylesheets are much easier to maintain and update, and they can be applied to multiple pages at once. However, there are some situations where inline styles may be unavoidable or even preferable. For example, if you need to override a style on a specific element, or if you want to ensure that a style is applied immediately without requiring a page refresh, then inline styles may be your best option.</p>"
            },
            {
                "name": "What are some common mistakes that developers make while writing media queries",
                "description": "<p>One common mistake is not using the correct units when declaring media query breakpoints. Another is not using media queries at all, which can lead to a website that doesn’t look good on mobile devices. Finally, not testing media queries on different devices can also lead to problems.</p>"
            },
            {
                "name": "What screen resolutions do you use while taking screenshots?",
                "description": "<p>Smartphone: 320px, Tablet: 768px, Netbook: 1024px, Desktop: 1600px</p>"
            },
            {
                "name": "What is DOM (Document Object Model) and how is it linked to CSS?",
                "description": "<p>The <em>Document Object Model (DOM)</em> is a cross-platform and language-independent <em>application programming interface</em>that treats an HTML, XHTML, or XML document as a tree structure wherein each node is an object representing a part of the document. </p><p>With the Document Object Model, programmers can create and build documents, navigate their structure, and add, modify, or delete elements and content. The DOM specifies interfaces which may be used to manage XML or HTML documents. </p><p>When a browser displays a document, it must combine the document's content with its style information. The browser converts HTML and CSS into the DOM (Document Object Model). The DOM represents the document in the computer's memory. It combines the document's content with its style.</p>"
            },
            {
                "name": "Have you ever worked with retina graphics? If so, when and what techniques did you use?",
                "description": "<p><strong><code>Retina</code></strong> is just a marketing term to refer to high resolution screens with a pixel ratio bigger than 1. The key thing to know is that using a pixel ratio means these displays are emulating a lower resolution screen in order to show elements with the same size. Nowadays we consider all mobile devices <code>retina</code> defacto displays.</p><p>Browsers by default render DOM elements according to the device resolution, except for images.</p><p>In order to have crisp, good-looking graphics that make the best of retina displays we need to use high resolution images whenever possible. However using always the highest resolution images will have an impact on performance as more bytes will need to be sent over the wire.</p><p>To overcome this problem, we can use responsive images, as specified in HTML5. It requires making available different resolution files of the same image to the browser and let it decide which image is best, using the html attribute <code><strong>srcset</strong></code> and optionally <code><strong>sizes</strong></code>, for instance:<br><img src='./assets/css/retina.png'></p><p>It is important to note that browsers which don't support HTML5's srcset (i.e. IE11) will ignore it and use src instead. If we really need to support IE11 and we want to provide this feature for performance reasons, we can use a JavaScript polyfill, e.g. Picturefill (link in the references).</p><p>For icons, I would also opt to use SVGs and icon fonts where possible, as they render very crisply regardless of resolution.</p>"
            },
            {
                "name": "What does * { box-sizing: border-box; } do? What are its advantages?",
                "description": "<ul><li>By default, elements have <code>box-sizing: content-box</code> applied, and only the content size is being accounted for.</li><li><code>box-sizing: border-box</code> changes how the width and height of elements are being calculated, <code>border</code> and <code>padding</code> are also being included in the calculation.</li><li>The <code>height</code> of an element is now calculated by the content's height + vertical <code>padding</code> + vertical <code>border</code> width.</li><li>The <code>width</code> of an element is now calculated by the content's width + horizontal padding</code> + horizontal <code>border</code> width.</li></ul><br><img src='./assets/css/boxsizing.png'><br><strong>Result</strong><br><img src='./assets/css/boxsizing1.png'>"
            },
            {
                "name": "Explain the purpose of clearing floats in CSS",
                "description": "<p>The <code>clear</code> CSS property specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them.</p><p><em>Clearing floats</em> (or clearfixing) basically forces the containing element to expand to contain its child elements. It thus forces the subsequent elements to appear below it.</p>"
            },
            {
                "name": "Difference between coding a website to be responsive versus using a mobile-first strategy?",
                "description": "<p>Note that these two 2 approaches are not exclusive.</p><p>Making a website responsive means the some elements will respond by adapting its size or other functionality according to the device's screen size, typically the viewport width, through CSS media queries, for example, making the font size smaller on smaller devices.<br><img src='./assets/css/mediaquery3.png'></p><p>A mobile-first strategy is also responsive, however it agrees we should default and define all the styles for mobile devices, and only add specific responsive rules to other devices later. Following the previous example:<br><img src='./assets/css/mediaquery4.png'></p><p>A mobile-first strategy has 2 main advantages:</p><ul><li>It's more performant on mobile devices, since all the rules applied for them don't have to be validated against any media queries.</li><li>It forces to write cleaner code in respect to responsive CSS rules.</li></ul>"
            },
            {
                "name": "Is there any reason you'd want to use translate() instead of absolute positioning, or vice-versa? And why?",
                "description": "<p><code>translate()</code> is a value of CSS <code>transform</code>. Changing <code>transform</code> or <code>opacity</code> does not trigger browser reflow or repaint but does trigger compositions; whereas changing the absolute positioning triggers <code>reflow</code>. <code>transform</code> causes the browser to create a GPU layer for the element but changing absolute positioning properties uses the CPU. Hence <code>translate()</code> is more efficient and will result in shorter paint times for smoother animations.</p><p>When using <code>translate()</code>, the element still occupies its original space (sort of like <code>position: relative</code>), unlike in changing the absolute positioning.</p>"
            },
            {
                "name": "Write down a selector that will match any links end in .zip, .ZIP, .Zip etc...",
                "description": "<p>Use <em>case-insensitive attribute matching</em>, <code>i</code>. This is a new feature in CSS Selectors Level 4.<br><img src='./assets/css/zip.png'></p>"
            },
            {
                "name": "What are common breakpoints?",
                "description": "<p>With a lot of CSS screen sizes in the market, there are no fixed breakpoints present that can be used on all devices. Therefore, it cant be said that there is a standard resolution.</p><ul><li><strong>For Mobile Devices</strong> – 320px — 480px</li><li><strong>iPads Portraits and Tablets</strong> – 481px — 768px</li><li><strong>Laptops and Ipad lanscape</strong> – 769px — 1024px</li><li><strong>Large screens and Desktops</strong> – 1025px — 1200px</li><li><strong>TV and Extra Large Screens</strong> – 1201px and more</li></ul>"
            },
            {
                "name": "What are the first approach or tips to develop responsive website",
                "description": "<ul><li><strong>Move from pixels and inches towards grids</strong> - Previously, websites were based on pixel measurements. Now, however, they are built on what is called a fluid grid. Basically, a fluid grid positions and sets web elements on a site in proportion to the screen size it is displayed on. Instead of making things in a single, specific size set in pixels, elements on a fluid grid will respond and resize to fit the size of the screen.</li><li><strong>Make use of media queries and breakpoints</strong> - With CSS breakpoints in place, the website content will align itself with screen size and displays itself in a way that pleases the eye and facilitates visual consumption.</li><li><strong>Define Typography</strong> - Previously the font-size were in pixels so for responsive design we should adapt respon font sizing. Here, Font size must change with respect to parent container width. This can be done by using rems unit instead of em. It is similar to the em unit but acts relative to the HTML element.</li><li><strong>Always use a viewport</strong> - The viewport meta tag is used to control the width and scaling of a webpage on different devices. When using media queries, it is important to set the viewport meta tag so that the media query will be applied correctly. Without the viewport meta tag, media queries may not work as intended.</li><li><strong>Test Responsiveness on Real Devices</strong></li><li><strong>Optimize the media for mobile</strong></li></ul>"
            }
            
        ]
    },
    {
        "folder": "SCSS",
        "title": "SCSS",
        "url": "/folder/SCSS",
        "icon": "logo-css3",
        "question": [
            {
                "name": "What is Sass?",
                "description": "<p>Sass or Syntactically Awesome StyleSheets is a CSS preprocessor which is a scripting language that extends CSS by allowing developers to write code in one language and then compile it into CSS.</p><p>It allows you to use variables, nested rules, mixins, inline imports, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized, and get small stylesheets up and running quickly.</p>"
            },
            {
                "name": "List out the key features for SCSS/SASS?",
                "description": "<ul><li>Full CSS3-compatible</li><li>Language extensions such as nesting, variables, and mixins</li><li>Many useful functions for manipulating colors and other values</li><li>Advanced features like control directives for libraries</li><li>Well-formatted, customizable output</li></ul>"
            },
            {
                "name": "List out the data types that Sass supports?",
                "description": "<ul><li>Numbers ( eg; 1,5 ,10px)</li><li>Strings of texts ( g., “foo”, ‘bar’, etc.)</li><li>Colors (blue, #04a3f9)</li><li>Booleans (true or false)</li><li>Nulls (e.g; null)</li><li>List of values, separated by space or commas (g., 1.5em, Arial, Helvetica etc.)</li><li>Maps from one value to another (g., ( key 1: value1, key 2: Value 2))</li></ul>"
            },
            {
                "name": "Explain Difference between Sass and Scss?",
                "description": "<ul><li>Sass is a CSS pre-processor with syntax advancements and an extension of CSS3</li><li>Sass has two syntax</li><li>The first syntax is “SCSS” and it uses the .scss extension</li><li>The other syntax is indented syntax or just “Sass” and it uses the .sass extension</li><li>While Sass has loose syntax with white space and no semicolons, the SCSS resembles more to CSS</li></ul>"
            },
            {
                "name": "@extend / inheritance in Sass?",
                "description": "<p>In Sass, the @EXTEND directive provides a simple way to allow a selector to inherit the styles of another one. It aims at providing a way for styles in  <strong>selector A</strong> to extend the styles from a <strong>selector B</strong>. When doing so, the <strong>selector A</strong> will be added to <strong>selector B</strong> so they both share the same declarations. @EXTEND prevents code bloat by grouping selectors that share the same style into one rule.<br><img src='./assets/css/extend.png'></p><p>CSS output:<br><img src='./assets/css/extend1.png'></p>"
            },
            {
                "name": "Mixins in Sass?",
                "description": "<p>A mixin lets you make groups of CSS declarations that you want to reuse throughout your site. A good use of a mixins is for vendor prefixes. Ex. Background-gradients, box-shadows, text-shadow, border-radius, animations, transform, transitions etc</p>"
            },
            {
                "name": "Map in Sass?",
                "description": "<p>Sass map is a structured data in a hierarchical way and not just a bunch of variables.<br><img src='./assets/css/sass-map.png'></p>"
            },
            {
                "name": "What are the advantages/disadvantages of using CSS preprocessors?",
                "description": "<p><strong>Advantages:</strong></p><ul><li>CSS is made more maintainable.</li><li>Easy to write nested selectors.</li><li>Variables for consistent theming. Can share theme files across different projects.</li><li>Mixins to generate repeated CSS.</li><li>Splitting your code into multiple files. CSS files can be split up too but doing so will require a HTTP request to download each CSS file.</li></ul><p><strong>Disadvantages:</strong></p><ul><li>Requires tools for preprocessing. Re-compilation time can be slow.</li></ul>"
            },
            {
                "name": "SCSS basic features - Variables",
                "description": "<p>Variables are useful for things like colors, fonts, font sizes, and certain dimensions, as you can be sure always using the same ones. Variables in SCSS start with $ sign<br><img src='./assets/css/variable.png'></p>"
            },
            {
                "name": "SCSS basic features - Nesting",
                "description": "<p>Basic nesting refers to the ability to have a declaration inside of a declaration.<br><img src='./assets/css/nesting.png'><br><img src='./assets/css/nesting1.png'></p>"
            },
            {
                "name": "SCSS basic features - Partials",
                "description": "<p>The partial Sass files contain little snippets of CSS that can be included in other Sass files. This is a great way to modularize your CSS and help keep things easier to maintain. A partial is a Sass file named with a leading underscore. You might name it something like <code>_partial.scss</code>. The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file. Sass partials are used with the <code>@use</code> rule.</p>"
            },
            {
                "name": "SCSS basic features - Modules",
                "description": "<p>This rule loads another Sass file as a module, which means we can refer to its variables, mixins, and functions in our Sass file with a namespace based on the filename. Using a file will also include the CSS it generates in your compiled output!<br><img src='./assets/css/modules.png'><br><img src='./assets/css/modules1.png'></p>"
            },
            {
                "name": "SCSS basic features - Mixins",
                "description": "<p>A mixin provide to make groups of CSS declarations that you want to reuse throughout your site. You can even pass in values to make your mixin more flexible.<br><img src='./assets/css/mixins.png'></p>"
            },
            {
                "name": "SCSS basic features - Inheritance",
                "description": "<p>Using <code>@extend</code> lets you share a set of CSS properties from one selector to another.<br><img src='./assets/css/inheritence.png'><br><img src='./assets/css/inheritence1.png'></p>"
            },
            {
                "name": "SCSS basic features - Operators",
                "description": "<p>Sass has a handful of standard math operators like <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, and <code>%</code>. In our example we're going to do some simple math to calculate widths for an aside &amp; article.<br><img src='./assets/css/operators.png'><br><img src='./assets/css/operators1.png'></p>"
            },
            {
                "name": "What is file splitting and why should you use it?",
                "description": "<p>File splitting helps organize your CSS into multiple files, decreasing page load time and making things easier to manage. How you decide to split them up is up to you, but it can be useful to separate files by component. For example, we can have all button styles in a file called <code>_buttons.scss</code> or all your header-specific styles in a file called <code>_header.scss</code>, main file, say _app.scss, and we can import those files by writing @import 'buttons';</p>"
            },
            {
                "name": "Explain what Sass Maps is and what is the use of Sass Maps?",
                "description": "<p>Sass map is a structured data in a hierarchical way and not just a bunch of variables. It can help in organizing the code. Some great use of Sass are</p><ul><li>It is very useful when dealing with layers of elements in your project</li><li>It can be helpful in color management when there is long list of different color and shade</li><li>Use icon map for various social media icons for example: facebook: ‘\\e607’ or twitter: ‘\\e602’</li><li>Unlike other programming libraries, Sass map will consist only of code that is going to be used</li></ul>"
            },
            {
                "name": "Explain when can you use the %placeholders in Sass?",
                "description": "<p>%placeholders in Sass is useful when you want to write styles that were meant to be extended, but you don’t want the base styles to be seen in output CSS styles</p><p>In Short, %placeholder are classes that aren’t output when your SCSS is compiled</p>"
            },
            {
                "name": "Explain what is the use of &combinator ",
                "description": "<p>&amp;combinator concatenates nested selector with the parent selector. It is useful for Pseudo classes such as :hover and :focus</p>"
            },
            {
                "name": "Explain the use of Sass @import function?",
                "description": "<ul><li>It facilitates you to extend the CSS import rule. To do this you need to enable import of Sass and SCSS files.</li><li>It can merge the all the imported files into a single outputted CSS file.</li><li>It is used to virtually match and mix any file.</li><li>It needs a filename to import function.</li><li>It provides document style presentation better than flat CSS.</li><li>It facilitates you to keep your responsive design project more organized.</li></ul>"
            },
            {
                "name": "What is the way to write a placeholder selector in Sass?",
                "description": "<p>In Sass, the placeholder selectors can be used with class or id selector. In standard CSS, these are specified with \"#\" or \".\", but in SASS they are replaced with \"%\". It uses @extend directive to display the result in CSS. For example:<br><img src='./assets/css/placeholder.png'></p>"
            },
            {
                "name": "What is the use of at-root directive in SASS?",
                "description": "The Sass @at-root directive is a collection of nested rules that are used to style block at the root of the document. For example:-"
            },
            {
                "name": "What are Sass cons and pros?",
                "description": "<p><strong>Pros</strong>:</p><ul><li>Sass is easy to learn especially for them who has a background of Python, Ruby or Coffescript and place using functions, writing mixins</li><li>CSS can be easily converted to Sass</li><li>Throughout the project, you don’t have to repeat similar CSS statements using @extend attribute</li><li>It allows to define variables that are usable throughout the entire project</li><li>It keeps your responsive project more organized</li></ul><p><strong>Cons</strong>:</p><ul><li>Requires time to learn new features of preprocessor before using</li><li>You may not be able to use the built-in element inspector feature of the browser</li><li>Troubleshooting can be difficult</li></ul>"
            },
            {
                "name": "How can you refer a parent selector in the SASS?",
                "description": "<p>We can easily select the parent selector by using the &amp; character. It specifies where we should insert the parent selector.</p>"
            },
            {
                "name": "Which directive is used to detect the errors in SASS?",
                "description": "<p>Sass @debug directive is used to detect the errors and display the Sass Script expressions values to the standard error output stream. For example:<br><img src='./assets/css/debug.png'></p>"
            },
            {
                "name": "What is the meaning of DRY-ing out a mixin?",
                "description": "<p><strong>DRY-ing</strong> out a mixin means splitting it into <strong>static</strong> and <strong>dynamic</strong> parts. The dynamic mixin is the one the user is going to call, and the static mixin is only going to contain the pieces that would otherwise get duplicated.<br><img src='./assets/css/mixins.png'></p>"
            },
            {
                "name": "How many output styles are there in Sass?",
                "description": "<p>By default, Sass outputs the CSS in a nested style, which is a style that reflects the document structure. Sass allows to choose between four styles: nested, expanded, compact, and compressed.</p><br><p><strong>:nested</strong> - Nested style is the default Sass style because it reflects the structure of the CSS styles in which each property has its own line, but the indentation is based on how deeply it's nested.</p><strong>sass --watch style.scss:style.css --style nested</strong><br><img src='./assets/css/nested.png'><p><strong>:expanded</strong> - In expanded style properties are indented within the rules, but the rules aren't indendented in any special way like in :nested output style.</p><strong>sass --watch style.scss:style.css --style expanded</strong><br><img src='./assets/css/expanded.png'><p><strong>:compact</strong> - In compact style each rule takes up only one line with every property defined on that line. It takes up less space than :nested and :expanded.</p><strong>sass --watch style.scss:style.css --style  compact</strong><br><img src='./assets/css/compact.png'><p><strong>:compressed</strong> - Compressed styles takes up the minimum amount of space possible. There is no whitespace except space that is necessary to separate selectors and the newline on the end of the document.</p><strong>sass --watch style.scss:style.css --style compressed</strong><br><img src='./assets/css/compressed.png'>"
            }
        ]
    },
    {
        "folder": "JQuery",
        "title": "JQuery",
        "url": "/folder/JQuery",
        "icon": "logo-javascript",
        "question": [
            {
                "name": "What is jQuery?",
                "description": "<p>jQuery is a client side JavaScript framework which helps in to traverse HTML DOM, make animations, add Ajax interaction, manipulate the page content, change the style and provide cool UI effect. It is one of the most popular client side library and as per a survey it runs on every second website.</p><p>Basic syntax is: <code>$(selector).action()</code></p>"
            },
            {
                "name": "Why do we use jQuery?",
                "description": "<ul><li>Easy to use and learn.</li><li>Cross-browser support</li><li>Easy to use for DOM manipulation</li><li>AJAX Capabilities.</li><li>Methods for changing or applying CSS, creating animations.</li><li>Event detection and handling.</li></ul>"
            },
            {
                "name": "Which is the starting point of code execution in jQuery?",
                "description": "<p>The starting point of jQuery code execution is <code>$(document).ready()</code> function which is executed when DOM is loaded.</p>"
            },
            {
                "name": "What does dollar sign ($) means in jQuery?",
                "description": "<p>Dollar Sign is nothing but it's an alias for JQuery. Take a look at below jQuery code.</p>"
            },
            {
                "name": "What is a CDN?",
                "description": "<p>A content delivery network (CDN) is a large network of servers deployed in multiple data centers across the Internet. The goal of a CDN is to serve content to end-users with high availability and high performance.</p><p>Advantages of using CDN:</p><ul><li>It reduces the load from your server.</li><li>It saves bandwidth. jQuery framework will load faster from these CDN.</li><li>The most important benefit is it will be cached, if the user has visited any site which is using jQuery framework from any of these CDN</li></ul><p>There are 3 popular jQuery CDNs i.e. - Google, Microsoft, jQuery.</p>"
            },
            {
                "name": "Difference between document.ready() and body onload() functions?",
                "description": "<p><code>$(document).ready()</code> will trigger a browser specific method as soon as HTML document is loaded[all the elements are loaded] and is accessible. This point is the safest point to bind all the functions/callbacks to DOM elements without breaking, since all DOM elements on HTML are available. It does not wait for associated resources (images) to load.</p><p><code>body.onload()</code> event will be called after all the related resources and images are completely loaded. Using onload() for animation binding or other bindings will cause significant performance delay in case the page contains large images or is being used in a slow connection where loading of images might take time.</p>"
            },
            {
                "name": "Which is the fastest and slowest selector in jQuery?",
                "description": "<p>ID and Element selector are the fastest selectors in jQuery. and Class selectors are the slowest selectors in jQuery.</p>"
            },
            {
                "name": "Difference between $(this) and this in jquery?",
                "description": "<p>this is the DOM object, whereas $(this) is the jQuery wrapper around same.<br>When using this, you can call DOM methods on it, but not jQuery methods. When using $(this), you can call jQuery methods on it, but not DOM methods</p>"
            },
            {
                "name": "jQuery Event Methods?",
                "description": "<p><code>blur(), change(), click(), hover(), keydown(), keypress(), keyup()</code></p>"
            },
            {
                "name": "jQuery Effect Methods?",
                "description": "<p><code>animate(), fadeIn(), fadeOut(), fadeTo(), fadeToggle(), hide(), show(), toggle(), slideDown(), slideUp(), slideToggle()</code></p>"
            },
            {
                "name": "jQuery HTML / CSS Methods?",
                "description": "<p><code>addClass(), removeClass(), toggleClass(), hasClass(), attr(), removeAttr(), append(), prepend()</code></p>"
            },
            {
                "name": "jQuery Ajax Method?",
                "description": "<p><img src='./assets/jquery/ajax-jquery.png'><br><img src='./assets/jquery/ajax-get-jquery.png'><br><img src='./assets/jquery/ajax-getJson-jquery.png'></p>"
            }
        ]
    },
    {
        "folder": "Micro Frontend",
        "title": "Micro Frontend",
        "url": "/folder/Micro Frontend",
        "icon": "apps-outline",
        "question": [
            {
                "name": "What are micro frontends?",
                "description": "<p>Micro frontends are a way of breaking up a too large frontend application into smaller, more manageable pieces. This approach can make development and maintenance more efficient, and allow for greater flexibility in how different parts of the application are implemented.</p><p><img src='./assets/microfrontend/microfrontend.png'></p><p>Say for example we have 6 frontend apps working together to deliver the large application. The communication between these apps can be done with an event bus, window object, or publish/subscribe methods. Each app can be implemented by a separate team and any framework. Each app can talk to their backends or endpoints individually. There is a bootstrap/launch app that loads all the apps and mounts and unmounts in the DOM depending on the user interaction or routing.</p>"
            },
            {
                "name": "What are the different types of micro frontends?",
                "description": "<p>There are two types of micro frontends: those that use iframes and those that use web components. Iframes are the more traditional approach and involve embedding a small piece of HTML code inside of another HTML document. Web components are a newer approach that allows for more flexibility and interactivity between the different micro frontends.</p>"
            },
            {
                "name": "What are some advantages and disadvantages of using micro frontends?",
                "description": "<p>Some advantages of using micro frontends include the ability to break up a large frontend application into smaller, more manageable pieces, Apps are easier to test as with each app there has few unit tests and executes its own unit tests and can be run independently, as well as the ability to allow different teams to work on different parts of the frontend independently. Additionally, micro frontends can improve the overall performance of a frontend application by loading only the necessary code for each page. Each app can be integrated and deployed separately and this makes the CI/CD process a lot easier. When we fix the app or introduce a new feature we don't have to worry about the entire application since all the features are independent.</p><p>Some advantages of using micro frontends include the ability to break up a large frontend application into smaller, more manageable pieces, as well as the ability to allow different teams to work on different parts of the frontend independently. Additionally, micro frontends can improve the overall performance of a frontend application by loading only the necessary code for each page.</p>"
            },
            {
                "name": "How Do We Split Apps in Micro front end",
                "description": "<p><strong>By Feature</strong> - This is the most common method since we can easily divide the features of the app. For example, if there are three features for the app Dashboard, Profile and views we can make each feature as a separate app and mounts and unmounts in the DOM with the help of Launch.js. This Launch.js can be a separate app or just a simple javascript app.</p><p><img src='./assets/microfrontend/byFeature.png'></p><p><strong>By Section</strong> - Some of the apps have so much functionality with each section. We can implement each section as a new app in that scenario.</p><p><img src='./assets/microfrontend/bySection.png'></p><p><strong>By Page</strong> - Some app's functionalities are divided by page. Each page has some functionality that can be independent. We can divide these apps by page We have four pages in the below diagram. we can make four apps out of this.</p><p><img src='./assets/microfrontend/byPage.png'></p><p><strong>By Domain</strong> - Splitting app based on the domain is also one of the most common approaches.</p><p><img src='./assets/microfrontend/byDomain.png'></p>"
            },
            {
                "name": "What are some best practices when developing micro frontend apps?",
                "description": "<p>Some best practices when developing micro frontend apps include:</p><p>– Keep the UI simple and consistent across all micro frontend apps<br>– Make sure each micro frontend app is self-contained and can be deployed independently<br>– Avoid tight coupling between micro frontend apps<br>– Use a shared library for common code that is shared between micro frontend apps</p>"
            },
            {
                "name": "If I asked you to develop a new micro frontend app from scratch, how would you go about doing so?",
                "description": "<p>There are a few different ways to go about developing a micro frontend app from scratch. One approach would be to use a framework like React or Angular to build out the individual components that make up the app. Another approach would be to use a tool like Webpack to bundle together the different components into a single file that can be loaded by the browser. Whichever approach you choose, the goal is to keep the individual components small and self-contained so that they can be easily reused in other micro frontend apps.</p>"
            },
            {
                "name": "How Do You Define Microservices?",
                "description": "<p>Microservice Architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain.</p>"
            },
            {
                "name": "List down the advantages of Microservices Architecture?",
                "description": "<ul><li><strong>Independent Development.</strong> All microservices can be easily developed based on their individual functionality</li><li><strong>Independent Deployment.</strong> Based on their services, they can be individually deployed in any application</li><li><strong>Fault Isolation.</strong> Even if one service of the application does not work, the system still continues to function</li><li><strong>Mixed Technology Stack.</strong> Different languages and technologies can be used to build different services of the same application</li><li><strong>Granular Scaling.</strong> Individual components can scale as per need, there is no need to scale all components together</li></ul>"
            },
            {
                "name": "Explain the importance/need of reports and dashboards in microservices",
                "description": "<p>They require heavy investment Microservices demand a great deal of collaboration. Since your teams are working independently, they should be able to synchronize well at all times.</p><p>They need heavy architecture set up – The system is distributed, the architecture is heavily involved.</p><p>They need excessive planning for handling operations overhead – You need to be ready for operations overhead if you are planning to use a microservices architecture.</p><p>They have autonomous staff selection – Skilled professionals are needed who can support microservices that are distributed heterogeneously.</p>"
            },
            {
                "name": "Explain the term Spring Boot-Eureka in Microservices.",
                "description": "<p>Eureka is a term used to describe an application that holds information about the client. It is part of the Spring Cloud bundle. In order to do this, it is necessary to develop the Eureka server and to run it on port 8761 by default.</p>"
            },
            {
                "name": "What do you mean by end-to-end microservices testing?",
                "description": "<p>End-to-end microservice testing is used to ensure the flow of an application through a business transaction. This testing is an uncoordinated and high-cost technique that is done through the user interface.</p>"
            },
            {
                "name": "Explain continuous monitoring.",
                "description": "<p>Continuous monitoring is the technology that is used to identify risk issues and compliance in a company's operational overhead and financial environment. To support efficient and effective operations, it consists of processes, a working system, and people.</p>"
            },
            {
                "name": "What do you mean by Semantic/Synthetic Monitoring?",
                "description": "<p>Semantic Monitoring or Synthetic Monitoring is basically automated testing and application that helps in monitoring errors in business processes. This technology helps to capture errors in transactions, identify performance issues of microservices, and provide an in-depth look at transaction performance.</p>"
            },
            {
                "name": "What do you mean by client certificates?",
                "description": "<p>The client certificate plays an important role in securely authenticating their requests to remote services. This is a type of digital certificate that allows client systems to authenticate requests.</p>"
            },
            {
                "name": "List three common tools used to develop microservices",
                "description": "<ul><li>Hystrix</li><li>Docker </li><li>Wiremock </li></ul>"
            },
            {
                "name": "What do you mean by Cohesion and Coupling?",
                "description": "<p>Both Cohesion and Coupling happen simultaneously where high cohesion describes the relationship between two or more elements of a particular module. On the other hand, Coupling describes the relationship between two or more modules.</p>"
            },
            {
                "name": "What is the use of containers in Microservices?",
                "description": "<p>Container in microservices is like an operating system in which all the codes, layout files, & libraries are run. It is comparatively light in weight. In other words, it consists of a collection of resources and applications to accomplish a specific task.</p><p>There are multiple use cases of the container in microservices such as it provides adequate support to the service oriented architecture and also provides more straightforward deployment of repetitive tasks.</p>"
            },
            {
                "name": "To what extent does Docker play a role in microservices?",
                "description": "<p>The arrival of the docker technology when any developer develops any software in their computer environment, it worked fine but when it comes to production, its shows error because of the difference in a computing environment. This is similar in Microservices also. Docker solves this problem, In this case, In a container, there are multiple docker containers that are responsible for running each microservices. The memory or disk space for a docker container does not need to be allocated beforehand.</p>"
            },
            {
                "name": "How would you implement SSO for Microservice Architecture?",
                "description": "<p>Add identity service and authorize service access through it using tokens. Any service that has protected resources will talk to the Identity service to make sure the credentials (token) it has are valid. If they are not it will redirect the user for authentication. Once the token had been validated then it could be saved in the session so subsequent calls in the user's session did not have to make the additional call. You can also create a scheduled job if tokens need to be refreshed in that session.</p><p>A good way to resolve it is by using the OAuth 2 protocol. In this situation you could authenticate with an OAuth 2.0 endpoint and the token will be added to the HTTP header for calls to your domain. All of the services shall be routed from that domain so you could get the token from the HTTP header.</p><p><img src='./assets/microfrontend/zNbPk.jpg'></p>"
            },
            {
                "name": "What types of microservices tests are used most often?",
                "description": "<p>In computer science, the testing of microservices is relatively complicated. So basically, tests are categorized into 3 categories like bottom level, middle level, and top level test.</p><ul><li>We can consider the bottom level test is dedicated to technology that is a completely automated test.</li><li>Then, a mid-level test deals with the exploratory test that can figure out some stress and usability test.</li><li>Lastly, the top-level test is the acceptance test. Acknowledging the software's capabilities is the purpose of the acceptance tests.</li></ul>"
            },
            {
                "name": "Explain Idempotence?",
                "description": "<p>The idea of idempotency is that a request can be repeated endlessly without having side effects on the backend. It is a very common problem in computer science and especially in microservices architecture.</p>"
            }
        ]
    },
    {
        "folder": "Agile & Scrum",
        "title": "Agile & Scrum",
        "url": "/folder/Agile & Scrum",
        "icon": "analytics-outline",
        "question": [
            {
                "name": "What is Sprint in Scrum?",
                "description": "<p>In the Scrum methodology a <strong>Sprint</strong> is the <strong>basic unit of development</strong>. Scrum sprints correspond to Agile iterations. </p><p>Each Sprint starts with <p><ul><li>a <strong>planning meeting</strong>, where the tasks for the sprint are identified and an estimated commitment for the<strong>sprint goal</strong> is made.</li></ul><p>A Sprint ends with</p><ul><li>a <strong>review or retrospective meeting</strong> where the progress is reviewed and lessons for the next sprint are identified. During each sprint, the team creates finished portions of a product.</li></ul>"
            },
            {
                "name": "What is an Agile iteration?",
                "description": "<p>An <strong>Agile iteration</strong> is a short one to two week period where a team takes most important user stories, builds them completely and deliver as running-tested-software to the customer. Analysis, design, coding, testing happen during an iteration.</p>"
            },
            {
                "name": "Name roles in Scrum",
                "description": "<p>Three essential roles for scrum success are:</p><ul><li><strong>The Product Owner</strong> are the champions for their product. They are focused on understanding business and market requirements, then prioritizing the work to be done by the engineering team accordingly.</li><li><strong>The Scrum Master</strong> are the champion for scrum within their team. They coach the team, the product owner, and the business on the scrum process and look for ways to fine-tune their practice of it.</li><li><strong>The Scrum Team</strong> are the champions for sustainable development practices. Scrum teams are cross-functional, 'the development team' includes testers, designers, and ops engineers in addition to developers.</li></ul>"
            },
            {
                "name": "What is an Epic, User Stories and Task? ",
                "description": "<ul><li><strong>Epic:</strong> A customer described software feature that is itemized in the product backlog is known as epic. Epics are sub-divided into stories.</li><li><strong>User Stories:</strong> From the client perspective user stories define project or business functions, and delivered in a particular sprint.</li><li><strong>Task:</strong> Further down user stories are broken down into different tasks.</li></ul>"
            },
            {
                "name": "What is the Scrum's definition of Done? ",
                "description": "<p>When a Product Backlog item or an set of items is <strong>completed</strong> and that <strong>understanding is shared</strong> all across the Scrum Team the item is considered as <strong>Done</strong>.</p><p>The purpose of each Sprint <strong>is to deliver Increments</strong> of potentially releasable functionality that adhere to the Scrum Team's current definition of <strong>Done</strong>.</p>"
            },
            {
                "name": "Explain what is Spike and Zero Sprint in Agile? What is the purpose of it?",
                "description": "<p><strong>Sprint Zero:</strong> It is introduced to perform some research before initiating the first sprint. Usually this sprint is used during the start of the project for activities like setting development environment, preparing product backlog and so on.</p><p><strong>Spikes:</strong> Spikes are type of stories that are used for activities like research, exploration, design and even prototyping. In between sprints, you can take spikes for the work related to any technical or design issue. Spikes are of two types: <strong>#Technical Spikes</strong> and <strong>Functional Spikes.</strong></p>"
            },
            {
                "name": "Explain what is Refactoring?",
                "description": "<p>To <strong>improve the performance or readability</strong>, the existing code is modified; this is re-factoring.</p><p>During re-factoring the <strong>code functionality remains same</strong>.</p>"
            },
            {
                "name": "What is Scrum?",
                "description": "<p><strong>Scrum</strong> is one of the most popular frameworks for implementing Agile. Many people think scrum and agile are the same thing but they're not. With scrum, the product is built in a series of fixed-length iterations called sprints that give teams a framework for shipping software on a regular cadence.</p>"
            }
        ]
    },
    {
        "folder": "Software Engineering",
        "title": "Software Engineering",
        "url": "/folder/Software Engineering",
        "icon": "laptop-outline",
        "question": [
            {
                "name": "Software Processes",
                "description": "<p>A software process is the set of activities and associated outcome that produce a software product. Software engineers mostly carry out these activities. These are four key process activities, which are common to all software processes. These activities are:</p><ol><li><strong>Software specifications:</strong> The functionality of the software and constraints on its operation must be defined.</li><li><strong>Software development:</strong> The software to meet the requirement must be produced.</li><li><strong>Software validation:</strong> The software must be validated to ensure that it does what the customer wants.</li><li><strong>Software evolution:</strong> The software must evolve to meet changing client needs.</li></ol>"
            },
            {
                "name": "Software Development Life Cycle / SDLC Cycle",
                "description": "<p><img src='./assets/se/sdlc.png'></p>"
            },
            {
                "name": "Stages of SDLC",
                "description": "<p><img src='./assets/se/sdlc.png'></p><ol><li><strong>Stage1: Planning and requirement analysis</strong> - Requirement Analysis is the most important and necessary stage in SDLC. The senior members of the team perform it with inputs from all the stakeholders and domain experts or SMEs in the industry. Planning for the quality assurance requirements and identifications of the risks associated with the projects is also done at this stage. Business analyst and Project organizer set up a meeting with the client to gather all the data like what the customer wants to build, who will be the end user, what is the objective of the product. </li><li><strong>Stage2: Defining Requirements</strong> - Once the requirement analysis is done, the next stage is to certainly represent and document the software requirements and get them accepted from the project stakeholders. This is accomplished through 'SRS'- Software Requirement Specification document which contains all the product requirements to be constructed and developed during the project life cycle.</li><li><strong>Stage3: Designing the Software</strong> - The next phase is about to bring down all the knowledge of requirements, analysis, and design of the software project. This phase is the product of the last two, like inputs from the customer and requirement gathering.</li><li><strong>Stage4: Developing the project</strong> - In this phase, the actual development begins, and the programming is built. The implementation of design begins concerning writing code. Developers have to follow the coding guidelines described by their management and programming tools like compilers, interpreters, debuggers, etc. are used to develop and implement the code.</li><li><strong>Stage5: Testing</strong> - After the code is generated, it is tested against the requirements to make sure that the products are solving the needs addressed and gathered during the requirements stage. During this stage, unit testing, integration testing, system testing, acceptance testing are done.</li><li><strong>Stage6: Deployment</strong> - Once the software is certified, and no bugs or errors are stated, then it is deployed. Then based on the assessment, the software may be released as it is or with suggested enhancement in the object segment. After the software is deployed, then its maintenance begins.</li><li><strong>Stage7: Maintenance</strong> - Once when the client starts using the developed systems, then the real issues come up and requirements to be solved from time to time. This procedure where the care is taken for the developed product is known as maintenance.</li></ol>"
            },
            {
                "name": "SDLC Models",
                "description": "<p><img src='./assets/se/sdlcModels.png'></p><p>Here, are some important phases of SDLC life cycle:</p><p><img src='./assets/se/sdlcModels.png'></p><ol><li><strong>Waterfall Model</strong> - In this method, the whole process of software development is divided into various phases. <br><br>The waterfall model is a continuous software development model in which development is seen as flowing steadily downwards (like a waterfall) through the steps of requirements analysis, design, implementation, testing (validation), integration, and maintenance.</li><li><strong>RAD Model</strong> - Rapid Application Development process is an adoption of the waterfall model; it targets developing software in a short period. The RAD model is based on the concept that a better system can be developed in lesser time by using focus groups to gather system requirements. #Business Modeling, #Data Modeling, #Process Modeling, #Application Generation, #Testing and Turnover</li><li><strong>Spiral Model</strong> - The spiral technique is a combination of rapid prototyping and concurrency in design and development activities. <br><br>Each cycle in the spiral begins with the identification of objectives for that cycle, the different alternatives that are possible for achieving the goals, and the constraints that exist. <br><br>The next step in the cycle is to evaluate these different alternatives based on the objectives and constraints. The focus of evaluation in this step is based on the risk perception for the project. <br><br>The next step is to develop strategies that solve uncertainties and risks. This step may involve activities such as benchmarking, simulation, and prototyping.</li><li><strong>V-Model</strong> - In this type of SDLC model testing and the development, the step is planned in parallel. So, there are verification phases on the side and the validation phase on the other side. V-Model joins by Coding phase.</li><li><strong>Incremental Model</strong> - It is necessarily a series of waterfall cycles. The requirements are divided into groups at the start of the project. For each group, the SDLC model is followed to develop software. The SDLC process is repeated, with each release adding more functionality until all requirements are met. In this method, each cycle act as the maintenance phase for the previous software release. Modification to the incremental model allows development cycles to overlap. After that subsequent cycle may begin before the previous cycle is complete.</li><li><strong>Agile Model</strong> - Agile methodology is a practice which promotes continues interaction of development and testing during the SDLC process of any project. In the Agile method, the entire project is divided into small incremental builds. All of these builds are provided in iterations, and each iteration lasts from one to three weeks. <br><br>Any agile software phase is characterized in a manner that addresses several key assumptions about the bulk of software projects: <br><br># It is difficult to think in advance which software requirements will persist and which will change. It is equally difficult to predict how user priorities will change as the project proceeds. <br><br># For many types of software, design and development are interleaved. That is, both activities should be performed in tandem so that design models are proven as they are created. It is difficult to think about how much design is necessary before construction is used to test the configuration. <br><br># Analysis, design, development, and testing are not as predictable (from a planning point of view) as we might like.</li><li><strong>Big bang model</strong> - Big bang model is focusing on all types of resources in software development and coding, with no or very little planning. The requirements are understood and implemented when they come. <br><br>This model works best for small projects with smaller size development team which are working together. It is also useful for academic software development projects. It is an ideal model where requirements are either unknown or final release date is not given.</li><li><strong>Prototype Model</strong> - The prototyping model starts with the requirements gathering. The developer and the user meet and define the purpose of the software, identify the needs, etc. <br><br>A <strong>'quick design'</strong> is then created. This design focuses on those aspects of the software that will be visible to the user. It then leads to the development of a prototype. The customer then checks the prototype, and any modifications or changes that are needed are made to the prototype. <br><br>Looping takes place in this step, and better versions of the prototype are created. These are continuously shown to the user so that any new changes can be updated in the prototype. This process continue until the customer is satisfied with the system. Once a user is satisfied, the prototype is converted to the actual system with all considerations for quality and security.</li></ol>"
            },
            {
                "name": "Requirement Engineering Process",
                "description": "<p>It is a four-step process, which includes - </p><ul><li>Feasibility Study - The objective behind the feasibility study is to create the reasons for developing the software that is acceptable to users, flexible to change and conformable to established standards.</li><li>Requirement Elicitation and Analysis - This is also known as the gathering of requirements. Here, requirements are identified with the help of customers and existing systems processes, if available.</li><li>Software Requirement Specification - Software requirement specification is a kind of document which is created by a software analyst after the requirements collected from the various sources - the requirement received by the customer written in ordinary language. It is the job of the analyst to write the requirement in technical language so that they can be understood and beneficial by the development team.</li><li>Software Requirement Validation - After requirement specifications developed, the requirements discussed in this document are validated.</li><li>Software Requirement Management - Requirement management is the process of managing changing requirements during the requirements engineering process and system development. New requirements emerge during the process as business needs a change, and a better understanding of the system is developed.</li></ul>"
            },
            {
                "name": "Activities involved for Software Project Management",
                "description": "<ol><li>Project planning and Tracking - It is a set of multiple processes, or we can say that it a task that performed before the construction of the product starts.</li><li>Project Resource Management - In software Development, all the elements are referred to as resources for the project. It can be a human resource, productive tools, and libraries. such as #Create a project team and assign responsibilities to every team member, #Developing a resource plan is derived from the project plan., #Adjustment of resources.</li><li>Scope Management - It describes the scope of the project. Scope management is important because it clearly defines what would do and what would not.</li><li>Estimation Management - If we talk about the size, then Line of code depends upon user or software requirement. If we talk about effort, we should know about the size of the software, because based on the size we can quickly estimate how big team required to produce the software. If we talk about time, when size and efforts are estimated, the time required to develop the software can easily determine. If we talk about cost, it includes all the elements such as: #Size of software, #Quality, #Hardware, #Communication, #Training, Additional Software and tools, #Skilled manpower</li><li>Project Risk Management - Risk management consists of all the activities like identification, analyzing and preparing the plan for predictable and unpredictable risk in the project. such as #The Experienced team leaves the project, and the new team joins it., #Changes in requirement., #Change in technologies and the environment., #Market competition.</li><li>Scheduling Management - Scheduling Management in software refers to all the activities to complete in the specified order and within time slotted to each activity. Project managers define multiple tasks and arrange them keeping various factors in mind.</li><li>Project Communication Management - Communication is an essential factor in the success of the project. It is a bridge between client, organization, team members. From the planning to closure, communication plays a vital role. In all the phases, communication must be clear and understood. Miscommunication can create a big blunder in the project.</li><li>Configuration Management - Configuration management is about to control the changes in software like requirements, design, and development of the product.</li></ol>"
            },
            {
                "name": "Activities involved for Risk Management",
                "description": "<p><img src='./assets/se/risk-management-activities.png'></p><p>The objective of risk assessment is to division the risks in the condition of their loss, causing potential. For risk assessment, first, every risk should be rated in two methods:</p><ul><li>The possibility of a risk coming true (denoted as r). </li><li>The consequence of the issues relates to that risk (denoted as s). </li></ul><p>If all identified risks are set up, then the most likely and damaging risks can be controlled first, and more comprehensive risk abatement methods can be designed for these risks.</p><p><strong>1. Risk Identification:</strong> - There are different types of risks which can affect a software project:</p><ol><li><strong>Technology risks:</strong> Risks that assume from the software or hardware technologies that are used to develop the system.</li><li><strong>People risks:</strong> Risks that are connected with the person in the development team.</li><li><strong>Organizational risks:</strong> Risks that assume from the organizational environment where the software is being developed.</li><li><strong>Tools risks:</strong> Risks that assume from the software tools and other support software used to create the system.</li><li><strong>Requirement risks:</strong> Risks that assume from the changes to the customer requirement and the process of managing the requirements change.</li><li><strong>Estimation risks:</strong> Risks that assume from the management estimates of the resources required to build the system </li></ol><p><strong>2. Risk Analysis:</strong> - During the risk analysis process, you have to consider every identified risk and make a perception of the probability and seriousness of that risk. One has to rely on your perception and experience of previous projects and the problems that arise in them.</p><br><br><p><strong>Risk Control</strong> - It is the process of managing risks to achieve desired outcomes. After all, the identified risks of a plan are determined; the project must be made to include the most harmful and the most likely risks. Different risks need different containment methods. There are three main methods to plan for risk management:</p><ol><li><strong>Avoid the risk:</strong> This may take several ways such as discussing with the client to change the requirements to decrease the scope of the work, giving incentives to the engineers to avoid the risk of human resources turnover, etc.</li><li><strong>Transfer the risk:</strong> This method involves getting the risky element developed by a third party, buying insurance cover, etc.</li><li><strong>Risk reduction:</strong> This means planning method to include the loss due to risk. For instance, if there is a risk that some key personnel might leave, new recruitment can be planned. </li></ol>"
            },
            {
                "name": "Project Scheduling",
                "description": "<p>Project-task scheduling is a significant project planning activity. It comprises deciding which functions would be taken up when. To schedule the project plan, a software project manager wants to do the following:</p><ol><li>Identify all the functions required to complete the project.</li><li>Break down large functions into small activities.</li><li>Determine the dependency among various activities.</li><li>Establish the most likely size for the time duration required to complete the activities.</li><li>Allocate resources to activities.</li><li>Plan the beginning and ending dates for different activities.</li><li>Determine the critical path. A critical way is the group of activities that decide the duration of the project.</li></ol>"
            },
            {
                "name": "Personnel Planning",
                "description": "<p>Personnel Planning deals with staffing. Staffing deals with the appoint personnel for the position that is identified by the organizational structure. It involves:</p><ul><li>Defining requirement for personnel</li><li>Recruiting (identifying, interviewing, and selecting candidates)</li><li>Compensating</li><li>Developing and promoting agent</li></ul><p><strong>Team Structure</strong> - Team structure addresses the issue of arrangement of the individual project teams.</p><p>For personnel planning and scheduling, it is helpful to have efforts and schedule size for the subsystems and necessary component in the system.</p><p>Team structure addresses the issue of arrangement of the individual project teams. There are some possible methods in which the different project teams can be organized. There are primarily three formal team structures: <strong>chief programmer, Ego-less or democratic, and the mixed team organizations</strong></p>"
            },
            {
                "name": "Programming Style",
                "description": "<p>Some general rules or guidelines in respect of programming style:</p><p><strong>1. Clarity and simplicity of Expression:</strong> The programs should be designed in such a manner so that the objectives of the program is clear.</p><p><strong>2. Naming:</strong> In a program, you are required to name the module, processes, and variable, and so on. Care should be taken that the naming style should not be cryptic and non-representative.</p><p><strong>&nbsp; &nbsp; &nbsp; For Example:</strong> a = 3.14 * r * r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; area of circle = 3.14 * radius * radius;</p><p><strong>3. Control Constructs:</strong> It is desirable that as much as a possible single entry and single exit constructs used.</p><p><strong>4. Information hiding:</strong> The information secure in the data structures should be hidden from the rest of the system where possible. Information hiding can decrease the coupling between modules and make the system more maintainable.</p><p><strong>5. Nesting:</strong> Deep nesting of loops and conditions greatly harm the static and dynamic behavior of a program. It also becomes difficult to understand the program logic, so it is desirable to avoid deep nesting.</p><p><strong>6. User-defined types:</strong> Make heavy use of user-defined data types like enum, class, structure, and union. These data types make your program code easy to write and easy to understand.</p><p><strong>7. Module size:</strong> The module size should be uniform. The size of the module should not be too big or too small. If the module size is too large, it is not generally functionally cohesive. If the module size is too small, it leads to unnecessary overheads.</p><p><strong>8. Module Interface:</strong> A module with a complex interface should be carefully examined.</p><p><strong>9. Side-effects:</strong> When a module is invoked, it sometimes has a side effect of modifying the program state. Such side-effect should be avoided where as possible.</p>"
            },
            {
                "name": "Structured Programming?",
                "description": "<p>We use structured programming because it allows the programmer to understand the program easily. If a program consists of thousands of instructions and an error occurs then it is complicated to find that error in the whole program, but in structured programming, we can easily detect the error and then go to that location and correct it. This saves a lot of time.</p><p><strong>These are the following rules in structured programming:</strong></p><br><br><p><strong>Structured Rule One: Code Block</strong> - If the entry conditions are correct, but the exit conditions are wrong, the error must be in the block. This is not true if the execution is allowed to jump into a block. The error might be anywhere in the program. Debugging under these circumstances is much harder.</p><p><strong>Structure Rule Two: Sequence</strong> - A sequence of blocks is correct if the exit conditions of each block match the entry conditions of the following block. Execution enters each block at the block's entry point and leaves through the block's exit point. The whole series can be regarded as a single block, with an entry point and an exit point.</p><p><strong>Structured Rule Three: Alternation</strong> - If-then-else is frequently called alternation (because there are alternative options). In structured programming, each choice is a code block. If alternation is organized as in the flowchart at right, then there is one entry point (at the top) and one exit point (at the bottom). The structure should be coded so that if the entry conditions are fulfilled, then the exit conditions are satisfied (just like a code block).</p><p><strong>Structured Rule 4: Iteration</strong> - Iteration (while-loop) is organized as at right. It also has one entry point and one exit point. The entry point has conditions that must be satisfied, and the exit point has requirements that will be fulfilled. There are no jumps into the form from external points of the code.</p><p><strong>Structured Rule 5: Nested Structures</strong> - In flowcharting conditions, any code block can be spread into any of the structures. If there is a portion of the flowchart that has a single entry point and a single exit point, it can be summarized as a single code block.</p>"
            },
            {
                "name": "Code Review Checklist & What You Don't",
                "description": "<p><strong>1. Identify Obvious Bugs</strong> - Often, those defects are quite silly: an off-by-one error, a misspelled variable, parameters passed in the wrong order to a method, and so on.</p><p><strong>2. Look for Possible Security Issues</strong> - try to look for possible security issues that could be exploited. e.g. controller actions without protection against CSRF or SQL queries that concatenate user input and become vulnerable to injections.</p><p><strong>3. Look for 'Clever' Code</strong> - Code readability is another vital area you should look into when reviewing code. First, remember that readability is, to a certain extent, subjective. </p><p><strong>4. Check for Code Duplication</strong> - When reviewing code, you'll often spot some low-graded code duplication. Maybe the author planned to extract the duplication to a dedicated method but then forgot to do it.</p><p><strong>5. Check Whether Names Are Descriptive Enough</strong> - When performing a review, look for opportunities to improve the names of variables, constants, class fields and properties, methods, classes, and so on.</p><p><strong>6. Look for Possible Performance Improvements</strong> - One should have automatic checks and production monitoring to detect performance issues. Here, I'm thinking about easy finds like:</p><ul><li>an expensive operation inside a loop</li><li>excessive allocations of objects</li><li>inefficient string concatenations</li><li>inefficient logging</li></ul><p><strong>7. Check the Presence and Quality of Tests</strong> - Automated tests—including but not limited to unit tests—are code and, as such, you should also review them. When reviewing unit tests, check for:</p><ul><li>The presence of tests: Did the author create tests for their change?</li><li>The quality of tests: Do the tests created seem to effectively exercise the system under test? Do they follow agreed-upon best practices?</li><li>Readability: Remember tests are also documentation. They should be simple and easy to understand.</li><li>Naming: Are the tests named according to the team's convention? Is it easy to understand what they're about?</li></ul><p><strong>8. Explain Your Changes</strong> - Sometimes the developers wrote less-than-perfect code because of a lack of knowledge, it's important to take the time to educate them. One of the major benefits of code reviews is that they spread knowledge throughout the team and help less-experienced developers level up their skills. Although each team member will have their areas of expertise, the team will perform better if everyone has a comprehensive understanding of the codebase. <br><br>Increasing knowledge among the team will also improve the overall quality of the codebase, resulting in reduced development costs. In this way, investing in learning is like preemptively paying down technical debt.</p><p><strong>9. Optional: Code Documentation</strong> - By keeping comments in the code itself, this makes updating the documentation much easier and therefore more likely to happen. During the build process, these comments can be used to generate documentation that is then uploaded to a server where they can be accessed by developers on the team. Such a style of documentation is particularly useful for teams creating software that's used by third parties, such as libraries. </p>"
            },
            {
                "name": "What to Remove from Your Code Review Checklist",
                "description": "<p><strong>1. Cosmetic Concerns</strong> - You shouldn't be wasting your time fixing lots of cosmetic/aesthetic issues during your code review. These should be taken care of by an automated tool like a linter or static analyzer. You can configure linters to enforce one of the established coding style guides (AirBnB's is a popular one) or to enforce your company's style. What do I mean by cosmetics? Things like:<ul><li>whether to use tabs or spaces</li><li>the position of opening brackets in code blocks</li><li>whether to leave a space after <strong>if</strong>, <strong>for</strong>, and other keywords</li><li>whether to leave a blank line in certain situations</li><li>snake_case vs camelCase vs PascalCase</li></ul></p><p><strong>2. Testing</strong> - Reviewers shouldn't test changes when performing a code review. When I say test changes, I mean pulling the branch to their machines, executing the application, and manually going to the changes in order to see if everything's working properly.</p><p><strong>3. Anything That Can Be Automated</strong> -  avoid doing anything in a code review that can be automated. For instance, I just talked about how you should review unit tests when performing reviews. Sure, but that review should not include verifying whether the tests cover all possible branches of the code. That would be too time-consuming anyway, but there's an automated way to check that: it's called branch coverage. <br><br>Another example would be compliance or adherence to the tech stack agreed upon. There are ways to automate that, and it should be automated. <br><br>Engineers shouldn't be taking valuable time to ping another about a PR they created 4 days ago. Instead, set Team Goals with LinearB and use our developer workflow bot, WorkerB, to help dev teams course correct when a review has been waiting longer than your agreed-upon timeframe.</p>"
            },
            {
                "name": "What to look for in a code review",
                "description": "<p>In doing a code review, you should make sure that:</p><ul><li>The code is well-designed.</li><li>The functionality is good for the users of the code.</li><li>Any UI changes are sensible and look good.</li><li>Any parallel programming is done safely.</li><li>The code isn't more complex than it needs to be.</li><li>The developer isn't implementing things they <em>might</em> need in the future but don't know they need now.</li><li>Code has appropriate unit tests.</li><li>Tests are well-designed.</li><li>The developer used clear names for everything.</li><li>Comments are clear and useful, and mostly explain <em>why</em> instead of <em>what</em>.</li><li>Code is appropriately documented (generally in g3doc).</li><li>The code conforms to our style guides.</li></ul>"
            },
            {
                "name": "4 Things to do before jump-starting your Angular project",
                "description": "<p><strong>Know your project</strong> - You should understand what type of enterprise app you're developing, how you're going to integrate it, and what functional and non-functional requirements it should meet. It's a good idea to think through the front end and back end here.</p><p><strong>Cherry-pick the tools.</strong> - Applications of Angular are so diverse in part because it's a tool-rich platform. While your choice is never limited, not every tool is a good fit for an enterprise project. Before getting down to writing code, settle on UI frameworks (e.g., Angular Material, PrimeNG), test runners (e.g., Karma, Mocha), and other DevTools (e.g., Augury, Bit).</p><p><strong>Devise a basic structure.</strong> - You should plan your services, parent/child components, and routes before setting your project in motion. With a well-defined structure, you can eliminate redundancy and further the development process.</p><p><strong>Decide who will build it.</strong> - You can either hire Angular developers for your in-house team or outsource your project.</p>"
            },
            {
                "name": "5 Steps to get it off the ground",
                "description": "<p>To design a robust Angular architecture, your developers need to set up its building blocks:</p><ul><li>Modules to box functionality and enable accurate routing</li><li>Components to define directives and app logic</li><li>Templates to organize view elements</li><li>Metadata to govern the correct use of components and templates</li><li>Services to configure functions and data between components</li><li>Dependencies to manage code changes and set your app up for scalability</li></ul><p>Use your basic structure plan to arrange architectural blocks for your Angular project. It can serve as a guide for your developers as they split functionality into modules, define components, and inject dependencies.</p><p>These blocks lay the foundation that allows you to build enterprise applications with Angular without guesswork. Based on them, your team can then:</p><ol><li>Add the required functionality and design an enterprise UI prototype</li><li>Lazy-load your modules</li><li>Implement REST APIs</li><li>Run tests using the CLI and Angular-specific tools</li><li>Deploy your enterprise application</li></ol>"
            },
            {
                "name": "5 tactics that you can use to effectively manage team conflicts.",
                "description": "<p><strong>1. Setup a conflict-welcoming team culture</strong> - You can paraphrase different ideas from different team members and provide a debate-friendly space for everyone. <strong>Promote technical arguments in the way opposing ideas ignite discussion</strong></p><p><strong>2. Appreciate people who go the extra mile</strong> - Suppose there are different opinions for a project's technical architecture, and two engineers have contradictory ideas about it. One individual might do research by himself and present a new design solution proving his valid argument further. <br><br>As a tech lead, you can appreciate his/her efforts and give a shoutout, so others also take the initiative to go the extra mile. By doing so, better ideas can be brainstormed — the more the better!</p><p><strong>3. Give responsibilities by forming sub-teams</strong> - Suppose you notice a submodule or a component of the project, which leads to many controversial arguments. In that case, my suggestion is to form a sub-team and give responsibility to them to enhance the application by addressing the grey area you observe. <strong>You may manage the conflict keeping it under a healthy margin and allowing sub-teams to derive practical solutions for the problematic scenarios.</strong></p><p><strong>4. Define a common goal to remind your team frequently</strong> - As a team, it is essential to have a clear, achievable goal defined, but not just limited to documentations. When every team member is working toward a common goal, it makes your job so much easier. If you can inspire your team to achieve common goals, they will try different paths to reach them, which is what you want from them. Hence, it helps everyone to synchronize with team dynamics and work together, delivering high throughput.</p><p><strong>5. Know how to stop a conflict — Don't text; use voice</strong> - If you feel the limit of a healthier conflict and now the arguments are going more into personal spaces, raise your voice to break the flow. One should use their voice but never text or send an email expecting others to change their behaviours. If you want to pass a message to someone expecting to summon a conflict, always go and talk to them in person, or give them a call but DON'T text them. This advice will make your work so much easier when it comes to controlling team arguments.</p><br><br><p><strong>Final Conclusion</strong> - However, at the end of the day, make sure that every person in your team feels good about each other and feels proud to be a part of your fantastic team!</p>"
            },
            {
                "name": "How to Build a Successful Team",
                "description": "<ol><li>Set organization goals and start planning</li><li>Define the roles within your team</li><li>Maximize the skills of your team member</li><li>Embrace diversity - Give your team members time and space to express themselves, especially in areas related to diversity. This communication will help you best understand how you can meet their needs and realize skills and capabilities you may have overlooked.</li><li>Set expectations from day one</li><li>Allow your team to take risks and experiment</li><li>Celebrate successes and failures</li><li>Promote individual development</li><li>Avoid micromanagement - Allow people the freedom and self-determination they need to get their work done, based on what's appropriate for the role. Let your team complete tasks with some autonomy and have regular meetings or requirements for people to report that status, As an added benefit, this will free you up to finish your own projects more quickly and effectively.</li><li>Motivate your team with positivity</li><li>Establish strong leadership</li><li>Create a team culture</li><li>Foster connections within the team - Team building exercises</li><li>Communicate frequently and effectively</li></ol>"
            }
        ]
    },
    {
        "folder": "HR",
        "title": "HR",
        "url": "/folder/HR",
        "icon": "people-circle-outline",
        "question": [
            {
                "name": "Why should we hire you",
                "description": "<p>Honestly, I almost feel like the job description suited my profile. I have the 8 years of programming experience you’re looking for, a track record of successful projects, and proven expertise in agile development processes. In the past 1 and half year, I have developed my communication skills from working directly with senior managers, bussiness development team, which means I am well prepared to work on high-profile, cross-department projects. I have the experience to start contributing from day one and I am truly excited about the prospect of getting started.</p><p>I’m excited about the opportunity to work with a fast growing company. I’m also the type of employee that likes to hit the ground running and jump into projects as soon as possible. So, over the next five years, I see myself taking on as many complex assignments as the position would allow. By the end of that period, I want to say that I’ve delivered a good product and a lasting client relationships. I’ve had amazing mentors and managers in my past positions, so I’d like to be able to provide similar guidance, potentially taking on a leadership role.</p>"
            },
            {
                "name": "Why do you want to work for this company?",
                "description": "<p>I was delighted to see on your website that your featured employees are talking about how great it is to work for your company. These days so many people seem to despise where they work for one reason or another. It's wonderful to see that your employees are proud to talk about how much they love their jobs.</p>"
            },
            {
                "name": "Where do you see yourself in 5 years",
                "description": "<p>Firstly I want to look for opportunities to expand my responsibilities within this role to work towards my goal. Over the next few years, I want to explore and develop skills in project management. In five years, I want to have gained experience in leading projects for major clients.</p>"
            },
            {
                "name": "Do you consider yourself successful?",
                "description": "<p>I feel successful with continuous progress. I want to recognize myself as someone with a progressive attitude who does his best and gives 100% to attain goals.  To me, success is not just my personal achievements but also by the efforts of the people around me.</p>"
            },
            {
                "name": "What would you consider your greatest strengths & weakness?",
                "description": "<p>My strength is my ability to convert negative work environment into positive. At the same time, developing a supportive team. I am also capable of keeping many projects on track and ensuring deadlines are met. As far as my weakness is concerned, I get impatient sometimes in order to get everything done very quickly. To tackle the problem, I am trying to re-consider the to-do list and prioritize the tasks.</p>"
            },
            {
                "name": "What motivates you?",
                "description": "<p>Responsibility towards work motivates me the lot. But subsequent recognition of my efforts gives me the more encouragement for my next efforts.</p>"
            },
            {
                "name": "What have you learned from mistakes on the job?",
                "description": "<p>I learned that without proper coordination, even the simplest task could cause problems in a project. I had this problem during my first job. From that time on, I made sure every I think follows every detail and coordination.</p>"
            },
            {
                "name": "Are you willing to work overtime? Prepare for night shift and work on Weekends?",
                "description": "<p>I understand that being asked to work for an extended number of hours comes with a good reason in the first place, so I’m ok with it. It an extra effort means something for the company. I’ll be happy to do it.<p>"
            },
            {
                "name": "How would you be an asset to this company?",
                "description": "<p>My skills in [key skill for the position] are outstanding. I have earned a lot of awards and certifications from my past employers. As an employee, I handle pressure with ease and can work with minimal supervision.</p>"
            },
            {
                "name": "How long would you expect to work for us in case you are hired?",
                "description": "<p>I would like to be in this company for a long time. For as long as management sees me as an asset, I am willing to stay.</p>"
            }
        ]
    }
]