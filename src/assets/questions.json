[
    {
        "folder": "JavaScript",
        "title": "JavaScript",
        "url": "/folder/JavaScript",
        "icon": "logo-javascript",
        "question": [
            {
                "name": "What are the different data types present in javascript?",
                "description": "<ol><li><strong>Primitive types</strong> - Primitive data types can store only a single value. <ol><li><strong>String</strong> - It represents a series of characters and is written with quotes. A string can be represented using a single or a double quote.</li><li><strong>Number</strong> - It represents a number and can be written with or without decimals.</li><li><strong>Boolean</strong> - It represents a logical entity and can have only two values : true or false. Booleans are generally used for conditional testing. </li><li><strong>Undefined</strong> - When a variable is declared but not assigned, it has the value of undefined and it’s type is also undefined</li><li><strong>Null</strong> - It represents a non-existent or a invalid value.</li></ol></li><li><strong>Non Primitive type</strong> - To store multiple and complex values, non-primitive data types are used. <ol><li><strong>Object</strong> - Used to store collection of data.</li></ol></li></ol>"
            },
            {
                "name": "What are the possible ways to create objects in JavaScript",
                "description": "<ol><li><strong>Object literal syntax:</strong> - comma-separated set of name-value pairs wrapped in curly braces. <br><pre>var object = {<br>&nbsp;&nbsp;&nbsp;&nbsp;name: \"Kamlesh\",<br>&nbsp;&nbsp;&nbsp;&nbsp;age: 34 <br>};</pre></li><li><strong>Function constructor:</strong> - Create any function and apply the new operator to create object instances,<br><br><pre>// constructor function <br>function Person () { <br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = 'John', <br>&nbsp;&nbsp;&nbsp;&nbsp;this.age = 23<br>}<br><br>// create an object<br>const person = new Person();</pre><br><br></li><li><strong>Function constructor with prototype:</strong> - This is similar to function constructor but it uses prototype for their properties and methods, <br><pre>function Person() {}<br>&nbsp;&nbsp;&nbsp;&nbsp;Person.prototype.name = \"Kamlesh\";<br>&nbsp;&nbsp;&nbsp;&nbsp;var object = new Person();</pre></li><li><strong>Object's create method:</strong> - The create method of Object creates a new object by passing the prototype object as a parameter <br><pre>var object = Object.create(null);<br>&nbsp;&nbsp;&nbsp;&nbsp;a.name = \"Kamlesh\"<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;// '{name: \"Kamlesh\"}'</pre></li><li><strong>Object constructor:</strong> - create an empty object is using the Object constructor <br><pre>var object = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;a.name = \"Kamlesh\"<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(a)<br>&nbsp;&nbsp;&nbsp;&nbsp;// '{name: \"Kamlesh\"}'</pre></li><li><strong>ES6 Class syntax:</strong> - ES6 introduces class feature to create the objects <br><pre>class Person {<br>&nbsp;&nbsp;&nbsp;&nbsp;constructor(name) {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.name = name;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>} <br><br>var object = new Person(\"Kamlesh\");</pre></li><li><strong>Singleton pattern:</strong>  - A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances. <br><pre>var object = new (function () {<br>&nbsp;&nbsp;&nbsp;&nbsp;this.name = \"Kamlesh\";<br>})();</pre></li></ol>"
            },
            {
                "name": "What is Hoisting?",
                "description": "<p>Hoisting is a JavaScript mechanism where variables, function and class declarations are moved to the top of their scope before code execution.<br><br><img src='./assets/js/hoisting.png'><br><br><strong>Note</strong> that JavaScript only hoists declarations, not initialisation. Variables declared or initialized with the var keyword will have their declaration 'moved' up to the top of their module/function-level scope, which we call as hoisting. However, only the declaration is hoisted, the assignment (if there is one), will stay where it is.</p>"
            },
            {
                "name": "What are the tools or techniques used for debugging JavaScript code",
                "description": "<ol><li>Chrome Devtools</li><li>debugger statement</li><li>Good old console.log statement</li></ol>"
            },
            {
                "name": "Difference between (equality operator) == and === ?",
                "description": "<p> JavaScript has both strict and type-converting equality comparison. For strict comparison we use === and for type-converting comparison we use == .<br><br><strong>Strict Comparison(===)</strong><br>For strict comparison the items been compared must be the same type.</p><ul> <li>Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.<br><br><img src='./assets/js/equaltwostring.png'></li><li>Two numbers are strictly equal when they are numerically equal (have the same number value). NaN is not equal to anything, including NaN. Positive and negative zeros are equal to one another.<br><br><img src='./assets/js/equaltwonum.png'></li><li>Two Boolean operands are strictly equal if both are true or both are false.<br><br><img src='./assets/js/equaltwobool.png'></li><li>Two objects are strictly equal if they refer to the same Object.<br><br><img src='./assets/js/equaltwoobj.png'></li><li>Null and Undefined types are not equal<br><br><img src='./assets/js/nullundefined.png'></li></ul><br><br><strong>Type-converting comparison</strong> - The == does a type conversion before comparing, if both items are of different types.<br><br><img src='./assets/js/equality1.png'>"
            },
            {
                "name": "Difference between variables created using let var or const?",
                "description": "<p><strong>#1. Variables</strong> declared using the <code>var</code> keyword are scoped to the function in which they are created, or if created outside of any function, to the global object. <code>let</code> and <code>const</code> are block scoped, meaning they are only accessible within the nearest set of curly braces (function, if-else block, or for-loop).<br><img src='./assets/js/let-var-const.png'><br><br><strong>#2.</strong> <code>var</code> allows variables to be hoisted, meaning they can be referenced in code before they are declared, where as <code>let</code> and <code>const</code> will not allow this, instead they will <strong>throw an error.</strong><br><img src='./assets/js/let-var-const1.png'><br><br><strong>#3.</strong> Redeclaring a variable with <code>var</code> will not throw an error, but <code>let</code> and <code>const</code> will throw.<br><img src='./assets/js/let-var-const2.png'><br><br><strong>#4.</strong> <code>let</code> and <code>const</code> differ to each other in a waya that <code>let</code> allows reassigning of the variable's value while <code>const</code> does not.<br><img src='./assets/js/let-var-const3.png'></p>"
            },
            {
                "name": "What is Coercion in JavaScript?",
                "description": "<p>In JavaScript conversion between different two build-in data types is called coercion. Coercion comes in two forms in JavaScript: explicit and implicit.<br><br><strong>Implicit coercion:</strong> Type coercion is the automatic or implicit conversion of values from one data type to another.<br><img src='./assets/js/implicit.png'><br><br><strong>Explicit coercion:</strong> Type conversion is done explicitly in code using the inbuilt functions like Number(), String(), Boolean(), etc<br><img src='./assets/js/explicit.png'></p>"
            },
            {
                "name": "Difference between null and undefined",
                "description": "<table><thead><tr><th>Undefined</th><th>Null</th></tr></thead><tbody><tr><td>Undefined means the variable has been declared, but its value has not been assigned.</td><td>Null means an empty value or a blank value.</td></tr><tr><td>The typeof() operator returns <strong>undefined</strong> for an undefined variable.</td><td>The typeof() operator returns the type as an <strong>object</strong> for a variable whose value is assigned as null.</td></tr><tr><td>It returns <strong>NaN</strong>on performing arithmetic operations.</td><td>converts to 0 then perform the operation</td></tr><tr><td>As there is no value assigned to the variable, it becomes undefined when we assign to a variable.</td><td>As we assign null to a variable, it becomes as assigned value of that variable.</td></tr></tbody></table>"
            },
            {
                "name": "Why JavaScript 'var null' throw error but 'var undefined' doesn't?",
                "description": "<p><strong>null (var null)</strong> - In JavaScript, null is a reserved identifier, therefore we cannot use it as an identifier in JavaScript. An error can be seen if we will write:<br><br><img src='./assets/js/null.png'><br><br>The web browser throws an error for “var null” since it is a reserved identifier, The following is the error visible<br><strong>Output - SyntaxError: Unexpected token null </strong><br><br><strong>undefined (var undefined)</strong> - The undefined is not a reserved identifier, therefore if you will write the following, then no error would be thrown:<br><br><img src='./assets/js/undefined.png'><br><strong>Output: Undefined</strong></p>"
            },
            {
                "name": "Difference between “undefined” and “not defined”",
                "description": "<p>In JavaScript, <strong>“undefined”</strong> and <strong>“not defined”</strong> are the two separate terms related to memory space. The keyword <strong>“undefined”</strong> means there is a variable that is defined and contains space in memory without an assigned value. While <strong>“not defined”</strong> means the variable is not yet defined in the code.<br><br>Example of undefined:<br><pre>var x; // declaring x<br>console.log(x);<br>//output: undefined</pre><br><br>Example of not defined:<br><pre>console.log(y);<br>// Output: ReferenceError: y is not defined</pre></p>"
            },
            {
                "name": "Difference between function declaration and function expression?",
                "description": "<p>Function declaration is like most other traditional languages, but in JavaScript we use the keyword “function”.<br>In function expression we assign an anonymous function to an variable. They are very useful when we pass function as arguments to other function or return an function.<br><br><img src='./assets/js/function.png'><br><br>One of the key difference is that, we can call a function declaration even before defining it but same is not true for function expression and it will give reference error.</p>"
            },
            {
                "name": "Is JavaScript an interpreted language or compiled language?",
                "description": "<p><strong>JavaScript</strong>is a special case where you directly execute your source code. A webpage will directly execute your JavaScript. So, for that reason many people think JavaScript as a interpreted language. <strong>However there is a compilation step just before the interpretation step in JavaScript. So, JS is both compiled and interpreted language.</strong><br><br><pre>var a = 10; <br>var b = 20; <br>console.log(a+b)</pre><br><br><strong>Compilation Step</strong> – During this step the compiler mainly registers the variable declarations.<br><br>When the compiler goes to line 1, it encounters <code>var a</code> and registers it in the global scope and then goes to line 2 and registers the <code>var b</code>.<br><br><strong>Interpretation Step</strong> – During this the actual execution takes place. <br><br>the interpreter starts at line 1 and see a variable a and ask the compiler, if it have a variable “a” in Global scope and the compiler have it. So, it assigns the value 10 to it. Next the same step is repeated for line 2 and interpreter assigns 20 to variable “b”. Now once the interpreter goes to line 3, it finds console. It first looks for console at global scope from the compiler but don’t find it. So, it checks in the JavaScript global and finds it. Inside the console there are variable a and b, which it finds at global scope. It then adds them using addition operator and display the result.</p>"
            },
            {
                "name": "Is JavaScript a pass by reference or pass by value language?",
                "description": "<p>In JavaScript, <strong>primitive data types are passed by value</strong> and <strong>non-primitive data types are passed by reference.</strong><br><br>Pass-by-value creates a new space in memory and makes a copy of a value with Primitive data types such as string, number, boolean etc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are independent of each other.<pre>let a = 5;<br>let b = a;<br><br>b++;<br>console.log(a, b); //5, 6 </pre><br>In the above code snippet, the value of <code>a</code> is assigned to <code>b</code> and the variable <code>b</code> has been incremented. Since there is a new space created for variable <code>b</code>, any update on this variable doesn't impact the variable <code>a</code>.<br><br><br>where as Pass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial variable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e, updating one value will impact the other variable.<br><pre>let user1 = {<br>&nbsp;&nbsp;&nbsp;&nbsp;name: 'John',<br>&nbsp;&nbsp;&nbsp;&nbsp;age: 27<br>}; <br><br>let user2 = user1;<br>user2.age = 30;<br><br>console.log(user1.age, user2.age); // 30, 30</pre></p>"
            },
            {
                "name": "Is javascript a statically typed or a dynamically typed language?",
                "description": "<p>JavaScript is a dynamically typed language. In a dynamically typed language, the type of a variable is checked during <strong>run-time </strong>in contrast to a statically typed language, where the type of a variable is checked during <strong>compile-time.</strong><br><br>Since javascript is a loosely(dynamically) typed language, variables in JS are not associated with any type. A variable can hold the value of any data type.<br><br>For example, a variable that is assigned a number type can be converted to a string type:<br><br><pre>var a = 23; <br>var a = \"Hello World!\";</pre></p>"
            },
            {
                "name": "What is NaN in JavaScript?",
                "description": "<p>NaN suggests that the entered value is not a legal number. It is a JavaScript property, which can also be considered as a \"Not-a-Number\" value.<br><br>To determine the entered value is a number or not, you can use the Number.isNaN() method. If the result is “True”, then it would that the given value is not a number, whereas “False” would mean the value is a legal Number.<br><br><strong>Note - </strong> To check whether entered value is a NaN or not, use the Number.isNaN() method. This method returns <strong>true</strong> if the value is not a number, else <strong>false</strong> is returned.<br><pre>var a = 'z';<br><br>isNaN(a) / isNaN(\"Hello\")  // Returns true<br><br>isNaN(345)  // Returns false<br><br>isNaN('1')  // Returns false, since '1' is<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;converted to Number type which results in 0 ( a number)<br><br>isNaN(true) // Returns false, since true <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;converted to Number type results in 1 ( a number)<br><br>isNaN(false) // Returns false<br><br>isNaN(undefined) // Returns true</pre></p>"
            },
            {
                "name": "IIFE - Immediate Invoke Function Expression",
                "description": "<p>An IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined.<br><br>It is a design pattern which is also known as a Self-Executing Anonymous Function and contains two major parts:</p><ol> <li>The first is the anonymous function with lexical scope enclosed within the <code>Grouping Operator</code> <code>()</code>. This prevents accessing variables within the IIFE idiom as well as polluting the global scope.</li><li>The second part creates the immediately invoked function expression <code>()</code> through which the JavaScript engine will directly interpret the function.</li></ol><br><br><strong>Syntax:</strong><br><pre>(function(){ <br>&nbsp;&nbsp;&nbsp;&nbsp;// Do something;<br>})();</pre>"
            },
            {
                "name": "What do you mean by strict mode in javascript and characteristics of javascript strict-mode?",
                "description": "<p>In ECMAScript 5, a new feature called JavaScript Strict Mode allows you to write a code or a function in a \"strict\" operational environment. In <strong>'Strict mode,'</strong> almost all forms of errors, including silent errors, will be thrown. As a result, debugging becomes a lot simpler.&nbsp; Thus programmer's chances of making an error are lowered.<br><br>Characteristics of strict mode in javascript</p><ol><li>Duplicate arguments are not allowed by developers.</li><li>In strict mode, you won't be able to use the JavaScript keyword as a parameter or function name.</li><li>The <strong>'use strict'</strong> keyword is used to define strict mode at the start of the script. Strict mode is supported by all browsers.</li><li>Engineers will not be allowed to create global variables in <strong>Strict Mode.</strong></li></ol>"
            },
            {
                "name": "What is a first class function?",
                "description": "<p>In Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.<br><br>In such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listener<br><br><img src='./assets/js/first-class.png'></p>"
            },
            {
                "name": "What is a first order function?",
                "description": "<p>First-order function is a function that doesn’t accept other function as an argument and doesn’t return a function as its return value.<br><br><img src='./assets/js/first-order.png'></p>"
            },
            {
                "name": "What are Higher Order Functions",
                "description": "<p>Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.<br><br><strong>Functions that operate on other functions, either by taking them as arguments or by returning them, are called higher-order functions.</strong><br><br>Higher-order functions are a result of functions being <strong>first-class citizens </strong>in javascript.<br><br><img src='./assets/js/hoc.png'></p>"
            },
            {
                "name": "What are callbacks?",
                "description": "<p><strong>Functions that are used as an argument to another function are called callback functions.</strong> For Example:<br><br><img src='./assets/js/callback.png'></p>"
            },
            {
                "name": "Why do we use callbacks?",
                "description": "<p>A callback function is a method that is sent as an input to another function (now let us name this other function \"thisFunction\"), and it is performed inside the thisFunction after the function has completed execution.<br><br>JavaScript is a scripting language that is based on events. Instead of waiting for a reply before continuing, JavaScript will continue to run while monitoring for additional events. Callbacks are a technique of ensuring that a particular code does not run until another code has completed its execution.</p>"
            },
            {
                "name": "“this” Keyword",
                "description": "<p><strong><code>this</code></strong> keyword is one of the most used keywords in JavaScript. But when it comes to regular functions and arrow functions, it behaves in entirely different ways.<br><br>In regular function, <strong><code>this</code></strong> changes according to the way that function is invoked.</p><ul><li><strong>Simple Invocation: <code>this</code></strong> equals the global object or maybe undefined if you are using strict mode.<br><img src='./assets/js/simplethis.png'></li><li><strong>Method Invocation: <code>this</code></strong> equals the object that owns the method.<br><img src='./assets/js/methodthis.png'></li><li><strong>Indirect Invocation: <code>this</code></strong> equals the first argument.<br><img src='./assets/js/indirectthis.png'></li><li><strong>Constructor Invocation: <code>this</code></strong> equals the newly created instance.<br><img src='./assets/js/constructorthis.png'></li></ul><br><br><p>But, in the arrow functions, the behavior of <strong><code>this</code></strong> changes completely.<br><br>Arrow functions don't have their own “this”, and they don’t redefine the value of “<code>this</code>” within the function. <br><br>Regardless of how you execute arrow functions, <code>this</code> inside an arrow function always refers to <code>this</code> from the outer context. This means that <code>this</code> keyword is <strong>lexically </strong>bound in arrow functions. <br>For Example: <br><img src='./assets/js/this.png'><br><br>This behavior of arrow functions makes them really useful when using callbacks inside methods.<br><br>You don't need to use workarounds like <code>const self = this</code> or <code>callback.bind(this)</code> with arrow functions, and it prevents any mistakes that can be caused by the use of <code>this</code> within callbacks.</p>"
            },
            {
                "name": "How does the \"this\" keyword work? Provide some code examples",
                "description": "<p>In JavaScript <em>this</em> always refers to the “owner” of the function we're executing, or rather, to the object that a function is a method of.<br><img src='./assets/jsCode/foo.png'></p>"
            },
            {
                "name": "Explain ”this” with call, apply and bind in JavaScript?",
                "description": "<p>Every function in JavaScript have call, apply and bind methods. These methods can be used to set the custom value of “this” to the execution context of the function.<br><br> <strong>call</strong><strong> - It's a predefined method in javascript. This method invokes a method (function) by specifying the owner object.<br/></strong>Let's say that we have an object called <strong>obj</strong>. It only has one property called <strong>num</strong>, which has a value of 3. Let's also make a function called <strong>addNumbers</strong>.<br><br> Now, in <strong>addNumbers</strong> we have this.num. But how do we pass the value obj.num to it. We need to pass it a context, which means the value of “this”. We will do this my call method by passing a first argument as obj, so the “this” is the obj now.<br><br><img src='./assets/js/call1.png'/><br><br> <strong>apply</strong><strong><br/></strong>It is totally similar to call, but the only difference is that we can pass array as the second argument. We will use the same code for apply also. But now we have an <em>arr</em>, to be passed as second argument.<br><br><img src='./assets/js/apply1.png'/><br><br> <strong>bind</strong><strong><br/></strong>Bind works in a bit different way then call and apply. It works by returning a copy of the function. We will take the returned function in <strong>bindFunc</strong> and then execute it in the next line.<br><br><img src='./assets/js/bind2.png'/></p>"
            },
            {
                "name": "When would you use the bind function?",
                "description": "<p>A good use of the <code>bind</code> function is when you have a particular function that you want to call with a specific this value. You can then use <code>bind</code> to pass a specific object to a function that uses a <code>this</code> reference.</p><br> <img src='./assets/js/bind1.png'>"
            },
            {
                "name": "Explain currying in JavaScript and implement multiply(2)(3)(4)(10) using it?",
                "description": "<p>Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument.<br><br>In other words, when a function, instead of taking all arguments at one time, takes the first one and return a new function that takes the second one and returns a new function which takes the third one, and so forth, until all arguments have been fulfilled.<br><br><img src='./assets/js/currying.png'><br><br><strong>Note:</strong> Currying works because of JavaScript concept of closures. The closure created by the nested functions to retain access to each of the arguments. So inner function which do “return a * b * c * d” have access to all arguments.</p>"
            },
            {
                "name": "What is Scope and Scope Chain in JavaScript?",
                "description": "<p>Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.<br><br>There are three types of scopes in JS: <br><strong>#1. Global Scope</strong> - Variables or functions declared in the global namespace have global scope, which means all the variables and functions having global scope can be accessed from anywhere inside the code. <br><br><strong>#2. Local or Function Scope</strong> - Any variables or functions declared inside a function have local/function scope, which means that all the variables and functions declared inside a function, can be accessed from within the function and not outside of it. <br><br><strong>#3. Block Scope</strong> - Block scope is related to the variables declared using let and const. Variables declared with var do not have block scope. Block scope tells us that any variable declared inside a block { }, can be accessed only inside that block and cannot be accessed outside of it.<br><br><strong>##Scope Chain</strong> - When a variable is used in JavaScript, the JavaScript engine will try to find the variable’s value in the current scope. If it could not find the variable, it will look into the outer scope and will continue to do so until it finds the variable or reaches global scope. <br>If it’s still could not find the variable, it will either implicitly declare the variable in the global scope (if not in strict mode) or return an error.<br><img src='./assets/js/scopechain.png'></p>"
            },
            {
                "name": "What is a closure and how do we use it?",
                "description": "<p>Closures are everywhere in JavaScript.<br><br>Closures are basically, the inner function having access to the variables in the outer function scope, even after the outer function has returned. To use a closure, simply define a function inside another function and expose it, I mean return it.<br><br>Consider the below code. The variable <strong>b</strong> have an scope in outer function. So, at when we call the outer function, it can access the value of b.<br><br>So, how does the innerFn() access the value of <strong>b</strong>. This is where the JS feature of Closures comes into play.<br><br><em>When the “var inner” is created, the JS engine not only stores the function object information but also its scope information.&nbsp;</em>So, it stores a scope of variable <strong>b</strong> inside the inner function object.<br><br>Now it doesn’t matter where you call inner, whether in this file. It will always remember the value of <strong>a</strong> and <strong>b</strong>, as if a snapshot is been taken.<br><br><img src='./assets/js/closure.png'></p>"
            },
            {
                "name": "What is an anonymous function",
                "description": "<p>An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function.<br><br><img src='./assets/js/anonymous.png'></p>"
            },
            {
                "name": "What are Object Prototypes and how do we use them in JavaScript?",
                "description": "<p>In JavaScript everything is an Object. So whenever we create an function, there is a one object which is created for that function. But actually there is another object which is created which is known as the <em>Prototype</em> object.<br><br>Now, let's look how to create an function using prototype and the benefit of it. The below code have two function <em>haveFun</em> and <em>drinkBreak</em>. The function <em>haveFun</em> is an normal function inside the Constructor function. The function <em>drinkBreak</em> is created outside and added to the Prototype Object using it's reference prototype.<br><br><img src='./assets/js/functionprototype.jpg'><br><br>Both the function seems to be doing the same thing, then what's the benefit.<br>The benefit of declaring function using prototype is that it's created once in the Prototype object. So, now whenever we create a new instance of the Constructor function the function is not created again. As in the below screenshot, you can see that <strong>emp1</strong> and <strong>emp2</strong> both have <strong>name</strong> and <strong>haveFun</strong>. But the <strong>drinkBreak</strong> is inside the <strong>__proto__</strong>, which is a reference to Prototype object.<br><br><img src='./assets/js/functionprototype1.jpg'></p>"
            },
            {
                "name": "What is memoization?",
                "description": "<p>Memoization is a form of caching where the return value of a function is cached based on its parameters. If the parameter of that function is not changed, the cached version of the function is returned.<br>Let’s understand memoization, by converting a simple function to a memoized function: <br><br><img src='./assets/js/memiozation.png'></p>"
            },
            {
                "name": "Explain recursion in JavaScript?",
                "description": "<p>Recursion is a technique for iterating over an operation by having a function call itself repeatedly until it arrives at a result.<br>Now, in recursive function there are two parts. One is <strong>termination condition</strong> and other is the <strong>recursion</strong> itself. &nbsp;The termination condition is very important or else the recursion never stops and goes into infinite loop.<br><br>Let consider the below simple example to add numbers from the current passed number backwards till 1. Say we pass 3, then 3+2+1 = 6. In the below example <em>If(n≤0)</em> is the termination condition and <em>return n + add(n-1);</em> is the recursion.<br><br><img src='./assets/js/recursive.jpg'><br><br>The recursion works as shown in the diagram below.<br>It works like loop, so the first call will go to recursion part and give “3 + add(2)”.<br><br>Now the add(2) will be called and will be expended into “2 + add(1)”.<br>After that add(1) will be called and expanded into “1 + add(0)”.<br><br>Finally the add(0) will trigger the termination condition <em>If(n≤0)&nbsp;</em>and produce 0.<br>After this everything will be added 3 + 2 + 1 + 0 to give 6.<br><br><img src='./assets/js/recursiveoutput.jpg'></p>"
            },
            {
                "name": "What are constructor functions in JavaScript?",
                "description": "<p>In JavaScript, a constructor gets called when you try to create an object using the new keyword. The purpose of a constructor is <b>If we want to create multiple objects having similar properties and methods, constructor functions are used.</b>.<br><br><img src='./assets/js/constructor.png'></p>"
            },
            {
                "name": "How to make variables private in Constructor functions?",
                "description": "<p>Now, we implement the same in JavaScript using Closures. We have two closure functions <strong>setName</strong> and <strong>getName</strong> which are basically “setters” and “getters”. Now, the variable <strong>_name</strong> is private and cannot be accessed outside the function by <em>person._name</em> and we can access it only by <em>person.getName()</em><br><br><img src='./assets/js/privatevarconstructor.jpg'></p>"
            },
            {
                "name": "What is DOM?",
                "description": "<ul><li>DOM stands for Document Object Model. &nbsp;DOM is a programming interface for HTML and XML documents.</li><li>When the browser tries to render an HTML document, it creates an object based on the HTML document called DOM. Using this DOM, we can manipulate or change various elements inside the HTML document.</li></ul>"
            },
            {
                "name": "List all DOM events ",
                "description": "<ul><li><strong>onblur</strong> - The onblur event occurs when an HTML element loses focus. event is often used on input fields. event is often used with form validation (when the user leaves a form field).</li><li><strong>onchange</strong> - The onchange event occurs when the value of an HTML element is changed.  This event is similar to the oninput event. The difference is that the oninput event occurs immediately after the value of an element has changed, while onchange occurs when the element loses focus, after the content has been changed. The other difference is that the onchange event also works on &lt;select&gt; elements.</li><li><strong>onclick</strong> - The onclick event occurs when the user clicks on an HTML element.</li><li><strong>oncontextmenu</strong> - The oncontextmenu event occurs when the user right-clicks an HTML element to open the context menu.</li><li><strong>onfocus, onfocusin</strong> - The onfocus event occurs when an element gets focus. This event is often used on input fields.</li><li><strong>onfocusout</strong> - The onfocusout event occurs when an element looses focus. This event is often used on input fields. This event is often used with form validation (when the user leaves a form field).</li><li><strong>oninput</strong> - The oninput event occurs when an element gets user input. This event occurs when the value of an &lt;input&gt; or &lt;textarea&gt; element is changed. This event is similar to the onchange event. The difference is that the oninput event occurs immediately after the value of an element has changed, while onchange occurs when the element loses focus, after the content has been changed. The other difference is that the onchange event also works on &lt;select&gt; elements.</li><li><strong>onkeydown</strong> - The onkeydown event occurs when the user presses a key on the keyboard.</li><li><strong>onkeyup</strong> - The onkeyup event occurs when the user releases a key on the keyboard.</li><li><strong>onload</strong> - The onload event occurs when an object has been loaded. onload is most often used within the <body> element to execute a script once a web page has completely loaded all content (including images, script files, CSS files, etc.). The onload event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.</li><li><strong>onscroll</strong> - The onscroll event occurs when an element's scrollbar is being scrolled. use the CSS overflow style property to create a scrollbar for an element.</li><li><strong>onselect</strong> - The onselect event occurs after some text has been selected in an element. The onselect event is mostly used on &lt;input type=\"text\"&gt; or &lt;textarea&gt; elements.</li></ul>"
            },
            {
                "name": "Difference between DOMContentLoaded and load Events",
                "description": "<p>These two events <strong>DOMContentLoaded</strong> and <strong>load</strong> are used to check when a webpage has loaded completely. Still, there are some factors that determine the preference of one over the other.<br><br><strong>DOMContentLoaded</strong> event gets executed once the basic HTML document is loaded and its parsing has taken place. This event doesn’t wait for the completion of the loading of add-ons such as stylesheets, sub-frames and images/pictures.<br><br><img src='./assets/js/dom.png'><br><br><strong>Advantages of using DOMContentLoaded event:</strong></p><ul><li>It helps in improving user experience as it shows messages or content much faster.</li><li>It takes lesser time in loading the page.</li></ul><br><br><p><strong>load</strong> event performs its execution differently. This event gets completed once all the components i.e. DOM hierarchy along with associated features of a webpage such as CSS files, JavaScript files, images/pictures, and external links are loaded. So basically, the load event helps in knowing when the page has fully-loaded.<br><br><img src='./assets/js/load.png'><br><br><strong>Advantages of using load event:</strong></p><ul><li>This event helps in knowing when all the components of the webpage is loaded.</li></ul>"
            },
            {
                "name": "Draw a Simple JavaScript Dom (Document Object Model).",
                "description": "<p><img src='./assets/js/jsdom.png'></p>"
            },
            {
                "name": "What do you mean by Browser Object Model (BOM)?",
                "description": "<p>Browser Object Model is known as BOM. It allows users to interact with the browser. A browser's initial object is a window. As a result, you may call all of the window's functions directly or by referencing the window. The document, history, screen, navigator, location, and other attributes are available in the window object.</p>"
            },
            {
                "name": "Why Browser Object Model (BOM) introduced in JavaScript?",
                "description": "<p>To interact with the browser, the Browser Object Model has some properties and methods. Some examples include, the height and width of the window/ screen.<br><br>Some of its methods include:</p><ul><li>window.open() – To open a new window</li><li>window.close() – To close the current window</li><li>window.moveTo() – To move the current window</li><li>window.resizeTo() – To resize the current window</li></ul>"
            },
            {
                "name": "Which method is used to retrieve a character from a certain index?",
                "description": "<p>The charAt() function of the JavaScript string finds a char element at the supplied index. The index number begins at 0 and continues up to n-1, Here n is the string length. The index value must be positive, higher than, or the same as the string length.</p>"
            },
            {
                "name": "What are arrow functions?",
                "description": "<p>Arrow functions were introduced in the ES6 version of javascript. They provide us with a new and shorter syntax for declaring functions. Arrow functions can only be used as a function expression.<br><br>Let’s compare the normal function declaration and the arrow function declaration in detail:<br><br><img src='./assets/js/arrow.png'><br><br>Arrow functions are declared without the function keyword. If there is only one returning expression then we don’t need to use the return keyword as well in an arrow function as shown in the example above. Also, for functions having just one line of code, curly braces { } can be omitted.<br><br><img src='./assets/js/arrow1.png'><br><br>If the function takes in only one argument, then the parenthesis () around the parameter can be omitted as shown in the code above.<br><br><img src='./assets/js/arrow2.png'><br><br>The biggest difference between the traditional function expression and the arrow function is the handling of <strong>this </strong>keyword. By general definition, <strong>this </strong>keyword always refers to the object that is calling the function. As you can see in the code above, <strong>obj1.valueOfThis() </strong>returns obj1 since <strong>this </strong>keyword refers to the object calling the function.<br><br>In the arrow functions, there is no binding of <strong>this </strong>keyword. <strong>This</strong> keyword inside an arrow function does not refer to the object calling it. It rather inherits its value from the parent scope which is the window object in this case. Therefore, in the code above, <strong>obj2.valueOfThis() </strong>returns the window object.</p>"
            },
            {
                "name": "What advantages are using arrow functions?",
                "description": "<ul><li><em>Compactness</em>: Arrow functions are easier to read and write.</li><li><em>Clarity</em>: When almost everything is an arrow function, any regular function immediately sticks out for defining the scope. A developer can always look up the next-higher function statement to see what this <code>this </code>object is.</li><li><em>Scope safety</em>: Until arrow functions, every new function defined its own value (a new object in the case of a constructor, undefined in strict mode function calls, the base object if the function is called as an \"object method\", etc.). An arrow function does not create its own this, the <code>this </code>value of the enclosing execution context is used.</li></ul>"
            },
            {
                "name": "When should you NOT use arrow functions in ES6 ",
                "description": "<p>Arrow functions should NOT be used:</p><ul><li>When we want function hoisting - as arrow functions are anonymous.</li><li>When we want to use this/arguments in a function - as arrow functions do not have this/arguments of their own, they depend upon their outer context.</li><li>When we want to use named function - as arrow functions are anonymous.</li><li>When we want to use function as a constructor - as arrow functions do not have their own this.</li><li>When we want to add function as a property in object literal and use object in it - as we can not access this (which should be object itself).</li></ul>"
            },
            {
                "name": "Prototypal Design Pattern?",
                "description": "<p>The Prototype Pattern produces different objects, but instead of returning uninitialized objects, it produces objects that have values replicated from a template – or sample – object. Also known as the Properties pattern, the Prototype pattern is used to create prototypes.<br><br>The introduction of business objects with parameters that match the database's default settings is a good example of where the Prototype pattern comes in handy. The default settings for a newly generated business object are stored in the prototype object.<br><br>The Prototype pattern is hardly used in traditional languages, however, it is used in the development of new objects and templates in JavaScript, which is a prototypal language.</p>"
            },
            {
                "name": "What is Prototypal Inheritance?",
                "description": "<p>Prototypal inheritance is to add new capabilities to a constructor function using Prototype.<br>Let's first understand what are Constructor functions. They are basically JavaScript way to implement the concept of Classes.<br>Let's consider the example below, where we have a “Car” constructor function. In it we have a “model”, which we are also returning by getModel(). Now we can create a new instance of it by using the “new” keyword. Each instance will have its own “this” and have its own getModel().<br><br><img src='./assets/js/functionprototype2.jpg'><br><br>Now, the problem is that every time we create a new instance we get a new copy of <em>getModel().</em> Suppose we have 100 instances, then we will have 100 copies.<br><br>In JavaScript as you know everything is an Object. Whenever a function is created there are two object one is the function object another is the prototype object. Now to access the <strong>Prototype</strong> object we have a property on the function object also known as “<strong>prototype</strong>”.<br><br>We should somehow move the logic for&nbsp;<em>getModel()</em> outside our Constructor function and that is where the concept of Prototype helps.<br><br><img src='./assets/js/functionprototype3.jpg'><br><br>We get the same result and this is known as <strong>Prototypal Inheritance</strong>. Also, each new instance don’t have its own getModel(), which we can see in below console log.<br><br><img src='./assets/js/functionprototype4.jpg'></p>"
            },
            {
                "name": "JavaScript Design Patterns?",
                "description": "<p>JavaScript design patterns are repeatable approaches for errors that arise sometimes when building JavaScript browser applications. They truly assist us in making our code more stable.<br><br>They are divided mainly into 3 categories&nbsp;</p><ul><li><strong>Creational Design Pattern: </strong>The object generation mechanism is addressed by the JavaScript Creational Design Pattern. They aim to make items that are appropriate for a certain scenario.</li><li><strong>Structural Design Pattern: </strong>The JavaScript Structural Design Pattern explains how the classes and objects we've generated so far can be combined to construct bigger frameworks. This pattern makes it easier to create relationships between items by defining a straightforward way to do so.</li><li><strong>Behavioral Design Pattern: </strong>This design pattern highlights typical patterns of communication between objects in JavaScript. As a result, the communication may be carried out with greater freedom.</li></ul>"
            },
            {
                "name": "What is the rest parameter and spread operator?",
                "description": "<p>Both rest parameter and spread operator were introduced in the ES6 version of javascript.<br><br><strong>Rest parameter ( … ):</strong></p><ul><li>It provides an improved way of handling the parameters of a function.</li><li>Using the rest parameter syntax, we can create functions that can take a variable number of arguments.</li><li>Any number of arguments will be converted into an array using the rest parameter.</li><li>It also helps in extracting all or some parts of the arguments.</li><li>Rest parameters can be used by applying three dots (...) before the parameters.</li></ul><br><img src='./assets/js/rest.png'><br><br><strong>**Note- Rest parameter should always be used at the last parameter of a function:</strong></p><br><br><p><strong>Spread operator (…): </strong>Although the syntax of the spread operator is exactly the same as the rest parameter, the spread operator is used to spreading an array, and object literals. We also use spread operators where one or more arguments are expected in a function call.<br><br><img src='./assets/js/spread.png'><br><br><strong>***Note</strong> - Key differences between rest parameter and spread operator:</p><ul><li>Rest parameter is used to take a variable number of arguments and turns them into an array while the spread operator takes an array or an object and spreads it</li><li>Rest parameter is used in function declaration whereas the spread operator is used in function calls.</li></ul>"
            },
            {
                "name": "What are the benefits of using spread syntax in ES6 and how is it different from rest syntax?",
                "description": "<p>ES6's spread syntax is very useful when coding in a functional paradigm as we can easily create copies of arrays or objects without resorting to <code>Object.create</code>, <code>slice</code>, or a library function. This language feature is used often in Redux and rx.js projects.<br><br><img src='./assets/js/es6spread.png'><br><br>ES6's rest syntax offers a shorthand for including an arbitrary number of arguments to be passed to a function. It is like an inverse of the spread syntax, taking data and stuffing it into an array rather than unpacking an array of data, and it works in function arguments, as well as in array and object destructuring assignments.<br><br><img src='./assets/js/es6rest.png'></p>"
            },
            {
                "name": "What are promises JavaScript?",
                "description": "<p>They are mainly used to do asynchronous task like calling a REST api and getting the result back. So, these network calls takes time.<br><br>When the network call is been made, the promise is in <strong>pending state</strong> which means promise has neither been fulfilled nor been rejected, it is in the pending state.<br><br>Once the network call is successful the promise returns a resolve function which means the async operation is completed and in case if it fails it returns reject function meaning operation has failed.<br><br>The resolve is captured by the .then() callback function and reject captured by .catch() callback function.<br><br>Optionally we can also use the fourth state called settled state which schedules a function to be called when the promise is settled i.e. either fulfilled or rejected. The settled is captured by the .finally() callback function</p>"
            },
            {
                "name": "What are classes in javascript?",
                "description": "<p>Introduced in the ES6 version, classes are nothing but syntactic sugars for constructor functions. They provide a new way of declaring constructor functions in javascript.<br><br>Key points to remember about classes:<ul><li>Unlike functions, classes are not hoisted. A class cannot be used before it is declared.</li><li>A class can inherit properties and methods from other classes by using the extend keyword.</li><li>All the syntaxes inside the class must follow the strict mode(‘use strict’) of javascript. An error will be thrown if the strict mode rules are not followed.</li></ul><br><img src='./assets/js/class.png'></p>"
            },
            {
                "name": "What are generator functions?",
                "description": "<p>Introduced in ES6 version, generator functions are a special class of functions.<br><br><strong>They can be stopped midway and then continue from where it had stopped.</strong><br><br>Generator functions are declared with the <strong>function*</strong> keyword instead of the normal <strong>function</strong> keyword<br><br><pre>function* genFunc(){<br>&nbsp;&nbsp;&nbsp;&nbsp;// Perform operation<br>}</pre><br><br>In normal functions, we use the <strong>return</strong> keyword to return a value and as soon as the return statement gets executed, the function execution stops:<br><br> <pre> function normalFunc(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return 22;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(2); // This line of code does not get executed<br>}</pre> <br><br>In the case of generator functions, when called, they do not execute the code, instead they return a <strong>generator object</strong>. This generator object handles the execution<br><br><pre> function* genFunc(){<br>&nbsp;&nbsp;&nbsp;&nbsp;yield 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;yield 4;<br>}<br>genFunc(); // Returns Object [Generator]{}</pre><br><br>The generator object consists of a method called <strong>next()</strong> , this method when called, executes the code until the nearest <strong>yield</strong> statement, and returns the yield value.<br><br><img src='./assets/js/generator.png'><br><br>As you can see in the code above, the last line returns done:true , since the code reaches the return statement.</p>"
            },
            {
                "name": "Explain WeakSet in javascript.",
                "description": "<ul><li>Weakset contains only objects and no other type.</li><li>An object inside the weakset is referenced weakly. This means, that if the object inside the weakset does not have a reference, it will be garbage collected.</li><li>Unlike Set, WeakSet only has three methods, <strong>add() </strong>, <strong>delete() </strong>and <strong>has() </strong>.</li></ul><br><img src='./assets/js/weakset.png'>"
            },
            {
                "name": "Differences between WeakSet and Set",
                "description": "<p>The main difference is that references to objects in Set are strong while references to objects in WeakSet are weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it. Other differences are,</p><ol><li>Sets can store any value Whereas WeakSets can store only collections of objects</li><li>WeakSet does not have size property unlike Set</li><li>WeakSet does not have methods such as clear, keys, values, entries, forEach.</li><li>WeakSet is not iterable.</li></ol>"
            },
            {
                "name": "Explain WeakMap in javascript.",
                "description": "<p>In javascript, Map is used to store key-value pairs. The key-value pairs can be of both primitive and non-primitive types. WeakMap is similar to Map with key differences:</p><ul><li>The keys and values in weakmap should always be an object.</li><li>If there are no references to the object, the object will be garbage collected.</li></ul><br><img src='./assets/js/weakmap.png'>"
            },
            {
                "name": "Differences between WeakMap and Map",
                "description": "<p>The main difference is that references to key objects in Map are strong while references to key objects in WeakMap are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it. Other differences are,</p><ol><li>Maps can store any key type Whereas WeakMaps can store only collections of key objects</li><li>WeakMap does not have size property unlike Map</li><li>WeakMap does not have methods such as clear, keys, values, entries, forEach.</li><li>WeakMap is not iterable.</li></ol>"
            },
            {
                "name": "Explain Destructuring in ES6?",
                "description": "<p>Destructuring is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables. You can also handle nested structure by using nested destructuring syntax.<br><br><strong>Object Destructuring - You use an object literal on the left-hand-side of an assignment expression</strong> for object destructuring.<br><br><img src='./assets/js/objdestructure2.jpg'><br><br><strong>Nested Object Destructuring</strong><br>If there is nested object as in below case, we can destructure it by adding it's value to another object syntax<br><br><img src='./assets/js/objdestructure3.jpg'><br><br><strong>Array Destructuring</strong><br>Array destructuring is similar to object destructuring, but here instead of keys you assign any variable.<br><br><img src='./assets/js/objdestructure4.jpg'><br><br><strong>Skipping Items</strong><br>It is possible to skip items in array destructuring by omitting items with comma(,).<br><br><img src='./assets/js/objdestructure5.jpg'></p></div>"
            },
            {
                "name": "Difference between prototypal and classical inheritance",
                "description": "<p>Programers build objects, which are representations of real-time entities, in traditional OO programming. Classes and objects are the two sorts of abstractions. A class is a generalization of an object, whereas an object is an abstraction of an actual thing. A Vehicle, for example, is a specialization of a Car. As a result, automobiles (class) are descended from vehicles (object).<br><br>Classical inheritance differs from prototypal inheritance in that classical inheritance is confined to classes that inherit from those remaining classes, but prototypal inheritance allows any object to be cloned via an object linking method. Despite going into too many specifics, a prototype essentially serves as a template for those other objects, whether they extend the parent object or not.</p>"
            },
            {
                "name": "What is Temporal Dead Zone?",
                "description": "<p>Temporal Dead Zone is a behaviour that occurs with variables declared using <strong>let </strong>and <strong>const </strong>keywords. It is a behaviour where we try to access a variable before it is initialized. Examples of temporal dead zone:<br><br><img src='./assets/js/deadZone.png'><br><br><strong>Example 2</strong><br><br><img src='./assets/js/deadZone1.png'><br><br>In the code above, both in the global scope and functional scope, we are trying to access variables that have not been declared yet. This is called the <strong>Temporal Dead Zone</strong>.</p>"
            },
            {
                "name": "Difference between Async/Await and Generators usage to achieve the same functionality.",
                "description": "<ul><li>Generator function are executed yield by yield i.e one yield-expression at a time by its iterator (the next method) where as Async-await, they are executed sequential await by await.</li><li>Async/await makes it easier to implement a particular use case of Generators.</li><li>The return value of Generator is always {value: X, done: Boolean} where as for Async function it will always be a promise that will either resolve to the value X or throw an error.</li><li>Async function can be decomposed into Generator and promise implementation like:</li></ul><p><img src='./assets/js/asyncAwaitGenerator.png'></p>"
            },
            {
                "name": "What is the role of deferred scripts in JavaScript?",
                "description": "<p>The processing of HTML code while the page loads are disabled by nature till the script hasn't halted. Your page will be affected if your network is a bit slow, or if the script is very hefty. When you use Deferred, the script waits for the HTML parser to finish before executing it. This reduces the time it takes for web pages to load, allowing them to appear more quickly.</p>"
            },
            {
                "name": "What is the object and array type?",
                "description": "<p>The object type refers to a compound value where you can set properties (named locations) that each hold their own values of any type.<br><br><img src='./assets/js/object.png'><br><br>An array is an object that holds values (of any type) not particularly in named properties/keys, but rather in numerically indexed positions:<br><br><img src='./assets/js/array.png'></p>"
            },
            {
                "name": "What is event bubbling and capturing in JavaScript?",
                "description": "<p>For this we need to understand Event flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object. <br><br>We will first see <strong>Event Bubbling</strong>. - In this the event propagation, the event first triggers on the innermost target element .i.e. the child element first, and then successively triggers on the ancestors i.e. parents element in the order of the elements nested hierarchy till it reaches the outermost DOM element. <br><br><strong>It is totally vice-versa of Event Bubbling</strong><br><br>Where as in <strong>Event Capturing</strong>. - the event propagation, the event first triggers on the outermost element .i.e. the parent element first, and then successively triggers on the descendants i.e. child element in the order of the elements nested hierarchy till it reaches the innermost DOM element.</p>"
            },
            {
                "name": "Explain async await in JavaScript?",
                "description": "<p>The <code>Async</code> keyword is short for 'Asynchronous' and in always positioned before a function. This is done to indicate an <code>Async</code> function and more importantly, that the function being specified as <code>Async</code> will always return a promise.<br><br>The body of an <code>Async</code> function can contain zero or more <code>Await</code> keywords. The difference between an <code>Async</code> function with one or more <code>Await</code> keywords and one without any <code>Await</code> keywords is that the non <code>Await</code> function will behave in a synchronous manner while the one containing one or more <code>Await</code> keywords will act in an asynchronous way.<br><br>Next, we have the <code>Await</code> keyword. This keyword is only valid inside <code>Async</code> functions and it primarily serves to make JavaScript wait until the promise inside the <code>Async</code> function settles and returns a result. This single keyword is responsible for converting synchronous functions into asynchronous ones, just by the act of allowing other processes to run while awaiting a value from a promise(no pun intended :) ). So note that it only makes the promise containing code block wait, while the rest of the program executes normally.</p>"
            },
            {
                "name": "Explain Promise.all with async-await?",
                "description": "<p>The <em>Promise.all &nbsp;</em>method returns a single Promise that resolves when all of the promises in the <em>iterable</em> argument have resolved or when the <em>iterable</em> argument contains no promises. It rejects with the reason of the first promise that rejects.<br><br><img src='./assets/js/promiseall.jpg'><br><br>We should use <em>Promise.all</em> in only cases like above, where the result of one Promise is not dependent on other promise.</p>"
            },
            {
                "name": "Explain nested promises JavaScript?",
                "description": "<p>Nested promises are set of promises in which , the result of one promise we call another in the .then statement. It is very useful in practical applications, where the result of fetch from an API endpoint will result in sending the data to another endpoint. Nested promises can also be done with callback functions, but the code get complicated soon.<br><br>Let's look at an example of nested promises. Here we have three functions which return promises- <em>coinTossed, gotCoinTossedResult and happyTeam</em>. Now only the <em>coinTossed</em> is returning resolve() or reject() depending on random number. The other two functions are returning only resolve() for simplicity sake.<br><br>Now, when the <em>coinTossed</em> function is run and return a resolve(), then the immediate .then block will be run or else we will go to the .catch block. In the .then we are returning the next <em>gotCoinTossedResult&nbsp;</em>and in its .then we are returning the <em>happyTeam</em>. We are passing the message from one function to other, so it will be appended.<br><br><img src='./assets/js/cointoss.png'></p>"
            },
            {
                "name": "How do we handle errors in async-await function?",
                "description": "<p>In Promises we handle any error or reject in the .catch block. Let's look at the below example, where we are sending reject() from Promise inside a function expression. So, now the error will be caught by the .catch block and then we are displaying the same in console log.<br><br><strong>try…catch block available in JavaScript</strong><br><br><img src='./assets/js/tryCatch.png'></p>"
            },
            {
                "name": "What are the limitations of JavaScript?",
                "description": "<ol> <li><strong>Writing files on server</strong> - JavaScript cannot directly write files on server. However, they can do this using server-side script</li><li><strong>Disable JavaScript</strong> - Due to security reasons, every web browser provides an option to disable JavaScript.</li><li><strong>Networking</strong> - It cannot be used for Networking applications.</li><li><strong>Browser Compatibility</strong> - Applications may behave differently in different web browsers. To support all modern browsers, you need to write cross browser codes.</li><li><strong>Security</strong> - Since the code executes on client's computer, the chances are high for vulnerability and can be exploited for malicious purposes</li><li><strong>Databases</strong> - JavaScript cannot access databases. You need AJAX and a server-side script for this.</li></ol>"
            },
            
            {
                "name": "Different ways to make an object non-extensible?",
                "description": "<p>You can mark an object non-extensible in 3 ways,</p><ol> <li><strong>Object.freeze()</strong> - simply converts an object passed as the argument into a frozen state. An object called by this method can not have any further changes on it. <ul> <li>Cannot add new properties.</li><li> Cannot remove existing properties.</li><li> Cannot change existing property values.</li><li> Cannot reconfigure any existing property. writable and configurable are set to false.</li><li> Cannot change its prototype.</li></ul> <p> Trying to make any changes mentioned above after an object being frozen will fail and will throw errors in strict mode.<br><br><strong><em>Object.isFrozen()</em></strong> is an Object method to check if an object is frozen by passing the object as the argument, where the return type is a boolean</p></li><br><li> <strong>Object.seal() </strong>simply converts an object passed as the argument into a sealed state. An object called by this method can not have any new properties being added. But it <strong>can change</strong> existing property values as long as <em>writable</em> metadata is true. <ul> <li>Cannot add new properties.</li><li> Cannot remove existing properties.</li><li> Cannot reconfigure any existing property.</li><li> Cannot convert a data property to accessor property or vice versa.</li></ul> <p><strong><em>Object.isSealed()</em></strong> is an Object method to check if an object is sealed by passing the object as the argument, where the return type is a boolean</p></li><br><li> <strong>Object.preventExtensions() </strong>simply converts an object passed as the argument into a non-extensible state. An object called by this method can not have any new properties being added. This method inherits functionality from its superset object.seal. Hence, it <strong>can change</strong> existing property values as long as <em>writable</em> metadata is true. In contrast to sealed objects, non-extensible objects can be deleted or reconfigured. <p><strong><em>Object.isExtensible()</em></strong> is an Object method to check if an object is extensible by passing the object as the argument.</p></li></ol>"
            },
            {
                "name": "Difference between const vs Object.freeze()",
                "description": "<p>In <strong>const</strong> reassignment of the variable is not allowed but the value referenced by the const variable can still be changed. <br><br>#Ex. Value is Immutable<br> <img src='./assets/js/const-object.png'> <br><br>#Binding is Mutable<br> <img src='./assets/js/const-object1.png'><br><br>#Mutable binding with object<br> <img src='./assets/js/const-object2.png'></p><br><br><p><strong>Object.freeze()</strong> prevents modification or extension to the existing value of an object. <br><br>Ex. Ignoring the value modification to an object<br> <img src='./assets/js/const-object3.png'> <br><br>#But the same work on binding<br> <img src='./assets/js/const-object4.png'></p>"
            },
            {
                "name": "Difference between Object.values() vs Object.entries()",
                "description": "<p><code>Object.values()</code> takes an object and returns an array with the values, in the same order that a for…in loop function would give us. Object.values doesn’t follow the prototype chain and only iterates over the value that are directly on the provided object.<br><img src='./assets/js/object-value.png'><br><br><strong>Object.entries()</strong> returns an array with arrays of key-value pairs:<br><img src='./assets/js/object-entries.png'></p>"
            },
            {
                "name": "Difference between native, host and user objects?",
                "description": "<ul><li>Native objects are objects that are part of the JavaScript language defined by the ECMAScript specification, such as <code>String</code>, <code>Math</code>, <code>RegExp</code>, <code>Object</code>, <code>Function</code>, etc.</li><li>Host objects are provided by the runtime environment (browser or Node), such as <code>window</code>, <code>XMLHTTPRequest</code>,<code>DOM</code> nodes etc.</li><li><code>User objects</code> are objects defined in the javascript code. For example, User object created for profile information</li></ul>"
            },
            {
                "name": "'Deep-Freeze' object in JavaScript?",
                "description": "<p>To make an object immutable, we generally use utilize <code>Object.freeze()</code>, which prevents the addition of new properties and prevent deletion and changes to existing properties to some extent. However, while <code>Object.freeze()</code> provides somewhat kind of a solution, it only handles the problem to the next nesting level, as in reality it performs a shallow freeze during its process. This means that properties that are objects or arrays can still be mutated:<br><br><img src='./assets/js/freezeexample.png'><br><br>Here to solve the issue we can use recursion method, by checking if each property is itself an object using, <code>Object.isFrozen()</code> method which is returning <code >false</code>, then apply <code>Object.freeze()</code> to it:<br><br><img src='./assets/js/deepfreezeexample.png'></p>"
            },
            {
                "name": "How do you check if a key exists in an object?",
                "description": "<ul> <li>Traditional way <br><pre>var user = {name:'test'} <br>//Test condition <br>user.name === undefined //Output <br> true</pre> </li><li> The <strong><code>hasOwnProperty()</code></strong> method returns a boolean indicating whether the object has the specified property or not in it. <br><pre>object_name.hasOwnProperty('key_name')</pre> </li><li>Using <code>'in'</code> operator - <br><pre>!(keyName in objectName);</pre></li></ul>"
            },
            
            {
                "name": "instanceof / typeof operator in JavaScript",
                "description": "<p>If you want to check the type of an object at runtime, then use the instanceof operator where the result is a boolean.<br><br>where as typeof operator is used to find the data type of a JavaScript variable where the result is a string.</p>"
            },
            {
                "name": "String Reference",
                "description": "<ul> <li><strong>charAt(x)</strong> - This function will return the character at the x position within the string.<br><img src='./assets/js/stringcharat.png'><br><br></li><li><strong>charCodeAt(x)</strong> - This function will return the unicode value of the character at position ‘x’ within the string.<br><img src='./assets/js/stringchartat.png'><br><br></li><li><strong>concat(v1,v2..)</strong> - This function combines one or more strings(argv1,v2 etc) into existing one.<br><img src='./assets/js/stringconcat.png'><br><br></li><li><strong>fromCharcode(c1,c2)</strong> - This function will return a string created by using specified sequence of unicode values(argc1,c2).<br><img src='./assets/js/stringfromcharcode.png'><br><br></li><li><strong>indexOf(substr, [start])</strong> - Searches and (if found) returns the index number of the searched character or substring within the string. If not found, -1 is returned. “Start” is an optional argument specifying the position within string to begin the search. Default is 0.<br><img src='./assets/js/stringindexof.png'><br><br></li><li><strong>lastIndexOf(substr, [start])</strong> - Searches and (if found) returns the index number of the searched character or substring within the string. Searches the string from end to the beginning. If not found, -1 is returned. “Start” is an optional argument specifying the position within string to begin the search. Default is string.length-1.<br><img src='./assets/js/stringlastindexof.png'><br><br></li><li><strong>match(regexp)</strong> - Executes a search for a match within a string based on a regular expression. It returns an array of information or null if no match is found.<br><img src='./assets/js/stringmatch.png'><br><br></li><li><strong>replace(regexp/substr, replacetext)</strong> - Searches and replaces the regular expression (or sub string) portion (match) with the replaced text instead.<br><img src='./assets/js/stringreplace.png'><br><br></li><li><strong>search(regexp)</strong> - Tests for a match in a string. It returns the index of the match, or -1 if not found.<br><img src='./assets/js/stringsearch.png'><br><br></li><li><strong>slice(start, [end])</strong> - This function returns a substring of the string based on the “start” and “end” index arguments, NOT including the “end” index itself. “End” is optional, and if none is specified, the slice includes all characters from “start” to end of the string.<br><img src='./assets/js/stringslice.png'><br><br></li><li><strong>split(delimiter, [limit])</strong> - This will split a string into many according to the specified delimiter, and returns an array containing each element. The optional “limit” is an integer that lets you specify the maximum number of elements to return.<br><img src='./assets/js/stringsplit.png'><br><br></li><li><strong>substr(start, [length])</strong> - This function returns the characters in a string beginning at “start” and through the specified number of characters, “length”. “Length” is optional, and if omitted, up to the end of the string is assumed.<br><img src='./assets/js/stringsubstr.png'><br><br></li><li><strong>substring(from, [to])</strong> - It returns the characters in a string between “from” and “to” indexes, NOT including “to” itself. “To” is optional, and if omitted, up to the end of the string is assumed.<br><img src='./assets/js/stringsubstring.png'><br><br></li><li><strong>toLowerCase()</strong> - This will return the string with all of its characters converted to lowercase.<br><img src='./assets/js/stringlowercase.png'><br><br></li><li><strong>toUpperCase()</strong> - This will return the string with all of its characters converted to uppercase.<br><img src='./assets/js/stringuppercase.png'><br><br></li><li><strong>includes()</strong> - It is used to check whether a string contains the specified string or characters.<br><img src='./assets/js/stringincludes.png'><br><br></li><li><strong>endsWith()</strong> - This function checks whether a string ends with specified string or characters.<br><img src='./assets/js/stringendwith.png'><br><br></li><li><strong>repeat()</strong> - This returns a new string with a specified number of copies of an existing string.<br><img src='./assets/js/stringrepeat.png'><br><br></li><li><strong>valueOf()</strong> - It is used to return the primitive value of a String object.<br><img src='./assets/js/stringvalueof.png'><br><br></li><li><strong>trim()</strong> - This function removes whitespace from both ends of a string.<br><img src='./assets/js/stringtrim.png'><br><br></li></ul>"
            },
            {
                "name": "toString() vs join()?",
                "description": "<p>array.toString() and array.join() does the same thing of converting an array into a string. Since toSting() does not accept any arguments its is less preferred while in join() one can pass arguments. Ex. [1,2,3].join(', ')</p>"
            },
            {
                "name": "Explain join() vs concat() in Javascript",
                "description": "<p>To join two or more strings, use the JavaScript <code>string.concat(string1, string2, ..., stringX)</code> method. A new string is returned with the joined strings.<br><br>The <code>array.join(separator)</code> method returns an array as a string. The elements will be separated by a specified separator. The default separator is comma (,).<br><br><code>join()</code> does not change the original array.</p>"
            },
            {
                "name": "Remove whitespace from both sides of a string in JavaScript",
                "description": "<p>The <code>trim()</code> method is used to remove whitespace from both sides of a string.<br><br><pre>var myStr = \" &nbsp; &nbsp; Cup of tea! &nbsp; &nbsp;\";<br>myStr.trim( ) <br><br>// Output - 'Cup of tea!'</pre>"
            },
            {
                "name": "How do you make first letter of the string in an uppercase?",
                "description": "<img src='./assets/js/first-letter-capital.png'>"
            },
            {
                "name": "How to convert string to title case with javascript?",
                "description": "<img src='./assets/js/first-letter-capital1.png'>"
            },
            {
                "name": "How do you check whether a string contains a substring?",
                "description": "<p>There are 3 possible ways to check whether a string contains a substring or not,</p><ul><li>Using includes(): String.includes() method to test a string contains a substring<br><img src='./assets/js/substring.png'></li><li>Using indexOf(): String.indexOf() which returns the index of a substring. If the index value is not equal to -1 then it means the substring exist in the main string.<br><img src='./assets/js/substring1.png'></li><li>Using RegEx: The advanced solution is using Regular expression's test method(RegExp.test), which allows for testing for against regular expressions<br><img src='./assets/js/substring2.png'></li></ul>"
            },
            {
                "name": "Search for a string in a string with JavaScript (search() / includes())",
                "description": "<p>To search for a string in a string, use the search() method. The method searches a string for a specified value. The returned value is the position of the match. However, -1 is returned if the match isn’t found.<br><br>Where as the <code>includes()</code> method returns true if a string contains a specified string, otherwise false</p>"
            },
            {
                "name": "Difference between substr() vs substring() vs slice() in JavaScript?",
                "description": "<p>The substr() and substring() methods are simpler, yet they have some differences. The 2nd argument of the substring() method is the index to halt the search, whereas the 2nd&nbsp;parameter of substr() is the maximum length.<br><br><strong>substr() method</strong> - The substr() method returns the characters in a string beginning at the specified location. It goes through the number of characters which is specified by the user. The parameters of substr(start, len):</p><ul><li>start&nbsp;− Location start extracting characters.</li><li>length&nbsp;− The count of characters to extract.</li></ul><pre>let str = \"Hello world!\"; <br> str.substr(1, 4) <br> // Console Returns \"ello\"</pre><br><br><p><strong>substring() method</strong> - The substring() method returns subset of a string. The parameters of substring(i1, i2):</p><ul><li>i1&nbsp;– Index from where you want the substring.</li><li>i2&nbsp;− Index till when you want the substring.</li></ul><pre>let str = \"Hello world!\"; <br> str.substring(1, 4) <br> // Console Returns \"ell\"</pre>"
            },
            {
                "name": "Array Reference",
                "description": "<ul> <li><strong>map( )</strong> - This method creates a new array with the results of calling a provided function on every element in this array. <br><img src='./assets/js/arraymap.png'><br><br></li><li><strong>filter( )</strong> - This method creates a new array with only elements that passes the condition inside the provided function.<br><img src='./assets/js/arrayfilter.png'><br><br></li><li><strong>sort( )</strong> - This method is used to arrange/sort array's elements either in ascending or descending order.<br><img src='./assets/js/arraysort.png'><br><br></li><li><strong>forEach( )</strong> - This method helps to loop over array by executing a provided callback function for each element in an array.<br><img src='./assets/js/arrayforeach.png'><br><br></li><li><strong>concat( )</strong> - This method is used to merge two or more arrays and returns a new array, without changing the existing arrays.<br><img src='./assets/js/arrayconcat.png'><br><br></li><li><strong>every( )</strong> - This method checks every element in the array that passes the condition, returning true or false as appropriate.<br><img src='./assets/js/arrayevery.png'><br><br></li><li><strong>some( )</strong> - This method checks if at least one element in the array that passes the condition, returning true or false as appropriate.<br><img src='./assets/js/arraysome.png'><br><br></li><li><strong>includes( )</strong> - This method checks if an array includes the element that passes the condition, returning true or false as appropriate.<br><img src='./assets/js/arrayincludes.png'><br><br></li><li><strong>join( )</strong> - This method returns a new string by concatenating all of the array's elements separated by the specified separator.<br><img src='./assets/js/arrayjoin.png'><br><br></li><li><strong>reduce( )</strong> - <p>Reduce the values of an array to a single value (going left-to-right) and for right-to-left use reduceRight().<br>The reduce() method executes a provided function for each value of the array (from left-to-right)<br>The return value of the function is stored in an accumulator (result/total)<br><img src='./assets/js/reduce.png'><br><br></li><li><strong>find( )</strong> - This method returns the value of the first element in an array that pass the test in a testing function.<br><img src='./assets/js/arrayfind.png'><br><br></li><li><strong>findIndex( )</strong> - This method returns the index of the first element in an array that pass the test in a testing function.<br><img src='./assets/js/arrayfindindex.png'><br><br></li><li><strong>indexOf( )</strong> - This method returns the index of the first occurrence of the specified element in the array, or -1 if it is not found.<br><img src='./assets/js/arrayindexof.png'><br><br></li><li><strong>fill( )</strong> - This method fills the elements in an array with a static value and returns the modified array.<br><img src='./assets/js/arrayfill.png'><br><br></li><li><strong>slice( )</strong> - This method returns a new array with specified start to end elements.<br><img src='./assets/js/arrayslice.png'><br><br></li><li><strong>reverse( )</strong> - This method reverses an array in place. Element at last index will be first and element at 0 index will be last.<br><img src='./assets/js/arrayreverse.png'><br><br></li><li><strong>push( )</strong> - This method adds one or more elements to the end of array and returns the new length of the array.<br><img src='./assets/js/arraypush.png'><br><br></li><li><strong>pop( )</strong> - Remove an item from the end of an array and returns the item(string) which was removed from that array<br><img src='./assets/js/pop.png'><br><br></li><li><strong>shift( )</strong> - This method removes an item from the start of an array and returns the item which was removed from that array<br><img src='./assets/js/arrayshift.png'><br><br></li><li><strong>unshift( )</strong> - This method adds one or more elements to the beginning of an array and returns the new length of the array.<br><img src='./assets/js/arrayunshift.png'><br><br></li></ul>"
            },
            {
                "name": "Difference between some() vs every() in javascript",
                "description": "<p>The <code>some()</code> method checks if any of the elements in an array pass a test (provided as a function)., where as the <code>every()</code> method returns true if all elements in an array passes the test (provided as a function).<br><br><code>some()</code> executes the function once for each element in the array: which means, during the execution If it finds an array element where the function is returning a <em>true</em> value against the test condition, then some() method returns true (and does not check the remaining values), Otherwise it returns false<br><br>The <code>every()</code> method executes the function once for each element present in the array: which means, during the execution If it finds an array element where the function is returning a <em>false</em> value against the test condition, then every() method returns false (and does not check the remaining values), Otherwise it returns true<br><br><strong>Both</strong> does not execute the function for empty array elements.<br><br><strong>Both</strong> does not change the original array.</p>"
            },
            {
                "name": "How to check if an object is an array or not? (object is array)",
                "description": "<p><img src='./assets/js/arrayorobject.png'></p>"
            },
            {
                "name": "List different ways of empty array in Javascript?",
                "description": "<p>In Javascript,&nbsp;there are many ways to empty an array in Javascript, below we have listed 4 major<br><br><img src='./assets/js/emptyarray.png'></p>"
            },
            {
                "name": "How do you add an element at the begining of an array? How do you add one at the end?",
                "description": "<p><img src='./assets/jsCode/addelement.png'></p>"
            },
            {
                "name": "Remove element from an array in JavaScript (splice)",
                "description": "<p>To remove a single element from an array in JavaScript, the splice() method is used. With that you can also replace, and/or add elements in an array.<br><br>We are using the splice() method to remove a single element by setting the location from where it start, and the number of elements to be removed. Here, we have set 1, therefore only a single element will get removed:</p><pre><pre>let myArr = [1,2,3,4,5];<br>let newArr = myArr.splice(3, 1);<br>console.log(myArr);<br>console.log(newArr);<br><br>// Output <br>[1, 2, 3, 5]<br>[4]</pre>"
            },
            {
                "name": "Methods to Search Through Arrays (include, find, filter)",
                "description": "<p>The <code>.includes()</code> method returns a boolean value and is perfect for telling you whether an element exists in an array or not. It gives a simple true or false answer.<br><strong>Syntax</strong>: <code>arr.includes(valueToFind, [fromIndex]); //fromIndex is optional</code><br><strong>Example</strong>: <code>const alligator = ['thick scales', 80, '4 foot tail', 'rounded snout'];<br>alligator.includes('thick scales'); // returns true</code><br><br>The <code>.find()</code> method is used to find and return the first occurence of an element in an array, under a defined testing function. and if the condition is not met, it returns <code>undefined</code><br><strong>Syntax</strong>: <code>array.find(testingFunction);</code><br><code>const trees = [<br> { name: 'birch', count: 4 },<br> { name: 'oak', count: 2 }<br> { name: 'maple', count: 5 },<br> { name: 'oak', count: 8 }<br> ];<br><br> const result = trees.find(tree => tree.name === 'oak');<br> // { name: 'oak', count, 2 }</code><br><br>The <code>.filter()</code> method is like the find() method, in that it requires a function passed and a condition for what will be returned. The main difference is, filter() always returns an array, even if there is only one matching element. But it will return all the matching elements, whereas find() only returns the first matching. The important thing with filter is that it returns all the elements matching your criteria.<br><strong>Syntax</strong>:<code>var newArray = array.filter(function(item) {<br> return condition;<br> });</code><br><code>var heroes = [ <br> {name: 'Batman', franchise: 'DC'}, <br> {name: 'Ironman', franchise: 'Marvel'}, <br> {name: 'Thor', franchise: 'Marvel'}, <br> {name: 'Superman', franchise: 'DC'} <br> ]; <br> <br> var marvelHeroes = heroes.filter(function(hero) { <br> return hero.franchise == 'Marvel'; <br> }); <br> <br> // [ {name: 'Ironman', franchise: 'Marvel'}, {name: 'Thor', franchise: 'Marvel'} ]</code></p>"
            },
            {
                "name": "What are the different types of pop-up boxes in JavaScript?",
                "description": "<p><strong>Alert Box</strong> - The alert box is for an alert or message to the user. User needs to click “OK”. The alert() method is used to add a message in the alert:<br><br><strong>Prompt Box</strong> - To input a value from the user and display it, use the prompt box. Users need to click “OK” to return the entered input, else click “Cancel” to return null.<br><br><strong>Confirm Box</strong> - The confirm box is used in JavaScript to take user's consent or accept something. User need to click “OK” to return true, else click “Cancel” to return false.</p>"
            },
            {
                "name": "Role of JSON.stringify() in JavaScript",
                "description": "<p>When data is sent to a web server, it has to be in the form of string. The <code>JSON.stringify()</code> method is used in JavaScript to convert an object to string.</p>"
            },
            {
                "name": "Anonymous functions vs JavaScript closures",
                "description": "<p><strong>JavaScript Closures</strong> - Closures are basically, the inner function having access to the variables in the outer function scope, even after the outer function has returned. To use a closure, simply define a function inside another function and expose it, I mean return it.<br><br><strong>Anonymous functions</strong> - An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function.</p>"
            },
            {
                "name": "What does “javascript:void(0)” mean?",
                "description": "<p>The javascript:void(0) evaluates an expression even if its addition to a web page brings unwanted output.<br><br>Use the void(0) to get the undefined primitive value. Here, we are preventing the page from loading on clicking the hyperlink:</p>"
            },
            {
                "name": "How to unset a JavaScript variable?",
                "description": "<p>The “undefined” is used to unset a variable in JavaScript.<br><br>Declare and initialize a variable:</p><strong>var a = 50;</strong><p>Now reassign the variable with undefined since we wish to unset it:</p><strong>a = undefined; </strong><p>The output displays undefined:</p>"
            },
            {
                "name": "Is JavaScript synchronous or asynchronous and what is event loop?",
                "description": "<p>JavaScript is a synchronous, blocking, single-threaded language. That just means that only one operation can be in progress at a time.<br><br>Many people think JavaScript is asynchronous because we can do async tasks like setTimeout, callbacks, promises in it. But the asynchronous behaviour of JavaScript(setTimeout, callbacks, promises) is not a part of JavaScript itself and built on top of JavaScript language in browser and accessed through browser APIs.<br><br>The browser have a Call Stack, Browser API and Message Queue and the order of their processing is called <strong>event loop</strong>.<br><br><img src='./assets/js/eventloop.png'><br><br>The output will be A C B , even after the setTimeout() was set to display “b” after 0 ms. This happens because of the internal working of the browser.<br><br>The main() is pushed into Call Stack, which then console logs A. Then it is popped out and the setTimeout is pushed into Call Stack. Now the setTimeout() uses Browser API, so it is pushed there and the console log C is pushed into Call Stack.</p><ul><li>Even with the delay of 0ms the exec() for setTimeout have to go to the Message Queue.</li><li>After all the statements of main() is run and the Call Stack is empty, then only the exec() from Message Queue can be pushed to the Call Stack.</li></ul><p>This is how event loop works and the asynchronous, non-blocking part of JavaScript comes from.</p>"
            },
            {
                "name": "Format numbers as currency string in JavaScript",
                "description": "<p>The number formatter would allow you to format numbers as the currency you want it to work.</p><ul> <li>USD - <br><img src='./assets/js/formatus.png'></li><li>EUR - <br><img src='./assets/js/formateur.png'></li></ul>"
            },
            {
                "name": "Difference between parseInt(string) and Number(string) in JavaScript?",
                "description": "<p>The <strong>parseInt()</strong> method parses up to the first non-digit and returns the parsed value, whereas <strong>Number()</strong> converts the string into a number, which can also be a float.<br><br><pre>console.log(parseInt(\"20demo\"));<br>//Output: 20 </pre><br><br>Using the <strong>Number(string)</strong> method, the expression returns NaN:<br><pre>console.log(Number(\"20demo\"));<br>//Output: NaN</pre><br><br>Let us now workaround for a float value with both Number(string) and parseInt(string)<br><pre>console.log(Number(\"12.99demo\"));<br>console.log(\"parseInt(\"12.99demo\"));<br>//Output: NaN / 12</pre></p>"
            },
            {
                "name": "How to detect a mobile device with JavaScript?",
                "description": "<p>To detect a mobile device, let's say Android device, use the navigator.userAgent.match. Here, we have set it in a function:<br><br><pre><strong> Android: function() {<br>&nbsp; &nbsp; &nbsp; return navigator.userAgent.match(/Android/i);<br> },<br><br>iOS: function() {<br>&nbsp; &nbsp; &nbsp; return navigator.userAgent.match(/iPhone|iPad/i);<br> },</strong></pre></p>"
            },
            {
                "name": "What is the value of typeof undefined == typeof NULL?",
                "description": "<p>The expression will be evaluated to true, since NULL will be treated as any other undefined variable.<br>Note: JavaScript is case-sensitive and here we are using NULL instead of null.</p>"
            },
            {
                "name": "How do you make synchronous / asynchronous XML HTTP request?",
                "description": "<p>Browsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing 3rd parameter as true for asynchronous and false for synchronous.<br><br><img src='./assets/js/xmlhttprequest.png'><br><br><img src='./assets/js/xmlhttprequest1.png'></p>"
            },
            {
                "name": "How would you create a private variable in JavaScript?",
                "description": "<p>To create a private variable in JavaScript that cannot be changed you need to create it as a local variable within a function. Even if the function is executed the variable cannot be accessed outside of the function. For example:<br><img src='./assets/js/private-variable.png'><br><br>To access the variable, a helper function would need to be created that returns the private variable.<br><img src='./assets/js/private-variable1.png'></p>"
            },
            {
                "name": "Difference between: `function Person(){}`, `var person = Person()`, and `var person = new Person()`?",
                "description": "<p><code>function Person(){}</code> is just a normal function declaration.<br><br><code>var person = Person()</code> invokes the <code>Person</code> as a function, and not as a constructor. Invoking as such is a common mistake if it the function is intended to be used as a constructor. Typically, the constructor does not return anything, hence invoking the constructor like a normal function will return <code>undefined</code> and that gets assigned to the variable intended as the instance.<br><br><code>var person = new Person()</code> creates an instance of the Person object using the <code>new</code> operator, which inherits from <code>Person.prototype</code><br><br><img src='./assets/js/share.png'><br><br><strong>What will happen if I write <code>Person.name = “John”;</code></strong><br>Answer : It will throw error Cannot assign to read-only property ‘name’.</p><br><p><strong>What will happen if I write </strong><br><pre>var p1 = new Person(“YYY”,21); <br>p1.name =”ZZZ”; <br>console.log(p1.name);<br>Answer: ZZZ</pre></p>"
            },
            {
                "name": "Difference between a `.forEach` vs `.map()` loop",
                "description": "<p>The main difference between <code>.forEach</code> and <code>.map()</code>, is that <code>.map()</code> utilizes <code>return statement</code> and actually returns a new Array of the same size.<br><br><strong><code>forEach</code></strong></p><ul><li>Iterates through the elements in an array.</li><li>Executes a callback for each element.</li><li>Does not return a value.</li></ul><p><img src='./assets/js/foreach.png'><br><br><strong><code>map</code></strong></p><ul><li>Iterates through the elements in an array.</li><li>'Maps' each element to a new element by calling the function on each element, creating a new array as a result.</li></ul><p><img src='./assets/js/map.png'></p>"
            },
            {
                "name": "Boolean Reference",
                "description": "<p><table class='table table-striped'><tbody><tr><th style='width:20%'>Method</th><th>Description</th></tr><tr><td>toString()</td><td>Converts a boolean value to a string, and returns the result</td></tr><tr><td>valueOf()</td><td>Returns the primitive value of a boolean</td></tr></tbody></table></p>"
            },
            {
                "name": "Class Reference",
                "description": "<p>A class is a type of function, but instead of using the keyword function to initiate it, we use the keyword class, and the properties are assigned inside a constructor() method:<br><br>Class Methods<br><table class='table table-striped'><tbody><tr><th style='width:20%'>Method</th><th>Description</th></tr><tr><td>constructor()</td><td>A special method for creating and initializing objects created within a class</td></tr></tbody></table><br><br>Class Keywords<br><table class='table table-striped'><tbody><tr><th style='width:20%'>Keyword</th><th>Description</th></tr><tr><td>extends</td><td>It is used to create a child class of another class (parent)</td></tr><tr><td>static</td><td>The <code>static</code> keyword defines static methods for classes. Static methods are called directly on the class - without creating an instance/object of the class</td></tr><tr><td>super</td><td>The <code>super</code> keyword refers to the parent class. It is used to call the constructor of the parent class and to access the parent's properties and methods.</td></tr></tbody></table><br><br>Example of extends and Super keyword<br><img src='./assets/js/super-class.png'></p>"
            },
            {
                "name": "JSON Reference",
                "description": "<p><table class='table table-striped'><tbody><tr><th style='width:30%'>Method</th><th>Description</th></tr><tr><td>parse()</td><td>When receiving the data from a web server, the data is always in a string format. But you can convert this string value to javascript object using parse() method. <code>var userString = '{'name':'John','age':31}';<br> var userJSON = JSON.parse(userString);<br> console.log(userJSON);<br>// {name: 'John', age: 31}</code></td></tr><tr><td>stringify()</td><td>When sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.<code>var userJSON = {'name': 'John', age: 31}<br> var userString = JSON.stringify(user);<br> console.log(userString); <br>// '{'name':'John','age':31}'</code></td></tr></tbody></table></p>"
            },
            {
                "name": "Difference between splice() and slice()",
                "description": "<p>The <strong>slice()</strong> method returns a new array with a copy of sliced item from the original array. Here, the first optional argument marks the beginning index and the second optional argument marks the ending index. Where as index marked with negative number starts from the end of the array. <br>###Slice method won't mutate the original array but it returns the subset as new array.<br><br>The <strong>splice()</strong> method changes the content of the array in place and can be used to add or remove items from the array. It returns the removed items in the array. The first argument marks the array position for insertion or deletion, whereas the second optional argument marks the number of elements to be deleted. <br>###Splice method modifies the original array and returns the deleted array.</p>"
            },
            {
                "name": "Difference between filter() and map()",
                "description": "<p><strong>filter()</strong>: creates a new array with elements that fall under a given condition from an existing array.<br><br><strong>map()</strong>: 'Maps' each element to a new element by calling the function on each element, creating a new array as a result.</p>"
            },
            {
                "name": "Difference between findIndex() and indexof()",
                "description": "<p><strong>findIndex()</strong>: This function returns index of the first element of the given array which satisfies the testing function.<br><br><strong>indexof()</strong>: This function is used to find the index of the first occurrence of the element provided for search as the argument to the function. If the item is present more than once, the indexOf method returns the position of the first occurence.</p>"
            },
            {
                "name": "Difference between find() and filter()",
                "description": "<p><strong>find()</strong>: The find() method returns the first value that matches from the collection. Once it matches the value in findings, it will not check the remaining values in the array collection.<br><br><strong>filter()</strong>: creates a new array with elements that fall under a given condition from an existing array.</p>"
            },
            {
                "name": "Difference between console.dir and console.log?",
                "description": "<ul><li><code>console.log(input)</code>: The browser logs in a nicely formatted manner</li><li><code>console.dir(input)</code>:  The browser logs just the object with all its properties</li></ul>"
            },
            {
                "name": "Difference between window and document?",
                "description": "<table><thead><tr><th>Window</th><th>Document</th></tr></thead><tbody><tr><td>It is the root level element in any web page</td><td>It is the direct child of the window object. This is also known as Document Object Model(DOM)</td></tr><tr><td>By default window object is available implicitly in the page</td><td>You can access it via window.document or document.</td></tr><tr><td>It has methods like alert(), confirm() and properties like document, location</td><td>It provides methods like getElementById, getElementByTagName, createElement etc</td></tr></tbody></table>"
            },
            {
                "name": "What is a Regular Expression or RegExp?",
                "description": "<p>A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations.</p><img src='./assets/js/searchStringPattern.png'>"
            },
            {
                "name": "What are modifiers in RegExp?",
                "description": "<p>Modifiers can be used to perform case-insensitive and global searches. Let's list down some of the modifiers,</p><table><thead><tr><th>Modifier</th><th>Description</th></tr></thead><tbody><tr><td>i</td><td>Perform case-insensitive matching</td></tr><tr><td>g</td><td>Perform a global match rather than stops at first match</td></tr><tr><td>m</td><td>Perform multiline matching</td></tr></tbody></table><br><img src='./assets/js/globalmodifier.png'>"
            },
            {
                "name": "What are RegExp patterns?",
                "description": "<p>Regular Expressions provided group of patterns in order to match characters. Basically they are categorized into 3 types,</p><ul><li><strong>Brackets:</strong> These are used to find a range of characters. For example, below are some use cases,<ul><li>[abc]: Used to find any of the characters between the brackets(a,b,c)</li><li>[0-9]: Used to find any of the digits between the brackets</li><li>(a|b): Used to find any of the alternatives separated with |</li></ul></li><li><strong>Metacharacters:</strong> These are characters with a special meaning For example, below are some use cases,<ul><li>d: Used to find a digit</li><li>s: Used to find a whitespace character</li><li>b: Used to find a match at the beginning or ending of a word</li></ul></li><li><strong>Quantifiers:</strong> These are useful to define quantities For example, below are some use cases,<ul><li>n+: Used to find matches for any string that contains at least one n</li><li>n*: Used to find matches for any string that contains zero or more occurrences of n</li><li>n?: Used to find matches for any string that contains zero or one occurrences of n</li></ul></li></ul>"
            },
            {
                "name": "Object Equality - How would you compare two objects in JavaScript?",
                "description": "<p>To check that, you can get the keys for both the objects. If the number of properties doesn't match, these two objects are not equal. Secondly, you will check each property whether they have the same value. If all the properties have same value, they are equal.<br><br><img src='./assets/js/objectcompare.png'></p>"
            },
            {
                "name": "What Is Garbage Collection in JavaScript?",
                "description": "<p>This type of <em>automatic memory management</em> monitors memory allocation to reclaim and free up allocated memory blocks that are no longer needed by the JavaScript program.</p>"
            },
            {
                "name": "List the 7 Error Types in JavaScript.",
                "description": "<ul><li><strong>EvalError:</strong> Error regarding the global function <em>eval()</em></li><li><strong>InternalError:</strong> Internal error in the JS engine (stack overflow, etc)</li><li><strong>RangeError: </strong>Numeric variable or parameter is outside of valid range</li><li><strong>ReferenceError:</strong> Invalid variable reference</li><li><strong>SyntaxError:</strong> Syntax error while parsing code in <em>eval()</em></li><li><strong>TypeError:</strong> Parameter or variable not of a valid type</li><li><strong>URIError:</strong> Invalid parameters passed to <em>decodeURI()</em> or <em>encodeURI()</em></li></ul>"
            },
            {
                "name": "What’s the Difference Between the Javascript Engine & Javascript Runtime?",
                "description": "<p>The JavaScript engine converts JavaScript code into machine code that can be executed by the computer, while the JavaScript runtime is the environment in which the code is executed, such as a web browser or <strong>Node.js</strong></p>"
            },
            {
                "name": "How Can You Optimize the Performance of a Javascript Application?",
                "description": "<ul><li>Minimize use of global variables</li><li>Prioritize access to local variables</li><li>Use caching &amp; memoization</li><li>Compressing code and further uglification of code</li><li>Use object &amp; array literals instead of constructors</li><li>Avoid unnecessary function calls</li><li>Defer the load of JavaScript that is not necessary</li><li>Use web workers when you need to execute code that needs a lot of execution time</li><li>Remove unused JavaScript such as unused library which is not in use</li></ul>"
            },
            {
                "name": "How Can You Measure the Performance of a JavaScript Function?",
                "description": "<p>You can use <em>performance.now()</em> to return high-resolution timestamps in milliseconds and thus calculate the time it takes for a function to execute, as shown below.<br><img src='./assets/js/performance.png'></p>"
            },
            {
                "name": "How does a javascript engine work behind the scenes ?",
                "description": "<p>Every browser provides a JavaScript engine that runs the JavaScript code.<br><br><strong>Execution Context</strong> - When the JavaScript engine scans a script file, it makes an environment called the Execution Context that handles the entire transformation and execution of the code. <br>During the context runtime, the parser parses the source code and allocates memory for the variables and functions. The source code is generated and gets executed. <br>There are two types of execution contexts: global and function. The global execution context is created when a JavaScript script first starts to run, and it represents the global scope in JavaScript. A function execution context is created whenever a function is called, representing the function's local scope.<br><br><strong>Phases of the JavaScript Execution Context</strong> -<br>#1. In <strong>Creation Phase</strong>, the JavaScript engine creates the execution context and sets up the script's environment. The <strong>Creation Phase</strong> includes creating the global and function execution contexts, creating the scope chain, and allocating memories for the variables and functions.<br>#2. During the <strong>Execution Phase</strong>, the JavaScript engine executes the code line by line. This includes evaluating and executing statements.</p><br><br><p><strong>Call Stack</strong> - To keep the track of all the contexts, including global and functional, the JavaScript engine uses a <strong>call stack</strong>. A call stack is also known as an 'Execution Context Stack', 'Runtime Stack', or 'Machine Stack'. <br>When the engine first starts executing the script, it creates a global context and pushes it on the stack. Whenever a function is invoked, similarly, the JS engine creates a function stack context for the function and pushes it to the top of the call stack and starts executing it. <br>When execution of the current function is complete, then the JavaScript engine will automatically remove the context from the call stack and it goes back to its parent.<br><br><img src='./assets/js/callstack.png'><br><br>In this example, the JS engine creates a global execution context that enters the creation phase.<br><br>First it allocates memory for <code>funcA</code>, <code>funcB</code>, the <code>getResult</code> function, and the <code>res</code> variable. Then it invokes <code>getResult()</code>, which will be pushed on the call stack.<br><br>Then <code>getResult()</code> will call <code>funcB()</code>. At this point, <code>funcB</code>'s context will be stored on the top of the stack. Then it will start executing and call another function <code>funcA()</code>. Similarly, <code>funcA</code>'s context will be pushed. <br><br>Once execution of each function is done, it will be removed from the call stack.</p>"
            },
            {
                "name": "Difference between TypeScript and JavaScript",
                "description": "<table><tbody><tr><td><strong>TypeScript</strong></td><td><strong>JavaScript</strong></td></tr><tr><td>Superset of JavaScript developed to overcome code complexity for large projects.</td><td>A scripting language that helps create dynamic web page content.</td></tr><tr><td>Errors can be found and corrected during compile time.</td><td>Errors can be found only during run-time as it is an interpreted language.</td></tr><tr><td>Strongly typed, supports both static and dynamic typing.</td><td>Weakly typed, no option for static typing.</td></tr><tr><td>Converted into JavaScript code to be understandable for browsers.</td><td>Can be directly used in browsers.</td></tr><tr><td>Since it is a superset, all the JavaScript libraries, and other JavaScript code works without any changes.</td><td>JS libraries work by default.</td></tr><tr><td>There is support for ES3, ES4, ES5 and ES6.</td><td>No support for compiling additional ES3, ES4, ES5 or ES6 features.</td></tr><tr><td>Supports modules, generics and interfaces to define data.</td><td>No support for modules, generics or interface.</td></tr><tr><td>Functions can have optional parameters.</td><td>Functions cannot have optional parameters.</td></tr><tr><td>Numbers and strings are considered as interfaces.</td><td>Number and string are objects.</td></tr><tr><td>Powerful and intuitive language for large projects.</td><td>Neat and clean, most suitable for simple web applications.</td></tr><tr><td>Community support is still growing.</td><td>Huge community support with lots of documentation and support for solving issues.</td></tr><tr><td>Prototyping is possible</td><td>No support for prototyping.</td></tr><tr><td>Takes time to learn and code, scripting knowledge is a must.</td><td>Can be learned on the go, no prior scripting experience is needed.</td></tr><tr><td>Proper build setup (npm package) is required for static type definitions</td><td>No build setup is required.</td></tr></tbody></table>"
            },
            {
                "name": "What are the differences between ES6 class and ES5 function constructors?",
                "description": "<p>ES6 class constructors work quite the same as class constructors in other object-oriented languages. They are used to create new objects.<br><br>ES5 function constructors are also used to create objects. The above example can be modified as following through the use of function constructors.</p><table><thead><tr><th><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ES6 class constructors</strong></th><th><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ES5 function constructors</strong></th></tr></thead><tbody><tr><td>As discussed above ES6 class constructors creates objects by adding function to their prototypes (Blueprint).</td><td>ES5 function constructors also create objects along with inheritance property.&nbsp;</td></tr><tr><td>It ensures that<i> this</i> keyword used by the developer is referring to the object being created by the developer.&nbsp;</td><td>Any function can be used as a function constructor and it primarily focuses on the creation of reusable object creation code.</td></tr><tr><td>Its syntax is similar to object creation in other object-oriented programming languages.</td><td>Its syntax is unique and is not generally found in other object-oriented programming languages.</td></tr><tr><td>This can be said to be a syntax base for constructor functions and instantiate objects using a new operator.</td><td>This also uses a new operator for object creation but focuses on how the objects are being instantiated.</td></tr></tbody></table>"
            },
            {
                "name": "enums in JavaScript and typescript",
                "description": "<p>Enums in Javascript - <br><img src='./assets/js/enumjs.png'><br><br>Enums in Typescript - <br><img src='./assets/js/enumts.png'></p>"
            },
            
            
            {
                "name": "How do you clone an object?",
                "description": "<p><strong><code>var obj = {a: 1 ,b: 2}<br>var objclone = Object.assign({},obj);</code></strong><br><br>Now the value of <code>objclone</code> is <code>{a: 1 ,b: 2}</code> but points to a different object than <code>obj</code>.<br><br>Note the potential pitfall, though: <code>Object.assign()</code> will just do a shallow copy, <em>not</em> a deep copy.  This means that nested objects aren’t copied.  They still refer to the same nested objects as the original:<br><br><img src='./assets/js/objclone.png'></p>"
            },
            
            {
                "name": "What does the term Transpiling stand for?",
                "description": "<p>There's no way to polyfill new syntax that has been added to the language. So the better option is to use a tool that converts your newer code into older code equivalents. This process is commonly called&nbsp;<strong>transpiling</strong>, a term for&nbsp;<em>transforming + compiling</em>.<br><br>Typically you insert the&nbsp;<em>transpiler</em>&nbsp;into your build process, similar to your code linter or your minifier. There are quite a few great transpilers for you to choose from:</p><ul><li><p><strong>Babel</strong>: Transpiles ES6+ into ES5</p></li><li><p><strong>Traceur</strong>: Transpiles ES6, ES7, and beyond into ES5</p></li></ul>"
            },
            {
                "name": "Difference between Relative path and absolute path",
                "description": "<p>A relative path describes the location of a file relative to the current (working) directory*.</p>"
            },
            {
                "name": "Difference between Function, Method and Constructor calls in JavaScript",
                "description": "<p>In JavaScript, a <strong>function</strong> is a piece of reusable code that has the potential to take input values, perhaps do something with them, and potentially return a value.<br><br>Now, if the same function is called with the new keyword preceding it, it is known as <strong>constructor</strong> since it creates and returns a new object. (The collection of all objects that were generated using the same function constructor is then known as a class)<br><br>Likewise suppose a JavaScript Object contains as property in the form of function definition then it becomes a <strong>method</strong></p>"
            },
            {
                "name": "What are Service Workers and when can you use them?",
                "description": "<p>It’s a technology that allows your web application to use cached resources first, and provide default experience offline, before getting more data from the network later. This principle is commonly known as Offline First.<br><br>Service Workers actively use promises. A Service Worker has to be installed,activated and then it can react on fetch, push and sync events.<br><br>As of 2017, Service Workers are not supported in IE and Safari.</p>"
            }
        ]
    },
    {
        "folder": "JavaScript Coding",
        "title": "JavaScript Coding",
        "url": "/folder/JavaScript Coding",
        "icon": "logo-javascript",
        "question": [
            {
                "name": "Output - every() true/false?",
                "description": "<br><img src='./assets/jsCode/every.png'>"
            },
            {
                "name": "Output - undefined var inside for loop result - NaN",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/resultnan.png'><br><br><strong>Answer: </strong> The result is <strong>NaN</strong> because the var result  variable is immediately initialized, by setting it to undefined, Inside the loop since the result in uninitialized so the value of the variable result remains undefined. as we know, undefined isn’t converted into any number, so using it in maths calculations returns NaN. i.e., <strong>undefined + 5 = NaN</strong></p>"
            },
            {
                "name": "Output - eval method",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/eval.png'><br><br><strong>Answer: </strong> The result is <strong>B) 105</strong> because The eval function we see here can be used to calculate the Javascript in the form of string also as the as multiplication operator has greater priority than addition operator so it will first execute 10 x 10 is equal to 100 and then it at 5 to it so it becomes <strong>Number 105</strong></p>"
            },
            {
                "name": "Output - string and array when updated",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/printstringhello.png'><br><br><strong>Answer: </strong> The result is <strong>\"𝗛𝗲𝗹𝗹𝗼\" ['𝗛', '𝗮', '𝗹', '𝗹', '𝗼']</strong> because string is immutable. so this will log original str i.e., \"𝗛𝗲𝗹𝗹𝗼\", and array is mutable so this will log updated value ['𝗛', '𝗮', '𝗹', '𝗹', '𝗼']</p>"
            },
            {
                "name": "Output -  union of arrays / merge with unique value / intersection of array using prototype",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/arrayconcat.png'><br><br><strong>Answer: </strong> The result is <strong>[1, 2, 3, 4]</strong> because here the logic is in this way <br><strong>#1.</strong> First get the elements that are contained in first array using <strong>filter method</strong> and not contained in the second array using <strong>includes method</strong>, <br><strong>#2.</strong> concat the result with the element of the second array using <strong>concat method</strong></p>"
            },
            {
                "name": "Find the intersection of two arrays programatically",
                "description": "<p> The logic here is to create a hashmap with the elements of the firstArray as the keys. <br>After that, you can use the hashmap's O(1) look up time to check if the element exists in the hash <br>If it does exist, add that element to the new array.<br><br>Since we only want to push unique elements in our case... we can implement a counter to keep track of what we already added<br><br><img src='./assets/js/intersection.png'></p>"
            },
            {
                "name": "Output - remove duplicate values from an object using Map",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/arraymap.png'><br><br><strong>Answer: </strong> The result is <strong>[{ 𝗸𝗲𝘆: 𝟭 }, { 𝗸𝗲𝘆: 𝟮 }]</strong> because the element exists in map object then skip to the next element, if not, add it to the result array.</p>"
            },
            {
                "name": "Output - Sum using Currying",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/currying.png'><br><br><strong>Answer:</strong> The result is <strong>5 5</strong> because Currying is a function that takes one argument at a time and returns a new function expecting the next argument</p>"
            },
            {
                "name": "Output - Closures, Currying, and Higher-Order Functions with returning multiple values from the function",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/problem7.png'><br><br><strong>Answer: </strong> The result is <strong>6 10</strong> because <br><strong>#1.</strong> In the first statement  we get back the array [𝟲, function(z) { return 2 * 3 + z; }]. so calling mul(2)(3)[0] evaluates to the first element of the array returned by the inner function, which is the product of 2 and 3, i.e., <strong>6</strong>. <br><strong>#2.</strong> //returning index 1, which returns the function that takes z as a parameter. i.e., calls the second closure in the array with an argument of 4, and once z is passed to the function it returns 2*3 + 4 = <strong>10</strong>.</p>"
            },
            {
                "name": "Output - Object Key using square bracket operator",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/objectkey.png'><br><br><strong>Answer:</strong> The result is <strong>Jayesh 24</strong> because value of the key can be any expression as long as it is wrapped in brackets []. The result of an expression enclosed in brackets becomes the property name. i.e., age</p>"
            },
            {
                "name": "Ouput - replace string expression",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/replace.png'><br><br><strong>Answer:</strong> The result is <strong>jx@gmail.com logged-in</strong> replace() method is used to replace a part of a given string with a new substring</p>"
            },
            {
                "name": "output - using default value and function expression for addition",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/defaultpara.png'><br><br><strong>Answer:</strong> The result is <strong>3 6</strong> Default values allow the named parameters to get initialized with a default value or when no value is passed. Now using a value in first parameter will overwrite it and while using function add as default value expression the value becomes 3+3 = 6</p>"
            },
            {
                "name": "Output - array using reverse and then push new item",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/arrayrev.png'><br><br><strong>Answer:</strong> The result is <strong>[3,2,1,4] [3,2,1,4]</strong> <br> <strong>#1.</strong> The reverse() method reverses the array immediately; this means that the original elements of the array are swapped, and the original sequence is lost. <br><strong> #2.</strong> since reverse and push both method mutates the original array.so arr2.push will also modify the arr1. <br><strong>#3.</strong> after push operation this will log [3,2,1,4] because they’re both referencing the same array</p>"
            },
            {
                "name": "Output - using Object.is check for number, string and objects.",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/objectis.png'><br><br><strong>Answer:</strong> The result is <strong>false false</strong> <br> <strong>#1.</strong> TheObject.is() workons on strict comparison operator .i.e - === <br><strong> #2.</strong> return false since for strict equality number and string comparison will return false. <br><strong>#3.</strong> The specified objects look the same; however, they are two different objects as they refer to different memory addresses. This is why the Object.is() method marked these objects as unequal after comparing their references and return false.</p>"
            },
            {
                "name": "Output - compare string using sort method",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/stringsort.png'><br><br><strong>Answer:</strong> The result is <strong>true</strong> <br> since both str1 and str2 will be 'ehllo' after sorting and join. so this will return true</p>"
            },
            {
                "name": "Output - trim",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/trim.png'><br><br><strong>Answer:</strong> The result is <strong>\"&nbsp;&nbsp;Jayesh&nbsp;&nbsp;\" \"Jayesh\"</strong> <br> string.trim() removes sequences of whitespaces and line terminators from both the start and the end of the string. It doesn't change the original string but returns a new string without leading and trailing white spaces.</p>"
            },
            {
                "name": "Output  - Array with single and multiple arguments",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/emptyarray.png'><br><br><strong>Answer:</strong> The result is <strong>[empty x 3][1,2,3]</strong> <br> <strong>#1.</strong>  arr1 = new Array(3); will create array arr1 with a specified number of empty slots (e.g. Array(3) creates the array [empty x 3]). so this will log [𝗲𝗺𝗽𝘁𝘆 × 𝟯] <br><strong>#2.</strong>new Array(1, 2, 3); //an array with three elements</p>"
            },
            {
                "name": "Output - console.log(foo(), typeof x, typeof y);",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/scopelocalglobal.png'><br><br><strong>Answer: </strong> The result is <strong>1, undefined and number</strong> because <br><strong>#1.</strong> Of course the return value of <code>foo()</code> is 1 due to the increment operator. But the statement <code>let x = y = 0</code> declares a local variable x. Whereas y declared as a global variable accidentally. <br><strong>#2.</strong> Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the global variable <code>y</code> is available outside the function, the value is 0 and type is number.</p>"
            },
            {
                "name": "Output - Equality Coercion",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/equalityProblem.png'><br><br><strong>Solution - </strong>Output in the following order due to equality coercion:<br><img src='./assets/jsCode/equalitySolution.png'></p>"
            },
            {
                "name": "Output - null and undefined",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/equalityProblem2.png'><br><br><strong>Answer: </strong> The result is <strong>true false</strong> because here the logic is in this way <br><strong>#1.</strong> both undefined and null will return false. i.e., Boolean(null) and Boolean(undefined) both return false and the equality operator is used it compares only the values. So, == returns <strong>true</strong> <br><strong>#2.</strong> when we use the strict equality operator (===) which checks both type and value, since undefined and null are of different types (object is not equal to undefined), the strict equality operator returns <strong>false</strong>.</p>"
            },
            {
                "name": "Output - using spread operator",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/spread.png'><br><br><strong>Answer: </strong> The result is <strong>{name: 'Jayesh', admin: true}</strong> because here the logic is in this way <br>Using the && operator to return the object only when condition is true. If the object is returned then it’ll be spread into person object. And if the expression returns false then nothing gets spread, and no new keys are added to the object.<br><br><br><strong>Problem</strong><br><img src='./assets/jsCode/spread1.png'><br><br><strong>Answer: </strong> The result is <strong>{0: 'Jayesh', 1: 'Virat'}</strong> becaue her the spread syntax will unpack the values of an array into a new Object where the indexes of the array becomes the object's key and the elements in the array become object's values</p>"
            },
            {
                "name": "Output of Boolean values using OR operator",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/console.png'><br><br><strong>Answer: </strong> The result is <strong>{} \"\" []</strong> because here the logic is in this way <br><strong>#1.</strong>const one = false || { } || null; // <strong>Boolean(false) || Boolean({}) || Boolean(null) = false || true || false = true;</strong> since one of them is true so this will returns the first true operand value <strong>i.e., {}</strong> <br><strong>#2.</strong>const two = null || false || \"\"; // <strong>Boolean(null) || Boolean(false) || Boolean(\"\") = false || false || false = false;</strong> since all falsy so this will returns the last operand value <strong>i.e., \"\"</strong><br><strong>#3.</strong> const three = [ ] || 0 || true; // <strong>Boolean([]) || Boolean(0) || Boolean(true) = true || false || true = true;</strong> since one of them is true so this will returns the first true operand value <strong>i.e., []</strong></p>"
            },
            {
                "name": "Output - Union of duplicate values in two Array ",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/arrayfilter.png'><br><br><strong>Answer: </strong> The result is <strong>[1,2,3]</strong> because here the logic is in this way <br><strong>#1.</strong> using filter we are checking array 1 which includes values in array 2 and only returning that matched value</p>"
            },
            {
                "name": "Output - display value using ?? / nullish operator ",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/displayamount.png'><br><br><strong>Answer: </strong> The result is <strong>0</strong> because here due to hoisting - amount is <strong>undefined</strong> inside arrow function so this will evaluate <strong>0</strong></p>"
            },
            {
                "name": "Output - Baba / NaN / banana",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/baba.png'><br><br><strong>Answer: </strong> The result is <strong>banana BANANA</strong> here the logic is in this way <br><strong>#1.</strong> 'b' + 'a' +( + 'b') + 'a' // here due to <strong>unary plus (+) operator precedence</strong>, <strong>(+'b')</strong> will try to convert 'b' to a number. Since 'b' is not a number, the result is NaN (\"Not a Number\") <br><strong>#2.</strong> 'b' + 'a' + NaN + 'a' // here, adding NaN to \"ba\" turns NaN into the string \"NaN\" due to type conversion, this gives 'baNaN'. <br><strong>#3.</strong> the result 'ba'+'NaN'+'a' will become 'baNaNa'.</p>"
            },
            {
                "name": "Output - concat",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/merge.png'><br><br><strong>Answer: </strong> The result is <strong>[1,2] [1,2,3,4]</strong> here the logic is in this way <br><strong>#1.</strong> Array.concat() returns a new array and does not modify the existing arrays. <br><strong>#2.</strong> returns a new array res having the merge result</p>"
            },
            
            {
                "name": "Output - global variable value in inner and outer function",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/problem8.png'><br><br><strong>Answer: </strong> The result is <strong>JC JC</strong> because here the variable name is declared outside of the function getName and is a global variable. It means the variable name can be used anywhere in the program. Now the value of a global variable name can be changed inside a function.</p>"
            },
            {
                "name": "Output - prototype in function declaration and expression",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/proto3.png'><br><br><strong>Answer: </strong> The result is <strong>{constructor: f} undefined</strong> because <strong>Regular functions</strong> are working well with objects using the <strong>new keyword</strong>. They have the constructor function by which values can be initialized during object creation. It can be managed using the prototype chaining. However, arrow function does not have constructor function, prototype chaining. That means, unlike <strong>regular functions</strong>, arrow functions can never be called with the new keyword because they do not have the [[Construct]] method. As such, the prototype property also does not exist for arrow functions.</p>"
            },
            {
                "name": "Output - What is the result of X, Y, Z / A, B C object?",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/xyzObjectProblem.png'><br><br><strong>Solution - </strong><br><img src='./assets/jsCode/xyzObject.png'><br><br>Adding objects as properties of another object should be done carefully.<br><br>Writing x[y]={name:”Vivek”}, is same as writing x[‘object Object’]={name:”Vivek”},<br><br>While setting a property of an object, javascript coerces the parameter into a string.<br><br>Therefore, since y is an object, it will be converted to ‘object Object’.<br><br>Both x[y] and x[z] are referencing the same property.</p>"
            },
            {
                "name": "Output - Console results of string and numbers?",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/stringNumberConsole.png'><br><br><strong>Solution - </strong><br><img src='./assets/jsCode/stringNumberConsoleResult.png'></p><br><br><p><strong>Problem</strong><br><img src='./assets/jsCode/stringNumberConsole1.png'><br><br><strong>Solution - </strong><br><img src='./assets/jsCode/stringNumberConsoleResult1.png'></p><p><strong>Problem</strong><br><img src='./assets/jsCode/stringNumberConsole2.png'><br><br><strong>Solution - </strong><br><img src='./assets/jsCode/stringNumberConsoleResult2.png'></p>"
            },
            {
                "name": "Output - Hoisting a variable and random function",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/hoistingProblem.png'><br><br><strong>Solution - </strong>Output is <strong>NaN</strong><p>random() function has functional scope, since x is declared and hoisted in the functional scope.<br><br>Rewriting the random function will give a better idea about the output:<br><img src='./assets/jsCode/hoistingSolution.png'></p>"
            },
            {
                "name": "Output - What is the issue with the below code and how it can be fixed? (console sort)",
                "description": "<p><strong>Problem</strong><br><strong>const array=[1,2,15,4,30,7,45];<br>console.log(array.sort());</strong><br><br>The sort() method is used to sort the elements of an array. But the output of the above is not what expected out of sort() function.<br><br>This is because the default sort is according to tring Unicode points. The fix to it is by adding an anonymous function and tell to sort according to ascending or descending order. <br><br><img src='./assets/jsCode/sort.png'><br><br><strong>Sorting Programatically</strong><br><img src='./assets/jsCode/sortprogram.png'></p>"
            },
            {
                "name": "Output - How to shuffle an array in JavaScript?",
                "description": " <ul> <li><img src='./assets/jsCode/shuffle.png'></li><li><strong>[3,5,1,95,8,23].sort( ()=>Math.random()-0.5)</strong></li><li><img src='./assets/jsCode/shuffle1.png'></li></ul>"
            },
            {
                "name": "Output - What should be the value of “i” so that we get the mentioned result?",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/printi.png'><br><br><strong>Answer</strong><br><br>Everything is ok, but the last one produce NaN(Not a Number) because “<em>0 divide by 0 will produce infinity”</em><br><br>So, we need a number which is like zero but gives 1 if we divide it by itself. Fortunately there is such a number in JavaScript. The number is the minimum value that is allowed in JavaScript and is represented by <strong>Number.MIN_VALUE</strong><br><br><img src='./assets/jsCode/printians.png'></p>"
            },
            {
                "name": "Output - What are the different way to access “this” inside an inner function for below code?",
                "description": "<p><img src='./assets/jsCode/problem1.png'><br><br><strong>Solution 1</strong> - Use call method to use the outer “this” inside the innerFunc().<br><br><img src='./assets/jsCode/solution1.png'><br><br><strong>Solution 2</strong> - Use bind method to use the outer “this” inside the innerFunc().<br><br><img src='./assets/jsCode/solution2.png'><br><br><strong>Solution 3</strong> - Use a “that” variable in&nbsp;cleanRoom() for accessing “this” inside innerFunc(). Basically “that” is nothing but the outer “this”.<br><br><img src='./assets/jsCode/solution.png'><br><br><strong>Solution 4</strong> - Use arrow function in the innerFunc(). Arrow functions have special meaning for “this” and it is that, it takes the value of “this” from the enclosing scope and is very useful in this case.<br><br><img src='./assets/jsCode/solution3.png'></p>"
            },
            {
                "name": "Output - What is the output of the below code and why?(identity)",
                "description": "<p><img src='./assets/jsCode/problem2.png'><br><br><strong>Problem</strong>What is the issue with the code and how can it be fixed?<br><br>The output logged will be:</p><strong><code>undefined<br>Johnny Deep</code></strong><p>The first console.log prints <strong>undefined</strong> because heroIdentity()is been invoked in the global context (i.e., the window object) where the <strong>_name</strong> property doesn’t exists.<br><br>The other way to fix it is by binding, it to hero object by using bind.</p><strong><code>var heroIdentity = hero.getIdentity.bind(hero);</code></strong>"
            },
            {
                "name": "Output - What is the output of the below code and why? (arguments / method)",
                "description": "<p><img src='./assets/jsCode/method.png'><br><br>The output logged will be:</p><strong><code>10<br>2</code></strong><p>When inside the method, fn() is called the “this” of the function fn is at window level. So, “this.length” will produce <strong>10</strong>.<br>Now, when <code>arguments[0]()&nbsp;</code>is called, then <code>arguments[0]()&nbsp;</code> is equivalent to “fn” and function fn is called. But “this” now is the arguments array, which is of length 2 because it contains two arguments (fn, 1). So, “this.length” will produce <strong>2</strong>.</p>"
            },
            {
                "name": "Output - What is the output of the below code and why? (console proto)",
                "description": "<p><strong>Problem</strong></p><strong>console.log(('hello').__proto__.__proto__.__proto__);</strong></p><br><p><strong>Answer</strong> - The output logged will be: <code>null</code><br><br>The reason is for prototype chaining. The __proto__ of ‘hello’ is the global String.</p><strong>console.log(('hello').__proto__);</strong><p><img src='./assets/jsCode/proto1.png'><br><br>Then the __proto__ of it is the global Object.</p><strong>console.log(('hello').__proto__.__proto__);</strong><p><img src='./assets/jsCode/proto2.png'><br><br>Now, the Object is the final thing from which everything in JavaScript is created and it points to <strong>null</strong>.</p>"
            },
            {
                "name": "Output - Find the missing number in the array",
                "description": "<p><img src='./assets/jsCode/missingNumber.png'></p>"
            },
            {
                "name": "Output - Find the min and max values in the array",
                "description": "<p><img src='./assets/jsCode/minmax.png'><br><br><img src='./assets/jsCode/minmax1.png'><br><br><img src='./assets/jsCode/minmax2.png'></p>"
            },
            {
                "name": "Output - Capitalize all words in a sentence",
                "description": "<p><img src='./assets/jsCode/capitalize.png'><br><br><img src='./assets/jsCode/capitalize1.png'><br><br><img src='./assets/jsCode/capitalize2.png'><br><br><img src='./assets/jsCode/capitalize3.png'></p>"
            },
            {
                "name": "Output - Find the duplicate values in an string / find a character with maximum occurrence in a string",
                "description": "<ul><li><strong>Using filter + indexOf</strong><br><img src='./assets/jsCode/duplicateValue4.png'></li><li><strong>Using classical for loop</strong><br><img src='./assets/jsCode/duplicateValue5.png'></li></ul>"
            },
            {
                "name": "Output - Find the duplicate values in an array",
                "description": "<ul> <li><strong>By simply Traversing the Array</strong> <br><img src='./assets/jsCode/duplicateValue.png'></li><li><strong>Using filter + indexOf</strong> <br><img src='./assets/jsCode/duplicateValue1.png'></li><li><strong>Using reduce + includes</strong> <br><img src='./assets/jsCode/reduceinclude.png'></li><li><strong>Using includes</strong> <br><img src='./assets/jsCode/duplicateValue2.png'></li><li><strong>Using ES6 \"Set\"</strong> <br><img src='./assets/jsCode/duplicateValue3.png'></li></ul>"
            },
            {
                "name": "Output - Remove duplicates from an array",
                "description": "<ul><li><strong>Using empty array / helper array</strong> <br><img src='./assets/jsCode/duplicate.png'></li><li><strong>Using Object</strong> <br><img src='./assets/jsCode/duplicate1.png'></li><li><strong>Using filter + indexOf</strong> <br><img src='./assets/jsCode/duplicate2.png'></li><li><strong>Using ES6 \"Set\"</strong> <br><pre>var arr=[...new Set(arr)]</pre></li><li><strong>Using ES6 \"Set\" with from()</strong> <br><pre>var temp.from(new Set(arr))</pre><br>Here, the <strong>from()</strong> method returns an Array object from any object which has a capability of defining length property or any iterable object.</li></ul>"
            },
            {
                "name": "Output - Reverse each word in the sentence",
                "description": "<p><img src='./assets/jsCode/reverse4.png'><br><br><img src='./assets/jsCode/reverse5.png'><br><br><img src='./assets/jsCode/reverse6.png'><br><br><img src='./assets/jsCode/reverse2.png'><br><br><img src='./assets/jsCode/reverse.png'><br><br><img src='./assets/jsCode/reverse1.png'><br><br><strong>Reversing word greater than 5 letters</strong><br><img src='./assets/jsCode/reverse3.png'><br><br><img src='./assets/jsCode/reverseString.png'><br><br>Here, <strong>The <code>split()</code> method splits a string into an array of substrings, and returns the new array. If an empty string (\"\") is used as the separator, the string is split between each character, where as the <code>reverse()</code> method reverses the order of the elements in an array, and the <code>join()</code> method returns an array as a string.</strong></p>"
            },
            {
                "name": "Output - setTimeout Inside For Loop",
                "description": "<p><code>// setTimeout inside a For loop<br><br>for(var i = 0;i &lt; 5; i++){<br>&nbsp;&nbsp;&nbsp;setTimeout(function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log('count ', i);<br>&nbsp;&nbsp;&nbsp;}, 3000);<br>}</code><br><br>//Console<br><br><code>count  5<br>count  5<br>count  5<br>count  5<br>count  5</code><br><br>The <em>setTimeout</em> function callback isn’t triggered until the for loop execution has completed. When the for loop has finished executing the value of i is 5. Now when the <em>setTimeout</em> call begins to execute it uses the last set value of i which is 5. Hence 5 is printed in all the <em>setTimeout</em> callbacks.</p>"
            },
            {
                "name": "Output - setTimeout Inside For Loop Using IIFE",
                "description": "<p>You can use IIFE to create a new scope for each setTimeout callback without polluting the global scope. Simply wrap up the setTimeout code inside a IIFE.</p><br><img src='./assets/jsCode/settimeoutforloop.png'>"
            },
            {
                "name": "Output - setTimeout Inside For Loop Using let Keyword",
                "description": "<p>The let keyword creates a separate scope for each iteration making it possible to print the consecutive variable value.</p><br><img src='./assets/jsCode/settimeoutforloop1.png'>"
            },
            {
                "name": "Output - indexOf",
                "description": "<p><img src='./assets/jsCode/problem3.png'><br><br><strong>Answer</strong>: The first answer is 1 because 2 is at position 1, second and third is -1 because the index does not use for object and arrays. If you want to find and element in array use map and then check the index. The last line answer is 4 because the string is consider as an array of char in javascript.</p>"
            },
            {
                "name": "Output - filter.call()",
                "description": "<p><img src='./assets/jsCode/problem4.png'><br><br>Answer: This will start reading after 5. The beauty of this question is how it is written. Sometimes look like a puzzle. It will return set of array <strong><em>[“W”, “o”, “r”, “l”, “d”]</em></strong></p>"
            },
            {
                "name": "Output - printMessage",
                "description": "<p><img src='./assets/jsCode/problem5.png'><br><br>Answer: Here, We are creating two objects printVal1 and printVal2. printVal1.printMessage() clearly logs In printVal1 …because message is initialize as “In printVal1 …”. In the next line assigning method printMessage to printVal2 Object. In printVal2 message is initialize as “In printVal2 …”. So code block will log: <strong>In printVal1 … and In printVal2 …</strong></p>"
            },
            {
                "name": "Output - return statement",
                "description": "<p><img src='./assets/jsCode/problem6.png'><br><br>Answer - when you see this example closely there is return and rest of the code is written after that. So JavaScript just return from second line of code. Code after line 2 will not be executed.</p>"
            },
            {
                "name": "Output - ===",
                "description": "<p><strong>Problem</strong><br><strong>console.log(0.1+0.2===0.3)</strong><br><br>Answer: when adding 0.1 and 0.2 in javascript it will not be 0.3. It will be more than a fraction value of 0.3.<br> Only this will work <strong>(0.1+0.2).toFixed(1)==0.3</strong></p><br><br><p><strong>Problem</strong><br><img src='./assets/jsCode/equalityProblem1.png'><br><br><strong>Answer</strong> The triple-equal operator <code>===</code> behaves like any traditional equality operator would: evaluates to true if the two expressions on either of its sides have the same type and the same value. The double-equal operator, however, tries to coerce the values before comparing them. It is therefore generally good practice to use the <code>===</code> rather than <code>==</code>.  The same holds true for <code>!==</code> vs <code>!=</code>.</p>"
            },
            {
                "name": "Output - Fibonacci series",
                "description": "<p>Fibonacci series is a series that generates subsequent series of numbers by the addition of the two previous numbers. ... The first two terms of the Fibonacci series are zero and one, respectively. And the next terms are the addition of the two previous terms.<br><br><img src='./assets/jsCode/fibonacci.png'></p>"
            },
            {
                "name": "Output - Swap number without temp",
                "description": "<p><img src='./assets/jsCode/swaping.png'></p>"
            },
            {
                "name": "Output - Sum of two / sumFinder",
                "description": "<p><strong>Problem</strong> - From a unsorted array, check whether there are any two numbers that will sum up to a given number?<br><br><strong>Answer</strong><br><img src='./assets/jsCode/sumoftwo.png'></p>"
            },
            {
                "name": "Output - Sum of two largest numbers in the array",
                "description": "<p><img src='./assets/jsCode/sumoftwo1.png'></p>"
            },
            {
                "name": "Output - Sum of Squares of array list",
                "description": "<p><strong>Problem</strong> - Write a function that sums squares of numbers in list that may contain more lists?<br><img src='./assets/jsCode/recursionsumarray1.png'><br><br><strong>Answer</strong><br><img src='./assets/jsCode/recursionsumarray.png'></p>" 
            },
            {
                "name": "Output - Search JS object",
                "description": "<p><strong>Problem</strong> - Write a function called contains that searches for a value in a nested object. It returns true if the object contains that value.<br><img src='./assets/jsCode/searchjsobject.png'><br><br><strong>Answer</strong><br><img src='./assets/jsCode/searchjsobject1.png'></p>" 
            },
            {
                "name": "Output - Product of an array",
                "description": "<p><strong>Problem</strong> - Write a function called productOfArray which takes in an array of numbers and returns the product of them all?<br><img src='./assets/jsCode/productofarray.png'><br><br><strong>Answer</strong><br><img src='./assets/jsCode/productofarray1.png'><br><br><img src='./assets/jsCode/productofarray2.png'><br><br><img src='./assets/jsCode/productofarray3.png'></p>" 
            },
            {
                "name": "Output - check whether a number is even or not",
                "description": "<p><img src='./assets/jsCode/evenodd.png'></p>" 
            },
            {
                "name": "sum every integer element in an array",
                "description": "<p><img src='./assets/jsCode/sumofarray.png'><br><img src='./assets/jsCode/sumofarray1.png'></p>" 
            },
            {
                "name": "sum all nonnegative integers up to n",
                "description": "" 
            },
            {
                "name": "Output - delete operator with Emp Object prototype",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/delete1.png'><br><br><p><strong>Answer</strong> - Above code will output <strong>xyz</strong> as output. Here <strong>emp1</strong> object got company as prototype property. <strong>delete</strong> operator doesn't delete prototype property.<br><br><strong>emp1</strong> object doesn't have <strong>company</strong> as its own property. You can test it like:<br><br><img src='./assets/jsCode/delete2.png'><br><br>However, we can delete company property directly from <strong>Employee</strong> object using <strong>delete Employee.company</strong> or we can also delete from <strong>emp1</strong> object using <strong>__proto__</strong> property <strong> delete emp1.__proto__.company</strong>.</p>"
            },
            {
                "name": "How to merge two sorted Arrays into a Sorted Array?",
                "description": "<p><img src='./assets/jsCode/merge-two-sorted-array-algorithm.png'><br><br><img src='./assets/jsCode/merge-two-sorted-array-algorithm1.png'></p>"
            },
            {
                "name": "Output - let and var inside setTimeout",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/jsCode/letvaroutput.png'></p><br><p><strong>Answer</strong> - Outputs 2 and 12. Since, even though let variables are not hoisted, due to the async nature of javascript, the complete function code runs before the setTimeout function. Therefore, it has access to both x and y.</p>"
            },
            {
                "name": "Output - In what order will the numbers 1-4 be logged to the console",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/jsCode/order.png'></p><br><p><strong>Answer</strong> - 2<br>4<br>3<br>1 // After two seconds<br><br>Even though the second timeout function has a waiting time of zero seconds, the javascript engine always evaluates the setTimeout function using the Web API, and therefore, the complete function executes before the setTimeout function can execute.</p>"
            },
            {
                "name": "Output - hero / getPower / powerlevel",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/jsCode/powerlevel.png'></p><br><p><strong>Answer</strong> - undefined<br>42<br><br>Reason - The first output is <strong>undefined </strong>since when the function is invoked, it is invoked referencing the global object:<br><br><code>window.getPower() = getPower();</code></p>"
            },
            {
                "name": "Write the code to find the vowels",
                "description": "<p><img src='./assets/jsCode/vowels.png'></p>"
            },
            {
                "name": "Output - setTimeout Inside For Loop Using const variable",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/jsCode/const.png'></p><br><p><strong>Answer</strong> - <br><img src='./assets/jsCode/const1.png'></p>"
            },
            {
                "name": "Output - Given two strings, return true if they are anagrams of one another",
                "description": "<p><strong>Problem</strong> - For example: Mary is an anagram of Army</p><br><p><strong>Answer</strong> - <br><img src='./assets/jsCode/anagram.png'></p>"
            },
            {
                "name": "Output - typeof f()",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/typeoff.png'></p><br><p><strong>Answer</strong> - You can see function expression instead function declaration inside if statement. So it always returns true. Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.</p>"
            },
            {
                "name": "Output - delete operator",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/delete3.png'></p><br><p><strong>Answer</strong> - The output would be 0. The delete operator is used to delete properties from an object. Here x is not an object but a local variable. delete operators don’t affect local variables.</p>"
            },
            {
                "name": "Output - delete operator with x object - foo bar",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/delete.png'></p><br><p><strong>Answer</strong> - The output would be undefined. The delete operator is used to delete the property of an object. Here, x is an object which has the property foo, and as it is a self-invoking function, we will delete the foo property from object x. After doing so, when we try to reference a deleted property foo, the result is undefined.</p>"
            },
            {
                "name": "Output - delete operator deleting an array index",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/delete4.png'><br><br><strong>Answer: </strong> The result is <strong>[undefined/empty, 'b', 'c', 'd'], undefined, 4</strong> because The <code>delete</code> operator will delete the object property but it will not reindex the array or change its length. So the number or elements or length of the array won't be changed. If you try to print myChars then you can observe that it doesn't set an undefined value, rather the property is removed from the array.</p>"
            },
            {
                "name": "Output - return value of Duplicate paramater to function",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/duplicate3.png'><br><br><strong>Answer: </strong> The result is <strong>3, 2, 3</strong> because In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has duplicate parameters on 1st and 3rd parameters. The value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd argument overrides the first parameter. In strict mode, duplicate parameters will throw a Syntax Error. <br><br><br><strong>Problem</strong><br><img src='./assets/jsCode/duplicate4.png'><br><br><strong>Answer: </strong> The result is <strong>SyntaxError: Duplicate parameter name not allowed in this context</strong> because Unlike regular functions, the arrow functions doesn't not allow duplicate parameters in either strict or non-strict mode. So you can see <code>SyntaxError</code> in the console.</p>"
            },
            {
                "name": "Output - What is the output of the below code and why? compare",
                "description": "<p><strong>Problem</strong><br><pre>console.log(10 == [10], 10 == [[[[[[[10]]]]]]]);</pre><br><br><strong>Answer: </strong> The result is <strong>True, True</strong> because As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as below <br><pre>10 === Number([10].valueOf().toString()); // 10</pre><br>So it doesn't matter about number brackets([]) around the number, it is always converted to a number in the expression.</p>"
            },
            {
                "name": "Output - named function expression - foo bar typeof",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/namedexpression.png'></p><br><p><strong>Answer</strong> - The output would be Reference Error. A function definition can have only one reference variable as its function name.</p>"
            },
            {
                "name": "Write a function that would allow you to do this? addSix / createBase / closures",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/addsix.png'></p><br><p><strong>Answer</strong> - You can create a closure to keep the value passed to the function createBase even after the inner function is returned.<br><img src='./assets/jsCode/addsixfunc.png'></p>"
            },
            {
                "name": "FizzBuzz Challenge",
                "description": "<p><strong>Problem</strong>Create a for loop that iterates up to <code>100</code> while outputting <strong>\"fizz\"</strong> at multiples of <code>3</code>, <strong>\"buzz\"</strong> at multiples of <code>5</code> and <strong>\"fizzbuzz\"</strong> at multiples of <code>3</code> and <code>5</code>.</p><br><p><strong>Answer</strong> - <br><img src='./assets/jsCode/fizzbuzz.png'></p>"
            },
            {
                "name": "How would you use a closure to create a private counter?",
                "description": "<p>You can create a function within an outer function (a closure) that allows you to update a private variable but the variable wouldn't be accessible from outside the function without the use of a helper function.<br><img src='./assets/jsCode/closureconter.png'></p>"
            },
            {
                "name": "Output - Value of b in expression var a=b=5",
                "description": "<p>The code above will output 5 even though it seems as if the variable was declared within a function and can't be accessed outside of it. This is because <br><strong><code>var a = b = 5</code></strong><br> is interpreted the following way: <br><strong><code>var a = b;<br>b = 5;</code></strong><br><br>But <code>b</code> is not declared anywhere in the function with var so it is set equal to <strong>5</strong> in the <strong>global scope</strong>.</p><br><br><p><strong>Another Case Problem</strong><br><img src='./assets/jsCode/aandb.png'></p><br><p><strong>Answer</strong> - <br><strong>a defined? false <br>b defined? true</strong> - since the statement <code>var a = b = 3;</code> is shorthand for the statements <code>b = 3;</code> and <code>var a = b;</code>, <code>b</code> ends up being a global variable (since it is not preceded by the <code>var</code> keyword) and is therefore still in scope even outside of the enclosing function.</p>"
            },
            {
                "name": "Output - 3>2>1 - returns false while 3>2>0 return true",
                "description": "<p>Let's pick this apart. First, it evaluates <strong>+(3 &gt; 2)</strong>. Yes, three is greater than two. Therefore, you now have expression like this <strong> +(true) &gt; 1</strong><br><br><strong>true</strong> is coerced into a number. That number happens to be <strong>1</strong>. <strong>1 &gt; 1</strong> is obviously false. Therefore, the result is: <strong>false</strong></p><br><br><p>Whereas in other case expression 1 > 0, and hence the result is true</p>"
            },
            {
                "name": "Output - 1<2<3 returns true",
                "description": "<p>Let's pick this apart. First, it evaluates <strong>+(1 &lt; 2)</strong>. Yes, one is less than two. Therefore, you now have expression like this <strong> +(true) &lt; 3</strong><br><br><strong>true</strong> is coerced into a number. That number happens to be <strong>1</strong>. <strong>1 &lt; 3</strong> is obviously true. Therefore, the result is: <strong>true</strong></p>"
            },
            {
                "name": "Output - 1<3>2 and 1>3<2",
                "description": "Result - false / true"
            },
            {
                "name": "Output - console 'this foo bar self'",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/outputfoobar.png'></p><br><p><strong>Answer</strong> - <br><img src='./assets/jsCode/outputfoobar1.png'><br>In the outer function, both <code>this</code> and <code>self</code> refer to <code>myObject</code> and therefore both can properly reference and access <code>foo</code>.<br>In the inner function, though, <code>this</code> no longer refers to <code>myObject</code>.  As a result, <code>this.foo</code> is undefined in the inner function, whereas the reference to the local variable <code>self</code> remains in scope and is accessible there.</p>"
            },
            {
                "name": "Output - Palindrome",
                "description": "<p><img src='./assets/jsCode/palindrome.png'><br><br><img src='./assets/jsCode/palindrome1.png'></p>"
            },
            {
                "name": "Output - object property",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/objref.png'></p><br><p><strong>Answer</strong> - When setting an object property, JavaScript will implicitly <strong>stringify</strong> the parameter value. In this case, since <code>b</code> and <code>c</code> are both objects, they will <em>both</em> be converted to <code>\"[object Object]\"</code>. As a result, <code>a[b]</code> and<code>a[c]</code> are both equivalent to <code>a[\"[object Object]\"]</code> and can be used interchangeably.  Therefore, setting or referencing <code>a[c]</code> is precisely the same as setting or referencing <code>a[b]</code>.</p>"
            },
            {
                "name": "Output - Testing knowledge on \"this\"",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/this.png'></p><br><p><strong>Answer</strong> - <strong><code><br>10<br>2</code></strong><br><br>When setting an object property, JavaScript will implicitly <strong>stringify</strong><br><br>In the first place, as <code>fn</code> is passed as a parameter to the function <code>method</code>, the scope (<code>this</code>) of the function <code>fn</code> is <code>window</code>.  <code>var length = 10;</code> is declared at the <code>window</code> level. It also can be accessed as <code>window.length</code> or <code>length</code> or <code>this.length</code> (when <code>this === window</code>.)<br><br>Now, we know that we can access any number of arguments in a JavaScript function using the <code>arguments[]</code> array.<br><br>Hence <code>arguments[0]()</code> is nothing but calling <code>fn()</code>. Inside <code>fn</code> now, the scope of this function becomes the <code>arguments</code> array, and logging the length of <code>arguments[]</code> will return <code>2</code>.</p>"
            },
            {
                "name": "Output - try catch",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/varhoisting.png'></p><br><p><strong>Answer</strong> - <strong><code><br>1<br>undefined<br>2</code></strong><br><br><code>var</code> statements are hoisted (without their value initialization) to the top of the global or function scope it belongs to, even when it’s inside a <code>with</code> or <code>catch</code> block. However, the error’s identifier is only visible inside the <code>catch</code> block. It is equivalent to:<br><img src='./assets/jsCode/varhoisting1.png'></p>"
            },
            {
                "name": "Output - not hoisted / girl / 21 / 20",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/hoisting.png'></p><br><p><strong>Answer</strong> - Neither 21, nor 20, the result is <code>undefined</code>. It’s because JavaScript initialization is not hoisted.<br><br>(Why doesn’t it show the global value of 21? The reason is that when the function is executed, it checks that there’s a local <code>x</code> variable present but doesn’t yet declare it, so it won’t look for global one.)</p>"
            },
            {
                "name": "Output - closures / outer / inner",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/closure.png'></p><br><p><strong>Answer</strong> - Output to the console will be “3”.<br><br>There are three closures in the example, each with it’s own <code>var b</code> declaration. When a variable is invoked closures will be checked in order from local to global until an instance is found. Since the <code>inner</code> closure has a <code>b</code> variable of its own, that is what will be output.</p>"
            },
            {
                "name": "Output - Check if a given string is a isomorphic",
                "description": "<p>For two strings to be isomorphic, all occurrences of a character in string A can be replaced with another character to get string B. There must be one-to-one mapping for every char of string A to every char of string B.<br><img src='./assets/jsCode/isomorphic.png'></p><ul><li><strong>Step 1</strong> - Check if the same lenght. If not, they cannot be isomorphic</li><li><strong>Step 2</strong> - If the letter does not exist, create a map and map it to the value of the second letter</li><li><strong>Step 3</strong> - Eles if letterA already exists in the map, but it does not map to letterB, that means that A is mapping to more than one letter.</li><li><strong>Step 4</strong> - If after iterating through and conditions are satisfied, return true. They are isomorphic</li></ul>"
            },
            {
                "name": "Output - this in global/window object",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/closure1.png'></p><br><p><strong>Answer</strong> - <br><strong><code>global/window object<br>object \"b\"<br>global/window object</code></strong><br><br><br>Since we are using the arrow function inside <strong>func2, this </strong>keyword refers to the global object.<br><br><strong>Code 3 </strong>- Outputs in the following order:</p>"
            },
            {
                "name": "Output - this in IIFE",
                "description": "<p><strong>Problem</strong><br><img src='./assets/jsCode/this1.png'></p><br><p><strong>Answer</strong> - <br><strong><code>\"Vivek\"<br>blank_value/undefined<br>\"Vivek\"</code></strong> - Only in the IIFE inside the function <strong>f</strong>, <strong>this </strong>keyword refers to the global/window object.</p>"
            },
            {
                "name": "Write the code for dynamically inserting new components / append nodes to the list.",
                "description": "<p><strong>Answer</strong><br><img src='./assets/js/append.png'></p>"
            },
            {
                "name": "Output of the following code? bar boolean",
                "description": "<p><strong>Problem</strong><br><img src ='./assets/jsCode/bartrue.png'><br><br><strong>Answer<br>1<br>truexyz<br>2<br>1</strong></p>"
            },
            {
                "name": "True False Rapid Fire",
                "description": "<p><strong>Question: </strong>Is<code>'false'</code>is!1?<br><strong>Answer: </strong>No.Because,it's a string with length greater than 0. Only empty string is false.</p><p><strong>Question: </strong> Is <code>' '</code> is false?<br><strong>Answer: </strong> No. Because, it's not an empty string.There is a white space in it.</p><p><strong>Question: </strong>What about<code>{}</code>?<br><strong>Answer: </strong> Its Truthy. It's an object. An object without any property is an object can't be falsy.</p><p><strong>Question: </strong>Tell me about<code>[]</code>?<br><strong>Answer: </strong>This is also truthy.It's an array object (array is child of object) is truthy.</p><p><strong>Question: </strong>You talked bout <code>''</code> to be falsy. What about <code>new String('')</code>?<br><strong>Answer: </strong> Though you are passing empty string to the string constructor, it is creating an String object. More precisely a instance of String object. It becomes an object. Hence, it is not false. so, it is truthy.</p><p><strong>Question: </strong> Tell me about <code>new Boolean(false)</code><br><strong>Answer: </strong> truthy. As it creates an instance of the Boolean object which is an object. Object is truthy.</p><p><strong>Question: </strong> <code>Boolean(function(){})</code><br><strong>Answer: </strong> <code>true</code> if you pass a truthy value to Boolean, it will be true.</p><p><strong>Question: </strong> <code>Boolean(/foo/)</code><br><strong>Answer: </strong> <code>true</code></p><p><strong>Question: </strong> <code>true%1</code><br><strong>Answer: </strong> 0. When you are trying to find reminder of true, true becomes 1 and reminder of 1 while dividing by 1 is 0. you will get same result if you doe <code>false%1</code></p><p><strong>Question: </strong> <code>''%1</code><br><strong>Answer: </strong>0</p>"
            },
            {
                "name": "Rapid Fire",
                "description": "<p><strong>Question: </strong> What is <code>typeof []</code><br><strong>Answer: </strong> Object. Actually Array is derived from Object. If you want to check array use <code>Array.isArray(arr)</code></p><p><strong>Question: </strong> What is <code>typeof arguments</code><br><strong>Answer: </strong> Object. arguments are array like but not array. it has length, can access by index but can't push pop, etc.</p><p><strong>Question: </strong> What is <code>2+true</code><br><strong>Answer: </strong> 3. The plus operator between a number and a boolean or two boolean will convert boolean to number. Hence, true converts to 1 and you get result of 2+1</p><p><strong>Question: </strong> What is <code>'6'+9</code><br><strong>Answer: </strong> 69. If one of the operands of the plus (+) operator is string it will convert other number or boolean to string and perform a concatenation. For the same reason, <code>'2'+true</code> will return '2true'</p><p><strong>Question: </strong> What is the value of <code>4+3+2+'1'</code><br><strong>Answer: </strong> 91 . The addition starts from the left, 4+3 results 7 and 7+2 is 9. So far, the plus operator is performing addition as both the operands are number. After that 9 + '1' where one of the operands is string and plus operator will perform concatenation.</p><p><strong>Question: </strong> What is the value of <code>'1'+2+4</code><br><strong>Answer: </strong> '124'. For this one '1' + 2 will produce '12' and '12'+4 will generates '124'.</p><p><strong>Question: </strong> What is the value of <code>-'34'+10</code><br><strong>Answer: </strong> -24. minus(-) in front of a string is an unary operator that will convert the string to a number and will make it negative. Hence, -'34' becomes, -34 and then plus (+) will perform simple addition as both the operands are number.</p><p><strong>Question: </strong> What is the value of <code>+'dude'</code><br><strong>Answer: </strong> NaN. The plus (+) operator in front of a string is an unary operator that will try to convert the string to number. Here, JavaScript will fail to convert the 'dude' to a number and will produce NaN.</p><p><strong>Question: </strong> What is <code>console.log(10 + \"10\", 10 - \"10\");</code><br><strong>Answer:  1010, 0</strong> The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both operands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.</p><p><strong>Question: </strong> What is <code>let [a, ...b,] = [1, 2, 3, 4, 5]; console.log(a, b);</code><br><strong>Answer:  SyntaxError</strong> When using rest parameters, trailing commas are not allowed and will throw a SyntaxError. If you remove the trailing comma then it displays <strong>[1, 2, 3, 4, 5]</strong></p><p><strong>Question: </strong> If you have <code>var y=1, x=y=typeof x;</code> What is the value of x?<br><strong>Answer: </strong> 'undefined'</p><p><strong>Question: </strong> for <code>var a=(2, 3, 5);</code> what is the value of a?<br><strong>Answer: </strong> 5. The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.</p><p><strong>Question: </strong> for <code>var a=(1, 5 - 1) * 2</code> what is the value of a?<br><strong>Answer: </strong> 8</p><p><strong>Question: </strong> What is the value of <code>!'bang'</code><br><strong>Answer: </strong> false. <code>!</code> is NOT. If you put <code>!</code> in front of truthy values, it will return false. Using !! (double bang) is a tricky way to check anything truthy or falsy by avoiding implicit type conversion of==comparison.</p><p><strong>Question: </strong> What is the value of <code>parseFloat('12.3.4')</code><br><strong>Answer: </strong> 12.3</p><p><strong>Question: </strong> What is the value of <code>Math.max([2,3,4,5]);</code><br><strong>Answer: </strong> NaN</p><p><strong>Question: </strong> <code>3 instanceof Number</code><br><strong>Answer: </strong> false</p><p><strong>Question: </strong><code>null==undefined</code><br><strong>Answer: </strong> true</p><p><strong>Question: </strong>What is the value of <code>!!function(){};</code><br><strong>Answer: </strong> true</p><p><strong>Question: </strong> What is the value of <code>typeof bar</code><br><strong>Answer: </strong> 'undefined'</p><p><strong>Question: </strong> What is the value of <code>typeof null</code><br><strong>Answer: </strong> 'object'</p><p><strong>Question: </strong> If <code> var a=2, b=3</code> what would be value of <code>a &amp;&amp; b</code><br><strong>Answer: </strong> 3</p><p><strong>Question: </strong> What would be consoled <code>var foo='outside'; function logIt(){console.log(foo); var foo='inside';}logIt();</code><br><strong>Answer: </strong> undefined</p><p><strong>Question: </strong> What is <code>-5%2</code><br><strong>Answer: </strong>-1. the result of remainder always get the symbol of first operand</p><p><strong>Question: </strong> Why <code>.1+.2 !=.3</code><br><strong>Answer: true - floating point errors in internally representing certain numbers. 0.1 + 0.2 does not nicely come out to 0.3</strong></p><p><strong>Question: </strong> What is <code>console.log([1, 2] + [3, 4]);</code><br><strong>Answer:  1,23,4</strong> The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.</p><p><strong>Question: <code>42..toString()</code></strong><br><strong>Anwser:</strong> <code>'42'</code></p><p><strong>Question: </strong> <code>4.2..toString</code><br><strong>Anwser:</strong> //SyntaxError: Unexpected token .</p><p><strong>Question: </strong><code>42 . toString()</code><br><strong>Anwser:</strong> <code>'42'</code></p><p><strong>Question: </strong> <code>typeof(NaN)</code><br><strong>Anwser:</strong>'number'</p><p><strong>Question: </strong> <code>2 in [1,2]</code><br><strong>Anwser:</strong> false. Because 'in' returns whether a particular property/index available in the Object. In this case object has index 0 and 1 but don't have 2. Hence you get false.</p>"
            },
            {
                "name": "Output - Recursion example Flatten array",
                "description": "<p><strong>Algorithm steps:</strong></p><ul><li>First, we iterate through the given array.</li><li>Then check each element:<ul><li>if it is not an array then push the elements in an updated array.</li><li>if it is an array then again call the same function <code>flatten()</code> i.e. recursion. Then we will combine our updated array and return values of <code>flatten()</code> using the spread operator in ES6. This will keep flatting the updated array.</li></ul></li></ul><p><strong>Solution 1</strong><br><img src='./assets/jsCode/flattenforloop.png'><br><br><strong>Solution 2</strong><br><img src='./assets/jsCode/flatten.png'></p>"
            },
            {
                "name": "Output - Recursion example 'display countdown numbers'",
                "description": "<p><strong>Algorithm steps:</strong></p><ul><li>First, we iterate through the given number.</li><li>Then we decrease the number by 1 and store that value in a variable</li><li>Then we evaluate the new stored value against the condition greater than 0, if it is then we again trigger the countdown function.</li></ul><p><img src='./assets/jsCode/recursioncountdown.png'></p>"
            },
            {
                "name": "Output - Recursion example 'display 1 to 10 from array'",
                "description": "<p><img src='./assets/jsCode/recursioncountdown1.png'><br><img src='./assets/jsCode/recursioncountdown2.png'></p>" 
            }, 
            {
                "name": "Output - Find Factorial",
                "description": "<p>The factorial function says to multiply all the whole numbers from the chosen number down to one. In more mathematical terms, the factorial of a number <strong>(n!) is equal to n(n-1)</strong>.<br><br><img src='./assets/jsCode/factorial.png'></p>"
            },
            {
                "name": "Output - Find out prime factors of the number",
                "description": "<p><strong>Solution 1</strong><br><img src='./assets/jsCode/factors1.png'><br><br><strong>Solution 2</strong><br><img src='./assets/jsCode/factors.png'></p>"
            },
            {
                "name": "Output - Perfect number using Javascript",
                "description": "<p>In number theory, a perfect number is a positive integer that is equal to the sum of its proper positive divisors, that is, the sum of its positive divisors excluding the number itself<br><i>Example</i> : The first perfect number is 6, because 1, 2, and 3 are its proper positive divisors, and 1 + 2 + 3 = 6. Equivalently, the number 6 is equal to half the sum of all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6. The next perfect number is 28 = 1 + 2 + 4 + 7 + 14.<br><br><img src='./assets/jsCode/perfectnumber.png'></p>"
            },
            {
                "name": "Output - digits from a string with numbers",
                "description": "<p><strong>var strNum = \"only123!\"; </strong><br><br>To fetch the digits from the above string, the following RegExp is used: <img src='./assets/jsCode/regexp.png'><br><br><img src='./assets/jsCode/findnumber.png'></p>"
            },
            {
                "name": "Output - non-digit characters from a string",
                "description": "<p><strong>var strNum = \"DEMO989#@#@\";</strong><br><br>The following RegExp is used to get a non-digits:&nbsp;<img src='./assets/jsCode/regexp1.png'><br><br><img src='./assets/jsCode/findalphabets.png'></p>"
            }
        ]
    },
    {
        "folder": "HTML",
        "title": "HTML",
        "url": "/folder/HTML",
        "icon": "logo-html5",
        "question": [
            {
                "name": "New in HTML?",
                "description": "<p>New Elements: &lt;header&gt;, &lt;footer&gt;, &lt;nav&gt;, &lt;section&gt;, &lt;article&gt;, &lt;aside&gt;, &lt;figure&gt;, &lt;figcaption&gt;, &lt;mark&gt;, &lt;/mark&gt;, &lt;audio&gt;,  &lt;video&gt;, &lt;embed&gt;, &lt;source&gt;, &lt;track&gt;</p><p>New Inline Elements - &lt;mark&gt;, &lt;progress&gt;</p><p>New Input Types: color, date, datetime, email, range, search, tel, time, url </p><p>New Input Attributes: autocomplete, autofocus, formaction, formnovalidate, min and max, multiple, pattern (regexp), required</p><p><strong>Make your content editable</strong><br><img src='./assets/html/contenteditable.png'></p><p><strong>No More Types for Scripts and Links</strong> - <br>Back in HTML 4 <br><img src='./assets/html/notype.png'><br><br>Now in HTML 5<br><img src='./assets/html/notype1.png'></p>"
            },
            {
                "name": "What Is Semantic HTML?",
                "description": "<p><strong>Semantic HTML</strong> is all about adding meaning to the content on a web page, rather than merely define its appearance. <strong>Semantic HTML</strong> helps search engines, screen readers, and other user devices determine the significance and context of web content.</p><p><strong>Advantages are</strong><br>1. Clearer code and easier to maintain<br>2. Help your site be accessible for screen reading softwares.<br>3. Improve your SEO positioning</p><p>Semantic Tags</p><ul><li>Header tags &lt;h1&gt;&nbsp;through &lt;h6&gt;</li><li>&lt;blockquote&gt;</li><li>&lt;code&gt;</li><li>&lt;em&gt;</li><li>&lt;abbr&gt;</li><li>&lt;acronym&gt;</li><li>&lt;address&gt;</li><li>&lt;cite&gt;</li><li>&lt;strong&gt;</li><li>&lt;em&gt;</li><li>&lt;pre&gt;</li><li>&lt;sub&gt;</li><li>&lt;sup&gt;</li></ul>"
            },
            {
                "name": "Difference between HTML elements and tags",
                "description": "<table><tbody><tr><td><b>HTML Elements</b></td><td><b>Tags</b></td></tr><tr><td>1. The element is an individual component of the HTML web page or document that consists of a start tag, its attributes, an end tag, and everything in between.&nbsp;</td><td>1. HTML tag (either opening or closing) is used to mark the start or end of an element.</td></tr><tr><td>2. They usually consist of a start tag, content, and an end tag.</td><td>2. They begin with &lt; symbol and end with &gt; symbol. Whatever is written inside &lt; and &gt; are called tags.</td></tr><tr><td>3. HTML Elements hold the content.</td><td>&nbsp;3. HTML Tags hold the HTML element.</td></tr><tr><td>4. They specify the general content.</td><td>4. HTML tags are like keywords. Each tag has a unique meaning.</td></tr><tr><td>5. For example, &lt;p&gt;This is an example of a paragraph.&lt;/p&gt;</td><td>5. For example, &lt;a&gt; is an opening anchor tag and &lt;/a&gt; is a closing anchor tag.</td></tr></tbody></table>"
            },
            {
                "name": "What are HTML Attributes?",
                "description": "<p>HTML attributes provide additional information about HTML elements. They are defined directly after the tag name. They only appear in opening tags and not in closing tags.</p><p>HTML attributes usually consist of name/value pairs like name=”value”.</p><p>Some commonly used HTML attributes include src Attribute, alt Attribute, id Attribute, and href Attribute.</p>"
            },
            {
                "name": "Explain the layout of HTML",
                "description": "<p>HTML layout represents how all the elements in the document are arranged</p><ul><li>&lt;header&gt;: define a header for a document or a section.</li><li>&lt;nav&gt;: defines a container for navigation links</li><li>&lt;section&gt;: it defines a section in a document</li><li>&lt;article&gt;: define an independent, self-contained article</li><li>&lt;aside&gt;: it defines content aside from the content</li><li>&lt;footer&gt;: define a footer for a document or a section</li><li>&lt;details&gt;: define additional details</li></ul>"
            },
            {
                "name": "What are the building blocks of HTML5?",
                "description": "<ul><li><strong>Semantics</strong> - Allowing you to describe more precisely what your content is.</li><li><strong>Connectivity</strong> - Allowing you to communicate with the server in new and innovative ways.</li><li><strong>Offline and storage</strong> - Allowing webpages to store data on the client-side locally and operate offline more efficiently.</li><li><strong>Multimedia</strong> - Making video and audio first-class citizens in the Open Web.</li><li><strong>2D/3D graphics and effects</strong> - Allowing a much more diverse range of presentation options.</li><li><strong>Performance and integration</strong> - Providing greater speed optimization and better usage of computer hardware.</li><li><strong>Device access</strong> - Allowing for the usage of various input and output devices.</li><li><strong>Styling</strong> - Letting authors write more sophisticated themes.</li></ul>"
            },
            {
                "name": "Briefly describe the correct usage of the following HTML5 semantic elements: <header>, <article>, <section>, <footer>",
                "description": "<ul><li><p><code>&lt;header&gt;</code> is used to contain introductory and navigational information about a section of the page. This can include the section heading, the author's name, time and date of publication, table of contents, or other navigational information.</p></li><li><p><code>&lt;article&gt;</code> is meant to house a self-contained composition that can logically be independently recreated outside of the page without losing it's meaining. Individual blog posts or news stories are good examples.</p></li><li><p><code>&lt;section&gt;</code> is a flexible container for holding content that shares a common informational theme or purpose.</p></li><li><p><code>&lt;footer&gt;</code> is used to hold information that should appear at the end of a section of content and contain additional information about the section. Author's name, copyright information, and related links are typical examples of such content.</p></li></ul>"
            },
            {
                "name": "What were some of the key goals and motivations for the HTML5 specification?",
                "description": "<p>HTML5 was designed to replace HTML 4, XHTML, and the HTML DOM Level 2. The key goals and motivations behind the HTML5 specification were to:</p><ul><li>Deliver rich content (graphics, movies, etc.) without the need for additional plugins, such as Flash.</li><li>Provide better semantic support for web page structure through new structural element tags.</li><li>Provide a stricter parsing standard to simplify error handling, ensure more consistent cross-browser behaviour, and simplify compatibility with documents written to older standards.</li><li>Provide better cross-platform support whether running on a PC, Tablet, or Smartphone.</li></ul>"
            },
            {
                "name": "Explain meta tags in HTML?",
                "description": "<ul><li><strong>Meta tags</strong> always go inside <strong>head tag</strong> of the HTML page</li><li><strong>Meta tags</strong> is always passed as name/value pairs</li><li><strong>Meta tags</strong> are not displayed on the page but intended for the browser</li><li><strong>Meta tags</strong> can contain information about <strong>character encoding</strong>, <strong>description</strong>, <strong>title</strong> of the document etc,</li></ul>"
            },
            {
                "name": "What is Character Set / Encoding?",
                "description": "<p>To display an HTML page correctly, a web browser must know which character set (character encoding) to use. This is specified in the <meta> tag:<br><code>&lt;meta charset='UTF-8'&gt;</code></p>"
            },
            {
                "name": "How do I modify the url without reloading the page? or History",
                "description": "<p> HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively.<br><code>window.history.pushState('page2', 'Title', '/page2.html');</code></p>"
            },
            {
                "name": "How can you highlight or mark text in HTML??",
                "description": "<p><code>&lt;mark&gt;highlighted text&lt;/mark&gt;</code><br>or<br><code>&lt;span style='background-color: #FFFF00'&gt;Yellow text.&lt;/span&gt;</code></p>"
            },
            {
                "name": "Difference between HTML attribute and DOM property?",
                "description": "<p>Attributes are defined by Html, whereas properties are defined by the DOM. Attribute initialize DOM properties, once the initialization complete the attribute job is done. Property value can change, whereas attribute value can’t.</p>"
            },
            {
                "name": "Block, inline and inline-block elements?",
                "description": "<p>*Block elements* are those that take up the full width available on a web page, and blocks out any other elements from sitting next to it on the left or right. <br> *Inline elements* are those who only take up as much width as is needed to display the contents of the element, thereby allowing other elements to be in line with the inline element.<br> *Inline block elements* are similar to inline elements, except they can have padding and margins and set height and width values.</p>"
            },
            {
                "name": "When is it appropriate to use the small element?",
                "description": "<p>The HTML <code>&lt;small&gt;</code> element makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser's minimum font size. In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation.</p>"
            },
            {
                "name": "Doctype in HTML?",
                "description": "<p>Doctype stands for Document Type Declaration. It informs the web browser about the type and version of HTML used in building the web document. This helps the browser to handle and load it properly.<br> <code>&lt;!DOCTYPE html&gt;</code> </p>"
            },
            {
                "name": "Difference between localStorage, sessionStorage and cookies?",
                "description": "<p>#<strong>localStorage</strong> stores information as long as the user does not delete them. Strorage sizes 5MB. The data can be shared between multiple windows of the browser.<br><img src='./assets/js/local.png'><br><br>#<strong>sessionStorage</strong>  stores information as long as the session goes. Usually until the user closes the tab/browser. Data is accessible only in the current window of the browser.<br><img src='./assets/js/session.png'><br><br>#<strong>Cookies</strong>The data is sent back to the server for every HTTP request increasing the amount of traffic between client and server. The 4Kb is the limit for the entire cookie, including name, value, expiry date etc <br>#One of the most important differences over <strong>local/session strorage</strong> with a <strong>cookies</strong>, data does not have to be sent back and forth with every HTTP request.</p><br><img src='./assets/js/cookies.png'>"
            },
            {
                "name": "Explain an image map in HTML",
                "description": "<p><strong>Ans.</strong> An image map is defined by the &lt;map&gt; tag. Using this the image map tag, we can linking the different web pages using a single image. We can add one or more clickable areas in a single image using&nbsp;&lt;area&gt; tags.</p>"
            },
            {
                "name": "What is XHTML?",
                "description": "<p>XHTML stands for EXtensible HyperText Markup Language</p><p>XHTML is more extensible and flexible to work with other data formats (such as XML). In addition, browsers ignore errors in HTML pages, and try to display the website even if it has some errors in the markup. So XHTML comes with a much stricter error handling.</p><p>The Most Important Differences from HTML as follows</p><ul><li>&lt;!DOCTYPE&gt; is <strong>mandatory</strong></li><li>The xmlns attribute in &lt;html&gt; is <strong>mandatory</strong></li><li>&lt;html&gt;, &lt;head&gt;, &lt;title&gt;, and &lt;body&gt; are <strong>mandatory</strong></li><li>Elements must always be <b>properly nested</b> within each other(e.g. <code>&lt;b&gt;&lt;i&gt;Some text&lt;/i&gt;&lt;/b&gt;</code> )</li><li>Elements must always be <b>closed</b></li><li>Elements must always be in <b>lowercase</b></li><li>Attribute names must always be in <b>lowercase</b></li><li>Attributes values must be enclosed in <b>quotes</b></li><li>Attribute minimization is forbidden (e.g. one has to use <code>checked='checked'</code> instead of <code>checked</code>)</li></ul><ul>"
            },
            {
                "name": "What is the difference between HTML and XHTML?",
                "description": "<table><tbody><tr><td><b>HTML</b></td><td><b>XHTML</b></td></tr><tr><td>HTML stands for Hypertext Markup Language.</td><td>XHTML stands for Extensible Hypertext Markup Language.</td></tr><tr><td>It is extended from SGML (Standard Generalized Markup Language).</td><td>It has features of both XML and HTML.</td></tr><tr><td>HTML is a static Web Page.</td><td>XHTML is a dynamic Web Page.</td></tr><tr><td>It uses a document file format.</td><td>It uses markup language.</td></tr><tr><td>HTML is about displaying information.</td><td>It is about describing the information.</td></tr><tr><td>Not case sensitive.</td><td>XHTML is case-sensitive. Every tag and attribute should be in lower case.</td></tr><tr><td>Not necessary to close the tags in the order they are opened.</td><td>It is necessary to close the tags in the order they are opened.</td></tr><tr><td>All content can be included in the body element.</td><td>All contents must be put in blocks.</td></tr><tr><td>It requires a lenient HTML-specific parser.</td><td>Parsing is done with a standard XML parser.</td></tr></tbody></table>"
            },
            {
                "name": "How do you set IE compatibility mode?",
                "description": "<p><code>&lt;meta http-equiv='X-UA-Compatible' content='IE=edge' /&gt;</code> - IE=edge mode tells Internet Explorer to display content in highest mode available</p>"
            },
            {
                "name": "What is URL Encoding? Why are URLs encoded in HTML?",
                "description": "<p> URL Encoding is the process of encoding non-ASCII characters in URLs to a format that is universally accepted by web browsers. URLs are sent over the Internet using the ASCII character set. If a URL contains characters outside the ASCII set, the URL has to be converted.</p><p>URL is encoded in HTML as it converts non-ASCII characters into a format that can be transmitted over the web. The URL encoding replaces non-ASCII characters with a “%” followed by hexadecimal digits.</p>"
            },
            {
                "name": "What is the use of the figure tag in HTML 5",
                "description": "<p> The &lt;figure&gt; tag identifies self-contained content related to the main content. It is used for adding self-contained content like photos, diagrams, illustrations, etc. The figure, its caption, and its contents are referenced as a single unit from the main flow of the document. The &lt;figure&gt; tag has two elements img src and figcaption. Img src is used for adding image source in a document while figcaption sets the caption of an image.</p>"
            },
            {
                "name": "If there isn’t any text in between the HTML tags, what will happen?",
                "description": "<p> If no text is present in between the tags, there would be nothing to format. As a result, nothing will show up on the screen. Some tags, such as those that don’t have a closing tag, like the &lt;img&gt; tag, don’t need any text in between them.</p>"
            },
            {
                "name": "What is the use of Geolocation API in HTML5?",
                "description": "<p>One of the best HTML5 APIs is Geolocation API which is used to determine the geographical location of the user for a web application. With HTML5, you can now browse to the visitor’s current website’s latitude and longitude coordinates. These coordinates can be recorded by JavaScript and sent to the server, allowing it to display your position on the page. The geolocation API is used with navigation.geolocation object. A Geolocation object that contains the user’s location information and can produce a customized result is returned via the read-only property of the object. Syntax: <br><strong><code>var geolocation = navigator.geolocation</code></strong><br><img src='./assets/html/geoexample.png'></p>"
            },
            {
                "name": "What is the benefit of collapsing the white space in HTML?",
                "description": "<p>it helps to reduce the size of the HTML document, which can improve the performance and loading time of a web page.</p><p>Collapsing white space eliminates unnecessary spaces, newline characters, and indentations, which can be present in the HTML code but are not visible in the rendered web page.</p><p>By removing these extra spaces, the HTML document becomes smaller and easier to parse and render, resulting in faster performance and better user experience.</p>"
            },
            {
                "name": "What is the use of the MathML element in HTML5",
                "description": "<p>Mathematics Markup Language is known as MathML. Like other HTML elements, it is used to display mathematical statements or equations in web browsers.<br><img src='./assets/html/mathml.png'><br><img src='./assets/html/mathml1.png'></p>"
            },
            {
                "name": "Is it possible for the text to occasionally appear elsewhere other than the browser?",
                "description": "<p>The text is automatically wrapped to fit the browser window by default. The text might, however, go outside the browser window if it is a component of a table cell with a fixed width.</p>"
            },
            {
                "name": "What is the difference between meter and progress tag?",
                "description": "<p>The meter tag measures data within a specified range, whereas the progress tag just represents the task’s progress.</p>"
            },
            {
                "name": "What is data transfer API?",
                "description": "<p>The management of data transfers from one user to another within a domain is handled by the Data Transfer API. This transfer can be used, for example, to redistribute application data that belonged to a user who has left the company. You must first define a transfer before starting it with the insert method in order to use the Data Transfer API. The transfer can include application-specific parameters and is described in terms of one or more apps whose data will be transmitted.</p><ul><li>Choose which application(s) you want to transmit data to.</li><li>Create a transfer resource that lists the users at the source and destination as well as the programs to which the data is to be sent.</li><li>To add the transfer request, use the insert method.</li></ul>"
            },
            {
                "name": "What does HTML5’s application cache do and why is it necessary?",
                "description": "<p>The HTML 5 application cache functionality is used to cache website data, making it accessible even when there is no internet connection. For desktop-based web applications that need to save data on local systems, it is highly helpful.</p>"
            },
            {
                "name": "What is the use of the <output> tag in HTML and what are its attributes?",
                "description": "<p><strong>Ans.</strong> To represent a result for any kind of calculation in HTML &lt;output&gt; tag is used. Its attributes are mentioned below:</p><ul><li>for: It outlines the connection between the calculation’s inputs and outputs.</li><li>form: This specifies the form to which the output element belongs.</li><li>name: An &lt;output&gt; element’s name is specified via the name attribute.</li></ul>"
            },
            {
                "name": "Describe the difference between <script>, <script async> and <script defer>?",
                "description": "<ul><li><code>&lt;script&gt;</code> - HTML parsing is blocked, the script is fetched and executed immediately, HTML parsing resumes after the script is executed.</li><li><code>&lt;script async&gt;</code> - The script will be fetched in parallel to HTML parsing and executed as soon as it is available (potentially before HTML parsing completes). Use <code>async</code> when the script is independent of any other scripts on the page, for example, analytics.</li><li><code>&lt;script defer&gt;</code> - The script will be fetched in parallel to HTML parsing and executed when the page has finished parsing. If there are multiple of them, each deferred script is executed in the order they were encoun­tered in the document. If a script relies on a fully-parsed DOM, the <code>defer</code> attribute will be useful in ensuring that the HTML is fully parsed before executing. There's not much difference in putting a normal <code>&lt;script&gt;</code> at the end of <code>&lt;body&gt;</code>. A deferred script must not contain <code>document.write</code>.</li></ul>"
            },
            {
                "name": "What is WebP?",
                "description": "<ul><li>WebP is an image format like <strong>jpg</strong>, <strong>png</strong> which is <strong>approximately</strong> <strong>10-20% less</strong> in size than other formats.</li><li>Developed and <strong>introduced</strong> by <strong>Google</strong> in <strong>2010</strong>.</li><li>Not all the browsers <strong>support</strong> WebP.</li><li>Plugins are available to convert other formats to <strong>WebP</strong>.</li></ul>"
            },
            {
                "name": "What is progressive rendering?",
                "description": "<p>Progressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.</p><p>Examples of such techniques:</p><ul><li>Lazy loading of images - Images on the page are not loaded all at once. JavaScript will be used to load an image when the user scrolls into the part of the page that displays the image.</li><li>Prioritizing visible content (or above-the-fold rendering) - Include only the minimum CSS/content/scripts necessary for the amount of page that would be rendered in the users browser first to display as quickly as possible, you can then use deferred scripts or listen for the <code>DOMContentLoaded</code>/<code>load</code> event to load in other resources and content.</li></ul>"
            },
            {
                "name": "Why you would use a `srcset` attribute in an image tag? Explain the process the browser uses when evaluating the content of this attribute?",
                "description": "<p>The srcset attribute is used when you want to show different images to users depending on their device display width - showing higher quality images to devices with retina display enhances the user experience while showing lower resolution images to low-end devices increase performance and decrease data wastage</p><p>For example: &lt;img srcset='small.jpg 500w, medium.jpg 1000w, large.jpg 2000w' src='default.png'&gt; tells the browser to display the small, medium or large .jpg graphic depending on the client's resolution. The first value is the image name and the second is the width of the image in pixels. For a device width of 320px, the following calculations are made: <br><br> <code> 500 / 320 = 1.5625<br> 1000 / 320 = 3.125 <br> 2000 / 320 = 6.25</code></p>"
            },
            {
                "name": "Why is it generally a good idea to position CSS <link>s between <head></head> and JS <script>s just before </body>? Do you know any exceptions?",
                "description": "<p>The main reason as to why <strong>JS</strong> files are linked at the bottom of the body is because whenever a browser encounters any JS, it parses it and executes that on the spot. Hence if it was to be added at the top, it would make the page rendering slow and thus it would take more time for page load.</p><p>CSS files are linked in the head because they get applied regardless of DOM already rendered or not. Hence the webpage looks elegant as soon as the page loads.</p><p>However just like JS if you can link the CSS at the end , this would mean that the webpage will first loads with just plain HTML and then the CSS is applied to it. If in case the user has slow Internet connection, the CSS load would take lot of time, which means that the webpage shows just the HTML during the mean time. This might make the user close the website without waiting for it to load fully.</p>"
            },
            {
                "name": "Setting The Viewport?",
                "description": "<code>&lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt;</code>"
            },
            {
                "name": "How Can I Get Indexed Better by Search Engines?",
                "description": "<p>It is possible to get indexed better by placing the following 'keyword and description' statements in the <code>&lt;HEAD&gt;</code> part of your documents:</p><p><code><META NAME='keywords' CONTENT='keyword, keyword_1, keyword_2, keyword_3'>      <META NAME='description' CONTENT='description of your site'></code></p><p>Both may contain up to 1022 characters. If a keyword is used more than 7 times, the keywords tag will be ignored altogether. Also, you cannot put markup (other than entities) in the description or keywords list.</p>"
            },
            {
                "name": "How can you highlight text in HTML?",
                "description": "&lt;mark&gt;highlighted text&lt;</mark&gt;"
            },
            {
                "name": "When is it appropriate to use the small element?",
                "description": "<p>The HTML <code>&lt;small&gt;</code> element makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser's minimum font size. In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation.</p>"
            },
            {
                "name": "How do you serve a page with content in multiple languages?",
                "description": "<p>When an HTTP request is made to a server, the requesting user agent usually sends information about language preferences, such as in the <code>Accept-Language</code> header. The server can then use this information to return a version of the document in the appropriate language if such an alternative is available. The returned HTML document should also declare the <code>lang</code> attribute in the <code>&lt;html&gt;</code> tag, such as <code>&lt;html lang='en'&gt;...&lt;/html&gt;</code>.</p><p>In the back end, the HTML markup will contain <code>i18n</code> placeholders and content for the specific language stored in YML or JSON formats. The server then dynamically generates the HTML page with content in that particular language, usually with the help of a back end framework.</p>"
            },
            {
                "name": "What is the purpose of cache busting and how can you achieve it?",
                "description": "<p>Cache busting is the process of forcing the browser to download the new files. This is done by naming the file something different to the old file.</p><p>A common technique to force the browser to re-download the file is to append a query string to the end of the file.</p><ul><li><code>src='js/script.js'</code> =&gt; <code>src='js/script.js?v=2'</code></li></ul><p>The browser considers it a different file but prevents the need to change the file name.</p>"
            },
            {
                "name": "What are Web Workers?",
                "description": "<ul><li><strong>Web Workers</strong> helps us to run <strong>javascript code</strong> in the <strong>background</strong> <strong>without blocking</strong> application.</li><li><strong>Web Workers</strong> runs in an <strong>isolated (new) thread</strong> for <strong>executing</strong> our javascript code.</li><li><strong>Web Workers</strong> are usually used for <strong>large tasks</strong>.</li><li><strong>Web Workers</strong> needs a <strong>seperate file</strong> for our javascript code.</li><li><strong>Web Workers</strong> files are <strong>downloaded</strong> <strong>asynchronously</strong>.</li><li><strong>Web Workers</strong> are<strong>supported</strong> in all <strong>latest</strong> browser.</li></ul><br><br><p>There are three types of web workers</p><ul><li><strong>Dedicated Workers </strong>- These are workers that are utilized by a single script.</li><li><strong>Shared Workers</strong> -These are workers that are utilized by multiple scripts running in different windows, IFrames, etc.</li><li><strong>Service Workers</strong> - These act as proxy servers between web applications, the browser, and the network. Mostly used for push notifications and sync APIs.</li></ul><p>Example</p><br><img src='./assets/html/webworker.png'>"
            },
            {
                "name": "How would you select svg or canvas for your site?",
                "description": "<p>SVG is a language for describing 2D graphics in XML. Canvas draws 2D graphics, with a JavaScript. The differences between SVG and Canvas would be helpful in selecting the right one.</p><p><strong>Canvas</strong></p><ul><li>Resolution dependent</li><li>No support for event handlers</li><li>Poor text rendering capabilities</li><li>You can save the resulting image as .png or .jpg</li><li>Well suited for graphic-intensive games</li></ul><p><strong>SVG</strong></p><ul><li>Resolution independent</li><li>Support for event handlers</li><li>Best suited for applications with large rendering areas (Google Maps)</li><li>Slow rendering if complex (anything that uses the DOM a lot will be slow)</li><li>Not suited for game application</li></ul><p><strong>Conclusion:</strong> </p><ul><li>SVG is better for applications and apps with few items</li><li>Canvas is better for thousands of objects and careful manipulation, but a lot more code (or a library) is needed to get it off the ground.</li></ul>"
            },
            {
                "name": "Why is it generally a good idea to position CSS's between head and JS's just before body tags? Do you know any exceptions?",
                "description": "<p><strong>Placing <code>&lt;link&gt;</code>s in the <code>&lt;head&gt;</code></strong></p><p>Putting <code>&lt;link&gt;</code>s in the head is part of the specification. Besides that, placing at the top allows the page to render progressively which improves the user experience. The problem with putting stylesheets near the bottom of the document is that it prohibits progressive rendering in many browsers, including Internet Explorer. Some browsers block rendering to avoid having to repaint elements of the page if their styles change. The user is stuck viewing a blank white page. It prevents the flash of unstyled contents.</p><p><strong>Placing <code>&lt;script&gt;</code>s just before <code>&lt;/body&gt;</code></strong></p><p><code>&lt;script&gt;</code>s block HTML parsing while they are being downloaded and executed. Downloading the scripts at the bottom will allow the HTML to be parsed and displayed to the user first.</p><p>An exception for positioning of <code>&lt;script&gt;</code>s at the bottom is when your script contains <code>document.write()</code>, but these days it's not a good practice to use <code>document.write()</code>. Also, placing <code>&lt;script&gt;</code>s at the bottom means that the browser cannot start downloading the scripts until the entire document is parsed. One possible workaround is to put <code>&lt;script&gt;</code> in the <code>&lt;head&gt;</code> and use the <code>defer</code> attribute.</p>"
            },
            {
                "name": "What is accessibility & ARIA role means in a web application?",
                "description": "<p>Accessibility means letting the user navigate and interact with a website by any means. Let it be a keyboard, a mouse or people with disabilities or impairments.</p><ul><li><strong>ARIA</strong> stands for <strong>Accessible Rich Internet Application</strong>.</li><li><strong>ARIA</strong> is a <strong>spec</strong> from <strong>W3C</strong>.</li><li><strong>ARIA</strong> is created to <strong>improve accessibility</strong> in <strong>web applications</strong>.</li><li><strong>ARIA</strong> provides a <strong>extra information</strong> to <strong>screen readers</strong> via <strong>HTML attributes</strong>.</li><li><strong>ARIA</strong> <strong>doesn't affect</strong> how <strong>an element</strong> is <strong>rendered</strong> in a browser.</li></ul>"
            },
            {
                "name": "Make your Stream videos accessible to people with disabilities",
                "description": "<ul><li>Include captions and subtitles for videos</li><li>Include a unique and descriptive video title</li><li>Include a description for your video</li></ul>"
            },
            {
                "name": "Base Tag",
                "description": "<p>The <code>&lt;base&gt;</code> tag specifies the base URL and/or target for all relative URLs in a document.</p>"
            },
            {
                "name": "Optimize, increase website speed",
                "description": "<ul><li><strong>Reduce the Number of HTTP Requests</strong> - Your first step should be to eliminate requests that are simply unnecessary. One should remove any unnecessary images, JavaScript files, stylesheets, fonts, etc.</li><li><strong>Optimize Image Sizes</strong> - If your images are not compressed, or if you use too high of a resolution it will slow down your website's performance.</li><li><strong>Use a Content Delivery Network (CDN)</strong> - CDNs will optimize the delivery of static files such as CSS, images, fonts, and JavaScript to your visitors. CDNs use geographically distributed servers. What this means is that the server closest to your visitor will be serving the files.</li><li><strong>Minify and Combine CSS, JavaScript, and HTML Files</strong> - This is accomplished by minifying and combining separate JS and CSS files into single bundles</li><li><strong>Load JavaScript Asynchronously</strong> - If you set the async flag on the <code>script</code> tag then the browser will load the script asynchronously. It will continue parsing the page while the script is loaded.<br>We also suggest moving the &lt;script&gt; tags to the bottom of the page, near the closing <code>&lt;/body&gt;</code> tag. This way older browsers that don’t support the async attribute will load the script after parsing the rest of the page.</li><li><strong>Write Mobile-First Code</strong> - As Google mainly uses the mobile version of websites in its rankings, it's recommended to think mobile-first when it comes to designing and optimising your site's speed.</li><li><strong>Consider Using Prefetch, Preconnect, and Prerender Techniques</strong> - There are different prefetching and preloading techniques that you can use to give hints to the browser about which resources will be required to render the page before the browser actually needs those resources.<br><strong>DNS prefetching</strong> - You can tell the browser that certain domain names will need to be resolved to an IP address before the browser actually sees resources from that domain name<br><img src='./assets/html/dnsprefetch.png'><br><strong>TCP preconnect</strong> - allows the browser to set up early connections before an HTTP request is actually sent to the server, Connections such as TCP Handshake, and TLS negotiation can be initiated beforehand, eliminating roundtrip latency for those connections and saving time for users<br><img src='./assets/html/tcppreconnect.png'><br><strong>Prefetching</strong> - If we’re certain that a specific resource will be required in the future, then we can ask the browser to request that item and store it in the cache for reference later.<br><img src='./assets/html/prefetch.png'><br><strong>Prerendering</strong> - This should be reserved for when you really know that the next step a user will take is to go to a certain page. You can instruct the browser to prerender the complete page, along with downloading all the required assets by specifying the URL like this:<br><img src='./assets/html/prerender.png'></li><li><strong>Leverage Browser Caching</strong> means <strong>storing static files of a website in visitor browser</strong>. And then retrieving them from browser quickly instead again from server. Actually it uses to speed up each page of a website.<br>The code below tells browsers what to cache and how long to remember it. It should be added to the top of your .htaccess file.<br><strong>Mod Headers</strong><br><img src='./assets/html/lc_htaccess_mod_headers.png'></li><li><strong>Enabling GZIP compression</strong> - GZip Compress the files like html , js and css files while serving the request to the browser. As size of the file is reduced it is served to the user in faster manner<br>How to check<br><img src='./assets/html/gzip.png'><br><br><img src='./assets/html/mod_deflate.png'><br><img src='./assets/html/mod_gzip.png'></li></ul>"
            },
            {
                "name": "How to optimize website assets loading?",
                "description": "<p>To optimize website load time we need to optimize its asset loading and for that:</p><ul><li><strong>CDN hosting</strong> - A CDN or content delivery network is geographically distributed servers to help reduce latency.</li><li><strong>File compression</strong> - This is a method that helps to reduce the size of an asset to reduce the data transfer</li><li><strong>File concatenation</strong> - This reduces the number of HTTP calls</li><li><strong>Minify scripts</strong> - This reduces the overall file size of js and CSS files</li><li><strong>Parallel downloads</strong> - Hosting assets in multiple subdomains can help to bypass the download limit of 6 assets per domain of all modern browsers. This can be configured but most general users never modify these settings.</li><li><strong>Lazy Loading</strong> - Instead of loading all the assets at once, the non-critical assets can be loaded on a need basis.</li></ul>"
            },
            {
                "name": "What are the different kinds of Doctypes available?",
                "description": "<p>The three kinds of Doctypes which are available:</p><ul><li>Strict Doctype</li><li>Transitional Doctype</li><li>Frameset Doctype</li></ul>"
            },
            {
                "name": "What is the significance of <head> and <body> tag in HTML?",
                "description": "<p>&lt;head&gt; tag provides the information about the document. This tag contains the metadata about the webpage and other tags like &lt;link&gt;, &lt;meta&gt;, &lt;style&gt;, &lt;script&gt;, etc. are not displayed on the web page. Also, there can be only 1 &lt;head&gt; tag in the entire Html document and will always be before the &lt;body&gt; tag.</p><p>&lt;body&gt; tag defines the body of the HTML document. All the contents which needs to be displayed on the web page like images, text, audio, video, contents, using elements like &lt;p&gt;, &lt;img&gt;, &lt;audio&gt;, &lt;heading&gt;, &lt;video&gt;, &lt;div&gt;, etc. will always be enclosed by the &lt;body&gt; tag.</p>"
            },
            {
                "name": "Difference between link tag <link> and anchor tag <a>?",
                "description": "<p>The anchor tag &lt;a&gt; is used to create a hyperlink to another webpage or to a certain part of the webpage and these links are clickable, whereas, link tag &lt;link&gt; defines a link between a document and an external resource and these are not clickable.</p>"
            },
            {
                "name": "When to use scripts in the head and when to use scripts in the body?",
                "description": "<p>If the scripts contain some event-triggered functions or jquery library then we should use them in the head section. If the script writes the content on the page or is not inside a function then it should be placed inside the body section at the bottom. In short, follow below three points:</p><ol><li>Place library scripts or event scripts in the head section.</li><li>Place normal scripts that do not write anything on the page, in the head section until there is any performance issue.</li><li>Place scripts that render something on the web page at the bottom of the body section.</li></ol>"
            },
            {
                "name": "What are some of the advantages of HTML5 over its previous versions?",
                "description": "<ul><li>Included new Semantic tags and form control tags.</li><li>It has Multimedia Support.</li><li>It has the capabilities to store offline data using SQL databases and application cache.</li><li>Javascript can be run in the background.</li><li>HTML5 also allows users to draw various shapes like rectangles, circles, triangles, etc.</li></ul>"
            },
            {
                "name": "Difference between <figure> tag and <img> tag?",
                "description": "<p>The &lt;figure&gt; tag specifies the self-contained content, like diagrams, images, code snippets, etc. &lt;figure&gt; tag is used to semantically organize the contents of an image like image, image caption, etc., whereas the &lt;img&gt; tag is used to embed the picture in the HTML5 document.</p>"
            },
            {
                "name": "Is the <datalist> tag and <select> tag same?",
                "description": "<p>No. The &lt;datalist&gt; tag and &lt;select&gt; tag are different. In the case of &lt;select&gt; tag a user will have to choose from a list of options, whereas &lt;datalist&gt; when used along with the &lt;input&gt; tag provides a suggestion that the user selects one of the options given or can enter some entirely different value.</p>"
            },
            {
                "name": "What is new about the relationship between the <header> and <h1> tags in HTML5?",
                "description": "<p>As HTML5 was all about better semantics and arrangements of the tags and elements, the &lt;header&gt; tag specifies the header section of the webpage. Unlike in previous version there was one &lt;h1&gt; element for the entire webpage, now this is the header for one section such as &lt;article&gt; or &lt;section&gt;. According to the HTML5 specification, each &lt;header&gt; element must at least have one &lt;h1&gt; tag.</p>"
            },
            {
                "name": "What are raster images and vector images?",
                "description": "<p><strong>Raster Images</strong> - The raster image are basically arrangement of pixels in a grid with exactly what color the pixel should be. Few raster file formats include PNG(.png), JPEG(.jpg), etc.<br><strong>Vector Images</strong> - The vector image is defined with shape and path definitions that can be used to render the image on-screen written in a similar markup fashion. The file extension is .svg</p>"
            },
            {
                "name": "How to support SVG in old browsers?",
                "description": "<p>To support old browsers instead of defining the resource of svg in src attribute of &lt;img&gt; tag, it should be defined in srcset attribute and in src the fallback png file should be defined.</p><p><code>&lt;img src=\"circle.png\" alt=\"circle\" srcset=\"circle.svg\"&gt;</code></p>"
            },
            {
                "name": "What is a manifest file in HTML5?",
                "description": "<p>The manifest file is used to list down resources that can be cached. Browsers use this information to make the web page load faster than the first time. There are 3 sections in the manifest file</p><ul><li><strong>CACHE Manifest</strong> - Files needs to be cached</li><li><strong>Network</strong> - File never to be cached, always need a network connection.</li><li><strong>Fallback</strong> - Fallback files in case a page is inaccessible</li></ul><p><img src='./assets/html/cache.png'></p>"
            },
            {
                "name": "Check HTML Markup Validity",
                "description": "<p><strong>Problem</strong> - Consider the following markup. Is it valid? If not, can you explain why?<br><img src='./assets/html/html.png'></p><br><br><p><strong>Answer</strong> - The markup uses the relatively new picture element. The code is all valid apart from the last image specified in the srcset attribute. <code>320y</code> is not a valid value, and the <code>y</code> should be replaced with a <code>w</code>.</p>"
            },
            {
                "name": "What are Web Components?",
                "description": "<ul><li>Web components are a set of web platform API.</li><li>Web components allow us to create <strong>custom re-usable widgets</strong> or <strong>component</strong> in a web application. </li><li>Web components are a <strong>part of the browser</strong> and <strong>will work</strong> across <strong>all modern browser</strong>.</li><li>Web components <strong>doesn't require</strong> need <strong>any external libraries</strong> to <strong>work</strong>.</li></ul><br><br><p><strong>Features</strong></p><ul><li>Custom Elements - let write our <strong>own fully featured</strong> DOM elements.</li><li>Shadow DOM - gives the best feature of a <strong>iframe, style and markup</strong> for the web page.</li><li>HTML Templates - allows to <strong>store</strong> some <strong>markup on the web page</strong> and we can later <strong>clone</strong> and <strong>reuse</strong> them.</li><li>HTML Imports - allow to <strong>import</strong> an <strong>external HTML document</strong>.</li></ul>"
            },
            {
                "name": "What is an IndexedDB?",
                "description": "<ul><li><strong>IndexedDB</strong> is javascript based <strong>object oriented database</strong>.</li><li><strong>IndexedDB</strong>is useful when we want to store <strong>large amount</strong> of <strong>data</strong> in a web applications.</li><li><strong>IndexedDB</strong> stores data as <strong>key-value</strong> pair.</li><li><strong>IndexedDB</strong> is an <strong>asynchronous></strong> API.</li><li><strong>IndexedDB</strong> is <strong>supported</strong></a> in <strong>most of browsers</strong>.</li></ul>"
            },
            {
                "name": "What is ARIA? While creating a Tab module how you will decide the ARIA tags?",
                "description": "<p>ARIA stands for Accessible Rich Internet Application. ARIA is useful for screenreader users.</p><p>ARIA provides information about such modules by defining the roles, properties, and states for screenreaders.</p><p>In short, ARIA is the bridge between missing information in HTML and screenreaders.</p>"
            },
            {
                "name": "Is the below code accessible or not? Why?",
                "description": "<p><strong>Problem</strong> - <br><img src='./assets/html/cssaccessbility.png'></p><br><br><p><strong>Answer</strong> - No, the above code is not accessible one of the issues is the content is coming from the CSS which will be not be picked by the screen readers.</p><br><br><br><p><strong>Problem</strong> - <br><img src='./assets/html/cssaccessbility1.png'></p><br><br><p><strong>Answer</strong> - No, the above code is not accessible due to the alt tag. Though I am assuming here based on the image name it is decorative image only and for screen readers this alt tag is not adding any value at all.</p>"
            },
            {
                "name": "As a senior developer how you will make sure that accessibility is getting followed?",
                "description": "<p>First of all - \"Accessibility is not a feature. It is a human right\". I strongly believe in this. Hence, instead of setting my team's expectation that they will get the requirement from the client or product manager about accessibility, I will ask them to focus on writing the right code. As well, I will make sure that every developer is using the ESA11y plugin in their code editor, lighthouse test, and integrated with the CI pipeline.</p>"
            },
            {
                "name": "For accessibility should we use em or rem?",
                "description": "<p>For accessibility, it is preferred to use rem for the margin/padding and em for the font-size. One more way we can do here is:</p><p><code><strong>\"html{ font-size: 100%; }\"</strong></code></p><p>The above code snippet is going to help the users to take the font-size according to the user's setting.</p>"
            },
            {
                "name": "Why type is important in the input?",
                "description": "<p>The HTML type attribute is important for screenreader users. The types will help them to understand what input type it is as well as the security reason associated with the password field. If the password type is missing then the screenreader will speak aloud the password user is entering.</p>"
            },
            {
                "name": "What is an accessibility tree?",
                "description": "<p>Just like we have the DOM similarly we have the accessibility tree. We can see this tree in the firefox and Chrome debugger too. This helps the developer to see how the accessibility elements are getting added such as role, focusable, alt tag, aria-labeldby, etc.</p>"
            },
            {
                "name": "What are tags and attributes in HTML?",
                "description": "<p>Tags are the primary component of the HTML that defines how the content will be structured/ formatted, whereas Attributes are used along with the HTML tags to define the characteristics of the element. For example, &lt;p align=” center”&gt;Interview questions&lt;/p&gt;, in this the ‘align’ is the attribute using which we will align the paragraph to show in the center of the view.</p>"
            },
            {
                "name": "How is Cell Padding different from Cell Spacing?",
                "description": "<p>Cell Spacing is the space or gap between two consecutive cells. Whereas, Cell Padding is the space or gap between the text/ content of the cell and the edge/ border of the cell. Please refer to the above figure example to find the difference.</p>"
            },
            {
                "name": "How to specify the link in HTML and explain the target attribute?",
                "description": "<ol><li><strong>_self</strong>: This is a default value. It opens the document in the same window or tab as it was clicked.</li><li><strong>_blank</strong>: It opens the document in a new window or tab.</li><li><strong>_parent</strong>: It opens the document in a parent frame.</li><li><strong>_top</strong>: It opens the document in a full-body window.</li></ol>"
            },
            {
                "name": "What is Microdata in HTML5?",
                "description": "<p>It is used to help extract data for site crawlers and search engines. It is basically a group of name-value pairs. The groups are called items, and each name-value pair is a property. Most of the search engines like Google, Microsoft, Yandex, etc follow schema.org vocabulary to extract this microdata.<br><img src='./assets/html/microdata.png'></p><ul><li><strong>itemid</strong> – The unique, global identifier of an item.</li><li><strong>itemprop</strong> – Used to add properties to an item.</li><li><strong>itemref</strong> – Provides a list of element ids with additional properties.</li><li><strong>itemscope</strong> – It defines the scope of the itemtype associated with it.</li><li><strong>itemtype</strong> – Specifies the URL of the vocabulary that will be used to define itemprop.</li></ul><p>The above example will be parsed by Google as<br><img src='./assets/html/Microdata_in_HTML5.png'></p>"
            },
            {
                "name": "What are the New tags in Media Elements in HTML5?",
                "description": "<ul><li><strong>&lt;audio&gt;</strong> - Used for sounds, audio streams, or music, embed audio content without any additional plug-in.</li><li><strong>&lt;video&gt;</strong> - Used for video streams, embed video content etc.</li><li><strong>&lt;source&gt;</strong> - Used for multiple media resources in media elements, such as audio, video, etc.</li><li><strong>&lt;embed&gt;</strong> - Used for an external application or embedded content.</li><li><strong>&lt;track&gt;</strong> - Used for subtitles in the media elements such as video or audio.</li></ul><br><img src='./assets/html/mediatags.png'>"
            },
            {
                "name": "What is the usage of a novalidate attribute for the form tag that is introduced in HTML5?",
                "description": "<p>Its value is a boolean type that indicates whether or not the data being submitted by the form will be validated beforehand. By making this false, forms can be submitted without validation which helps users to resume later also.</p><p><form action = '' method = 'get' novalidate><br> .... <br></form></p>"
            },
            {
                "name": "How to deliver high quality video/ott products",
                "description": "<ul><li><strong>Maximize the Initial Quality of your Videos</strong></li><li><strong>Choose the Right Encoder Settings</strong> - An encoder is a software or hardware tool that transforms your videos into streaming compatible formats.like codecs, bitrates,frames per second</li><li><strong>Use Adaptive Bitrate (ABR) Technology for Transcoding</strong> - which means bitrates as per the screen resolutions</li><li><strong>Configure Multiple CDNs for Ultra Fast Video Playback</strong></li><li><strong>Monitor all the Quality Control factors</strong> - like <br>#1. Check the performance of your streaming website & apps, and identify potential weak points in the architecture. <br>#2. Test the initial quality of your videos <br>#3. Test the video quality at different bitrate levels on both slow & fast internet connections. <br>#4. Monitor the CDN performance</li><li><strong>Use any video streaming platform to host your videos. You can embed the videos with a url on your site and now you don’t have to worry about file size limits nor slowing your site down.</strong></li></ul>"
            },
            {
                "name": "What Are Best Practices? to start for a web development",
                "description": "<ul><li><strong>Start By Planning</strong> - The first step of a project should be to identify the overall goal. the next step is to plan out how you are going to reach that goal. It may feel like you’re wasting time that could be used to build projects on the planning stages. But, it’s quite the contrary. Planning will make a project organized, minimize the space for errors, and allow you to stay focused without questioning the next step. So, it actually saves you a lot of time.</li><li><strong>Stick To The Standards</strong> - Creativity can often help developers devise unique solutions for tricky problems. But deviating too far from industry norms often results in failure. Some industry norms for web development are as follows: <br>#1. The navigation map should be the same for all pages of your website. It makes your website more uniform and coherent. <br>#2. The size of the hyperlinks should be appropriate and easily visible to the user.</li><li><strong>Code Smarter, Not Longer</strong> - Every line of code that you write should fulfill a necessary and particular purpose. Avoid writing anything too complex that could make your code hard to understand and edit in the future. </li><li><strong>Sprint updating on ontervals</strong> - to maintain a balance between today’s demand and future innovation. The user-interface created today will naturally become outdated a few months or years down the line. Therefore, it’s imperative to design and develop the backend accordingly. This makes sure that the User Interface (UI) can be modified in the future without doing a complete overhaul.</li><li><strong>Establish multi-device compatibility</strong> - Devices such as smartphones, laptops, and tablets have different screen resolutions as well as form factors. To ensure a quality user experience, it’s important to make sure your data is displayed correctly across all devices.</li></ul>"
            },
            {
                "name": "How to ensure your team follows coding standard",
                "description": "<p>Think of coding standards as a set of rules, techniques, and best practices to create cleaner, more readable, more efficient code with minimal errors. They offer a uniform format by which software engineers can use to build sophisticated and highly functional code.</p><p>Best Practices To Follow includes many things such as</p><ul><li><strong>Choose industry-specific coding standards</strong> - The standards required for coding software for luxury automobiles will differ from those for coding software for gaming.</li><li><strong>Focus on code readability</strong> - #1. Write as few lines as possible., #2. Use appropriate naming conventions. #3. Use indentation to marks the beginning and end of control structures. Clearly specify the code between them, #4. Don’t use lengthy functions. Ideally, a single function should carry out a single task, #5. Use the DRY (Don’t Repeat Yourself) principle. Automate repetitive tasks whenever necessary. The same piece of code should not be repeated in the script. #6. Avoid Deep Nesting. Too many nesting levels make code harder to read and follow. #7. Avoid long lines. It is easier for humans to read blocks of lines that are horizontally short and vertically long.</li><li><strong>Don’t use a single identifier for multiple purposes</strong>  Ascribe a name to each variable that clearly describes its purpose. Naturally, a single variable can’t be assigned multiple values or used for numerous functions. This would confuse everyone reading the code and would make future enhancements more difficult to implement. Always assign unique variable names.</li><li><strong>Turn daily backups into an instinct</strong> - Back up the workflow on any version control system.</li><li><strong>Leave comments and prioritize documentation</strong> - Take an extra minute to write a comment describing the code function at various points in the script. Ensure that the comments guide any readers through the algorithm and logic implemented.</li><li><strong>Try to formalize Exception Handling</strong> - Keep the code in a try-catch block. Use real-time log analysis tools.</li><li>Despite adhering to the coding best practices detailed above, bear in mind that all code needs to be extensively tested on real browsers and devices. Comprehensive and error-free testing ensures that no major bugs pass undetected into production, thus enabling software to offer the highest possible levels of user experience</li></ul>"
            },
            {
                "name": "How to adapt your website/app for TV browsers?",
                "description": "<p>Several rules can improve legibility on screen:</p><ul><li><p>Larger fonts, as TV sets are usually about 3m / 10feet away and resolution is usually 1920x1080 (smaller pixels)</p></li><li><p>Bright text (not too bright) on dark background</p><ul><li><p>TVs are usually in living room which is not lighted as much as offices therefore an average color close to white is too bright for eyes</p></li><li><p>Since TVs are further away, higher contrast is required. This can be achieved with or dark bright text on dark background text on not too bright background<br><i>Constrast = (0.05 + brighter intensity out of 1) / (0.05 + darker intensity out of 1)</i></p></li></ul></li><li><p>Bigger and further apart buttons - small buttons are harder to click on with many remote pointing devices (e.g. trackpad, air mouse)</p></li><li><p>Don't assume site is using full-screen - since the TV screen can be very large, some users open up multiple sites side by side and horizontal scrolling is annoying and not simple with some input devices</p></li><li><p>If site is to be used via TV's internal browser (no via a connected computer) then these also apply (many of these apply to mobile too):</p><ul><li><p>Don't use pop-ups or assume user can see tooltips</p></li><li><p>Reduce textual input to minimum and support (but don't enforce) auto-completion</p></li><li><p>Less menus (this is always a good idea, but in this case especially). Navigation between menus using a remote control requires a lot of clicks. Try to use one bigger menu, preferably at side of screen.</p></li><li><p>Consider keeping history in tabs since opening multiple links in a new windows may not be possible. Or perhaps enable opening link differently with different remote buttons (e.g. select = current tab, right = new tab in background, right and then select = new tab and jump to it)</p></li><li><p>Enable log in with a hardware id of the TV e.g. MAC address (if use logs in regularly and adds hardware id as an optional log-in) - this can save user input, however, encrypt the id using https.</p></li><li><p>Save favorites / recent / most commonly visited pages or functions in a more accessible region (save clicks as search will be more difficult)</p></li></ul></li></ul>"
            },
            {
                "name": "How can you store data in Android and iOS? Which databases and native solutions are available?",
                "description": "<p>The native data storage solution for Android is <code>SharedPreferences</code>. This is intended to store small amounts of data, like user preferences or settings. The data are stored in an XML file.</p><p>The native data storage solution for Android is <code>SharedPreferences</code>. This is intended to store small amounts of data, like user preferences or settings. The data are stored in an XML file.</p>"
            },
            {
                "name": "What are internationalization and localization? Do these terms mean the same thing?",
                "description": "<p><strong>Internationalization (“i18n”)</strong> is the process of adapting app code to other languages. For example, an app might need to display data in a different format, prices, or numbers with the correct decimal or thousands separators, or even handling whether text is written right-to-left or left-to-right. It also requires taking into account the user’s timezone.</p><p><strong>Localization (“l10n”)</strong>, on the other hand, is the process of preparing the content of the app to be available in different languages. This includes translating most of the app’s resources, like texts, images, and sounds. Resources for different languages are usually kept in different files or directories, and the OS chooses the right one based on user settings.</p>"
            },
            {
                "name": "What is the best way for a server to notify an app that some new data is available?",
                "description": "<p>A mobile app might use <strong>push notifications.</strong></p><ul><li><strong>Apple Push Notifications</strong> sends push notifications to iOS devices only.</li><li><strong>Firebase Cloud Messaging</strong> is Google’s mechanism for sending push notifications to devices and has replaced Google Cloud Messaging (GCM). This is touted as “multi-platform,” meaning that it also supports iOS devices, relaying via the Apple Push Notification service (APNs) under the hood.</li></ul>"
            },
            {
                "name": "How can you debug your app when it’s already released?",
                "description": "<p>There are lot of tools that provide crash and usage reports from mobile apps.</p><p>One of the most popular (and free) is Firebase Crashlytics, which supports both iOS and Android. It provides a lot of useful information about app crashes like the full-stack trace, operating system version, device manufacturer, and user language.</p>"
            },
            {
                "name": "What is the difference between native apps and hybrid apps? What are the advantages and disadvantages of hybrid apps?",
                "description": "<p>Native apps are written specifically for one platform, in the language used on said platform, i.e. Objective-C or Swift for iOS, and Java or Kotlin for Android. These apps have the best performance and can be designed for the specific platform which users are used to, so iOS users will not be surprised by some Android behavior or layout and vice versa.</p><p>Hybrid apps can work on multiple platforms. Under the hood, a hybrid app is actually a web page displayed in a web view, so it is usually written in JavaScript and HTML. Popular hybrid frameworks are Ionic, Cordova, and PhoneGap.</p><p>Hybrid apps have performance issues when compared with native apps, though. Access to device hardware (like sensors) might be problematic sometimes, and very often has to be written separately for each platform, so the developer must get into native code and write platform-specific things anyway.</p><p>It is also very hard to design one app that looks nice and is user-friendly for both iOS and Android. On the other hand, the process of writing a hybrid app might be cheaper and faster than writing a native app for each platform. But this technique is especially suitable for small and simple apps.</p><p>There is also a third group of apps, developed using technologies like React Native or Flutter. These are frameworks that try to connect the ease of writing multi-platform apps with native performance. They offer the possibility to write code in one language—JavaScript, C#, or Dart—and compile it into native code. The frameworks often use native implementations of controls, so the user experience is a bit better than for hybrid apps.</p>"
            },
            {
                "name": "What are the main things you have to be cautious about when writing for mobile?",
                "description": "<p><strong>Network</strong> - The phone may frequently switch between networks. Loading tons of heavy data when users use their cellular network will drain their data packets and expose them to additional costs. The developer might provide an offline mode and different data loading behavior when working on WiFi, LTE, 3G or H; e.g., do not download movies or request lower-quality images.</p><p><strong>Fragmentation</strong> - it is always good to have variety of physical devices for testing or use a test-device cloud platform.</p><p><strong>RAM</strong> - taking care of good memory management is still necessary. The OS will kill apps that use too much memory, so a developer must care about memory leaks and optimize long-running operations.</p><p><strong>Disk Space</strong> - the developer should try to keep the app as small as possible. Having to download 500 MB to use a small app like a calculator will discourage users from trying the app in the first place. But also once installed, keeping unnecessary files and otherwise taking up too much space may lead to users uninstalling the app and looking for a better alternative.</p><p><strong>Battery</strong> - This is one of the weakest points of contemporary phones. Every action we take in an app affects the battery. The developer must take care when it comes to using different services like GPS. Developers should use such features only when necessary and use optimized OS solutions to update data in the background.</p>"
            },
            {
                "name": "Describe the process of publishing apps on Google Play and in Apple’s App Store. What do you need to publish an app to each store?",
                "description": "<h3>Google Play</h3><p>Google requires that you have a developer account to publish apps.</p><p>When an app is ready, it should be built into an APK file.</p><p>The APK must be signed to prove that it comes from your specific company. The signing is done using a keystore, which is a file containing one or more private keys belonging to the company/developer. (If this file is lost, no updates can be done for the app.)</p><br><br><h3>The App Store</h3><p>Apple requires a developer account connected with the Apple Developer Program to publish apps here.</p><p>First, the app must have a profile created for it in iTunes Connect.</p><p>The finished app is built into an IPA file, which has to be signed by some certificates. Xcode helps to do it all automatically using the Distribution Certificate (DC) and the Provisioning Profile, which connects the DC to the app ID.</p><p>Once sent, the app is checked by a team at Apple. It may take several days until the app is approved (or rejected) for publishing.</p>"
            },
            {
                "name": "What is app sandboxing and what is it for?",
                "description": "<p>App sandboxing is a security mechanism that isolates apps at the kernel level. Each app is run in its own sandbox, which means that it has a very limited access to data: It can access only its own data and files, and no other app can read or write them.</p><p>This is to protect user data from malicious software which might be accidentally or intentionally installed on the device. Apps are still able share some data, but only the data they want to, using mechanisms provided by the system (e.g., <code>ContentProvider</code> on Android).</p>"
            }
        ]
    },
    {
        "folder": "CSS",
        "title": "CSS",
        "url": "/folder/CSS",
        "icon": "logo-css3",
        "question": [
            {
                "name": "List the components of a CSS Style?",
                "description": "<ul><li>Selector: It is an HTML tag at which a style will be applied.</li><li>Property: It is a type of attribute of HTML tag.</li><li>Value: These are assigned to properties.</li></ul>"
            },
            {
                "name": "Difference between CSS and CSS3?",
                "description": "<table style='width:100%;'><thead><tr><th style='text-align:left;'>CSS<br></th><th style='text-align:left;'>CSS3<br></th></tr></thead><tbody><tr><td style='width:50%;vertical-align:top;'>CSS main focus was on providing formatting features and basic styling to the HTML elements.<br></td><td style='width:50%;vertical-align:top;'>CSS3 has evolved to overcome the drawbacks of CSS with a lot of new features and better performance.<br></td></tr><tr><td style='vertical-align:top;'>In CSS, everything was a kind of specification which defined different features.<br></td><td style='vertical-align:top;'>CSS3 has made this simpler by bringing in the concept of modules.<br></td></tr><tr><td style='vertical-align:top;'>CSS will not support media queries for responsive design.<br></td><td style='vertical-align:top;'>CSS3 supports media queries for responsive design.<br></td></tr><tr><td style='vertical-align:top;'>CSS supports only standard hex colors and It's a pain to use elegant colors and make the UI better.<br></td><td style='vertical-align:top;'>CSS3 supports RGBA, HSL, HSLA and gradient colors too. Using these types of colors helps us to frame and use better colors in UI.<br></td></tr><tr><td style='vertical-align:top;'>CSS supports simple selectors. Like the ones with ID, class and tag names.<br></td><td style='vertical-align:top;'>CSS3 calls the components as a sequence of selectors in a very different and advanced way.<br></td></tr><tr><td style='vertical-align:top;'>CSS supports only ‘web-safe fonts’ to make sure that the text displays in all the browsers.<br></td><td style='vertical-align:top;'>CSS3 has introduced designers to use special fonts like those available in Google fonts.<br></td></tr></tbody></table>"
            },
            {
                "name": "Explain Grouping and Nesting in CSS.",
                "description": "<p>Grouping allows you to give the same properties to different selectors without repeating them. It reduces the code by grouping selectors that have the same properties or values. To group them, separate them with a comma, and the same properties will get applied to them all. Nesting allows you to have elements nested inside other elements.</p>"
            },
            {
                "name": "Describe the box model in CSS3? What is the use of the CSS Box Model",
                "description": "<ul><li><strong>Content:</strong> &nbsp;Actual Content of the box where the text or image is placed.</li><li><strong>Padding:</strong> Area surrounding the content (Space between the border and content).</li><li><strong>Border:</strong> Area surrounding the padding.</li><li><strong>Margin:</strong> Area surrounding the border.</li></ul><br><br><p><strong>Its use</strong> - The CSS Box model is used to create the design and layout of web documents. It is a box that contains multiple properties including content, padding, border, and margin. It allows us to add a border all around elements and define space between elements.</p>"
            },
            {
                "name": "What is a pseudo-class? Explain with an example?",
                "description": "<p>A pseudo-class is a special keyword which is added to a selector which specifies the state of the element. There are around ~60 pseudo-classes available. Some of the relevant examples of pseudo-classes are active, checked, disabled, empty, first-child, hover, focus, in-range, invalid, last-child, nth-child, optional, read-only, target, valid, visited, root, required which can actually be used to apply styles.</p><p><img src='./assets/css/pseudoclass1.png'></p>"
            },
            {
                "name": "What are pseudo-elements? Explain with an example.",
                "description": "<p>Pseudo-elements are used to style or modify the specific part of an HTML element using CSS.</p><p><img src='./assets/css/pseudoelement1.png'></p>"
            },
            {
                "name": "What are Media Types rules",
                "description": "<p>If we don’t apply a media type, the @ media rule selects all types of devices by default. Otherwise, Media types come right after the @ media rule. There are many kinds of devices but we can group them into 4 categories:</p><ul><li>all — for all media types</li><li>print — for printers</li><li>screen — for computer screens, tablets and, smart-phones</li><li>tv - for television type devices</li></ul><p>For example, when I want to select only screens, I will set the screen keyword right after the @media rule. I also must concatenate the rules with the “and” keyword:<br><img src='./assets/css/mediatype.png'></p>"
            },
            {
                "name": "Define a CSS preprocessor.",
                "description": "<p>A CSS preprocessor is a tool that is used for extending the basic functionality of default vanilla CSS through its scripting language. It helps us in using complex logical syntaxes such as functions, mixins, variables, code nesting and inheritance. These preprocessors compile the code that is written through a special compile. It is then used for creating a CSS file that can be referenced by the main HTML document.</p>"
            },
            {
                "name": "What are the different types of Selectors in CSS?",
                "description": "<p><strong>1. Element Selector:</strong> The element selector selects HTML elements based on the element name or tag. It matches one or more HTML elements of the same name. Example \"h2 { color: red }\"</p><p><strong>2. ID Selector:</strong> The ID selector uses the ID attribute of an HTML element to select a specific element. It matches any HTML element that has an ID attribute with the same value as that of the selector. Example \"#myID { color: red }\"</p><p><strong>3. Universal Selector:</strong> The universal selector selects all the elements in an HTML document.Example \"* { color: red }\"</p><p><strong>4. Group Selector:</strong> It styles all comma-separated elements with the same style. Example \" h1, h2, h3, p { color: red }\"</p><p><strong>5. Attribute Selector:</strong> Using the attribute selector, the HTML elements can be styled based on the presence of an attribute. Example \" [attribute=\"value\"] { color: red }\"</p><p><strong>6. Class Selector:</strong> The class selector also matches HTML elements with a specific class attribute. It matches the elements that have their class attribute the same as that of the class. Example \"#myClass { color: red }\"</p>"
            },
            {
                "name": "CSS Combinators",
                "description": "<table style='width:100%;'><thead><tr><th style='text-align:left;'>Name<br></th><th style='text-align:left;'>Syntax<br></th><th style='text-align:left;'>Selects<br></th></tr></thead><tbody><tr><td style='width:33.3333%;'>Selector List<br></td><td style='width:33.3333%;'>A, B<br></td><td style='width:33.3333%;'>Selects the matching element A/B.<br></td></tr><tr><td>Descendant Combinator<br></td><td>A B<br></td><td>Selects any element matching B that is descendant of an element matching A.<br></td></tr><tr><td>Child Combinator<br></td><td>A &gt; B<br></td><td>Selects any element matching B that is the direct child of an element matching A.<br></td></tr><tr><td>Adjacent Sibling Combinator<br></td><td>A + B<br></td><td>Selects any element matching B that is the next sibling of the element matching A.<br></td></tr><tr><td>General Sibling Combinator<br></td><td>A ~ B<br></td><td>Selects any element matching B that is one of the next siblings of an element matching A.<br></td></tr></tbody></table>"
            },
            {
                "name": "What is viewport height/viewport width in CSS?",
                "description": "<p>It is a CSS unit that is used for measuring the height and width in percentage w.r.t. the viewport. It is mainly used in responsive design techniques. The measure VH is 1/100 of the height of the viewport. If the height of browser is equal to 1000px, 1vh is  10px. and if the width is 1000px, 1 vw is 10px.</p>"
            },
            {
                "name": "What’s the difference between resetting and normalizing CSS? Which would you choose, and why?",
                "description": "<ul><li><strong>Resetting</strong> — is meant to strip all default browser styling on elements. For e.g. <code>margins</code>, <code>paddings</code>, <code>font-sizes</code> of all elements are reset to be the same. You will have to redeclare styling for common typographic elements.</li><li><strong>Normalizing</strong> — preserves useful default styles rather than “unstyling” everything. It also corrects bugs for common browser dependencies.</li></ul><p>It's a good idea to choose resetting when you have very a customized or unconventional site design such that I need to do a lot of my own styling do not need any default styling to be preserved.</p>"
            },
            {
                "name": "What is the use of the z-index?",
                "description": "<p>An element’s stack order is indicated by the z-index property. An element with a higher stack order will always be in front of a lower stack order element. It only works with the elements defined with position properties(position: relative, absolute, sticky, or fixed) and flex property. Z-index specifies the following values: auto, number, inherit, or initial.</p>"
            },
            {
                "name": "When does DOM reflow take place?",
                "description": "<p>The web browser mechanism known as “reflow” recalculates the locations and geometries of document elements to redraw all or a portion of the document again. Below mentioned points tell us when DOM reflow occurs:</p><ul><li>When content is modified on a web page.</li><li>Moving or animating the DOM element.</li><li>Whenever updating, insertion, or deletion of an element occurs in DOM then also reflow mechanism happens.</li><li>While changing a CSS style.</li></ul>"
            },
            {
                "name": "Explain CSS position property",
                "description": "<ul><li><strong>Static:&nbsp;</strong>It's a default value of position to any element. Element is rendered one after the other in order. It's the way as it is. There's no change in the display of elements. Which will display in the window with default paddings and margins?</li><li><strong>Absolute:&nbsp;</strong>The absolute value is used to position the element relative to its parent element. Say if the parent element has ‘x’ margin in the left. The child element ‘y’ margin towards left. The total margin of the child element would be ‘x+y’.</li><li><strong>Fixed:&nbsp;</strong>The fixed value is used to position the element relative to the viewport (browser window) and the position of the element would be fixed.</li><li><strong>Relative:&nbsp;</strong>The relative value is used to position the element relative to its normal position.&nbsp;</li><li><strong>Sticky:&nbsp;</strong>The stick value is used to position the element based on the user's scroll. Its position is relative until a given offset position is met. Then it will stick in a place like it's fixed.</li><li><strong>Initial:&nbsp;</strong>This property value allows us to use the default behavior of the element.</li><li><strong>Inherit:&nbsp;</strong>This property value allows us to inherit the property of its parent.</li></ul>"
            },
            {
                "name": "Difference between visibility: hidden and display: none",
                "description": "<p>visibility:hidden hides the element, but it still takes up space in the layout and affects it. display:none removes the element from the document as if it never existed. It does not take up any space in the layout.</p>"
            },
            {
                "name": "Is testing the website across several browsers necessary?",
                "description": "<p>Due to the frequent updates that browsers receive, testing your website routinely in various browsers can assist you to ensure that every webpage is compatible with it.</p>"
            },
            {
                "name": "How can you tell if a browser supports a particular feature",
                "description": "<p>To check if the current browser supports a specific feature, you can use the @support property in CSS.<br><img src='./assets/css/support.png'></p>"
            },
            {
                "name": "What does Accessibility (a11y) mean?",
                "description": "<p><strong>Accessibility (a11y)</strong>is a measure of a computer system's accessibility is to all people, including those with disabilities or impairments. It concerns both software and hardware and how they are configured in order to enable a disabled or impaired person to use that computer system successfully.</p><p>Accessibility is also known as <em>assistive technologyn></em></p>"
            },
            {
                "name": "How does CSS actually work (under the hood of browser)?",
                "description": "<p>When a browser displays a document, it must combine the document's content with its style information. It processes the document in two stages:</p><ul><li>The browser converts <em>HTML</em> and <em>CSS</em> into the <em>DOM (Document Object Model)</em>. The DOM represents the document in the computer's memory. It combines the document's content with its style.</li><li>The browser displays the contents of the DOM.</li></ul><br><img src='./assets/css/rendering.svg'>"
            },
            {
                "name": "How does calc() work?",
                "description": "<p>We can conduct mathematical calculations on property values using the CSS3 calc() feature. We can use calc() to declare, for instance, that an element’s width is the result of the addition of two or more numerical values rather than stating static pixel values for that width.</p>"
            },
            {
                "name": "How do you specify units in the CSS?. What are the different ways to do it?",
                "description": "<p>There are different ways to specify units in CSS like px, em, rem, pt, percentage (%).</p><p><strong>PX: Pixels (px)</strong> are considered absolute units, </p><p><strong>EM</strong>: Relative to the parent element</p><p><strong>REM</strong>: Relative to the root element (HTML tag)</p><p><strong>%</strong>: Relative to the parent element</p><p><strong>VW</strong>: Relative to the viewport’s width</p><p><strong>VH</strong>: Relative to the viewport’s height</p><p>Unlike PX, relative units like %, EM, and REM are better suited to responsive design and also help <strong>meet accessibility standards</strong>. Relative units scale better on different devices because they can scale up and down according to another element’s size.</p>"
            },
            {
                "name": "How are the CSS selectors matched against the elements by the browser?",
                "description": "<p>The order of matching selectors goes from <strong>right to left </strong>of the selector expression. The elements in the DOM are filtered by browsers based on the key selectors and are then traversed up to the parent elements for determining the matches.<br><img src='./assets/css/pspan.png'></p><p>Here, the browser first finds all <code>span</code> elements in the DOM and then it traverses to each of its parent elements to check if they are the paragraph <code>p</code> elements.</p><p>Here, the browser first finds all <code>span</code> elements in the DOM and then it traverses to each of its parent elements to check if they are the paragraph <code>p</code> elements.</p><p>Once the browser finds <strong>all</strong> matching span tags having paragraph elements as parent and applies the color of black to the content, the matching process is stopped.</p>"
            },
            {
                "name": "What is cascading in CSS?",
                "description": "<p>“Cascading” refers to the process of going through the style declarations and defining weight or importance to the styling rules that help the browser to select what rules have to be applied in times of conflict.</p>"
            },
            {
                "name": "Different Box Sizing Property?",
                "description": "<ul><li><strong>Content-box:</strong> The default width and height values apply to the element's content only. The padding and border are added to the outside of the box.</li><li><strong>Padding-box:</strong> Width and height values apply to the element's content and its padding. The border is added to the outside of the box. Currently, only Firefox supports the padding-box value.</li><li><strong>Border-box:</strong> Width and height values apply to the content, padding, and border.</li></ul>"
            },
            {
                "name": "What is specificity?",
                "description": "<p>In CSS, say if you have two conflicting styles for an element, the browser should decide which one to apply and render. This is chosen by the browser-based on specificity. Specificity is nothing but a set of rules. Some of the rules are mentioned below.</p><ol><li>Say- if you have two element selectors selecting the same element but having different styles. The element selector which is read latest by the browser will get applied</li><li>The element selector has less priority compared to a class selector. So, the styles written in the class selector gets applied.</li><li>The class selector has less priority compared to an ID selector. So, the styles written in the ID selector gets applied.</li><li>If we use !important along with the value for a CSS property. This style gets applied no matter it's a class or an element or an ID selector.</li></ol>"
            },
            {
                "name": "What is progressive rendering? How do you implement progressive rendering in the website?. What are the advantages of it?",
                "description": "<p>Progressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.</p><p>We can implement the progressive rendering of the page by loading the lazy loading of the images. &nbsp;We can use Intersection Observer API to lazy load the image. The API makes it simple to detect when an element enters the viewport and take an action when it does. Once the image enters the viewport, we will start loading the images.</p>"
            },
            {
                "name": "What are the advantages of using translate() instead of absolute position?",
                "description": "<p>Translate() does not cause the browser to trigger repaint and layout and instead only acts on the compositor. The absolute position triggers the repaint or DOM reflow. So, translate() gives better performance.</p>"
            },
            {
                "name": "How is margin different from padding in CSS?",
                "description": "<p>Margin property using which we can create space around the elements. We can also create space for borders defined at the exteriors.<.p><p>The padding property is used for generating the space around the element’s content and inside any known border.</p>"
            },
            {
                "name": "What's new in CSS3?",
                "description": "<p>CSS3 is the latest evolution extending CSS2. It has a lot of new features like selectors, rounded corners, border-image, text-shadow, box-shadow, transitions, animations, gradients, and grid layouts.</p><ul><li><strong>Selectors</strong>: Selectors are used to selecting the content which you want to add styles too. There are five types of selectors in CSS.<ul><li>Type Selector (Element Selector)</li><li>ID Selector</li><li>Class Selector</li><li>Universal Selector</li><li>Attribute Selector</li></ul></li><li><strong>Rounded Corners:&nbsp;</strong>Using this feature, we can apply smooth corners to any element. The <em>border-radius</em> property is used to give the element smooth edges. Check out the example below for syntax and usage.</li><li><strong>Border Image:&nbsp;</strong><em>border-image&nbsp;</em>property allows us to use an image as a border. Check the example below for syntax and usage.</li><li><strong>Shadow:&nbsp;</strong>It's an effect which can be applied to text and box. <em>text-shadow</em> and <em>box-shadow</em> are the property names used to added shadow to text and box respectively.</li><li><strong>Transitions:&nbsp;</strong>CSS Transitions allows us to change the values of the <em>transition&nbsp;</em>property smoothly.</li><li><strong>Gradients:&nbsp;</strong>We can directly use gradients in for two or more colors using <em>linear-gradient</em> and <em>radial-gradient</em> properties.</li><li><strong>Grid Layouts:&nbsp;</strong>We have two new display properties which are grid and inline-grid which offers us a grid-based layout with similar rows and columns concept.</li></ul>"
            },
            
            {
                "name": "How is responsive design different from adaptive design?",
                "description": "<p>Both <em>responsive</em> and <em>adaptive</em> design attempt to optimize the user experience across different devices, adjusting for different viewport sizes, resolutions, usage contexts, control mechanisms, and so on.</p><p><strong>Responsive design</strong> works on the principle of flexibility&#8202;—&#8202;a single fluid website that can look good on any device. Responsive websites use <em>media queries</em>, <em>flexible grids</em>, and <em>responsive images</em> to create a user experience that flexes and changes based on a multitude of factors. Like a single ball growing or shrinking to fit through several different hoops.</p><p><strong>Adaptive design</strong> is more like the modern definition of progressive enhancement. Instead of one flexible design, adaptive design detects the device and other features, and then provides the appropriate feature and layout based on a <em>predefined set of viewport sizes</em> and other characteristics. The site detects the type of device used, and delivers the pre-set layout for that device. Instead of a single ball going through several different-sized hoops, you’d have several different balls to use depending on the hoop size.</p>"
            },
            {
                "name": "How is responsive design different from adaptive design?",
                "description": "<p>Both <em>responsive</em> and <em>adaptive</em> design attempt to optimize the user experience across different devices, adjusting for different viewport sizes, resolutions, usage contexts, control mechanisms, and so on.</p><p><strong>Responsive design</strong> works on the principle of flexibility&#8202;—&#8202;a single fluid website that can look good on any device. Responsive websites use <em>media queries</em>, <em>flexible grids</em>, and <em>responsive images</em> to create a user experience that flexes and changes based on a multitude of factors. Like a single ball growing or shrinking to fit through several different hoops.</p><p><strong>Adaptive design</strong> is more like the modern definition of progressive enhancement. Instead of one flexible design, adaptive design detects the device and other features, and then provides the appropriate feature and layout based on a <em>predefined set of viewport sizes</em> and other characteristics. The site detects the type of device used, and delivers the pre-set layout for that device. Instead of a single ball going through several different-sized hoops, you’d have several different balls to use depending on the hoop size.</p>"
            },
            {
                "name": "In how many ways can a CSS be written / call / render in an HTML file?",
                "description": "<ol><li><strong>Inline:</strong> Writing CSS for an element along with the element definition using the style property. Ex.  &lt;h1 style=”color: red;”&gt;Hello, World!&lt;/h1&gt;</li><li><strong>Embedded:</strong> Writing the CSS in the head using the style tag. Ex. - &lt;style&gt;h1{color: red;}&lt;/style&gt;</li><li><strong>External:</strong> Having CSS written in an external document and linking it via link tag. Ex. - &lt;link rel=”stylesheet” type=”text/css” href=”main.css”&gt;</li></ol>"
            },
            {
                "name": "Difference between serif and sans-serif fonts?",
                "description": "<p>Serif and sans-serif are the parent fonts to all the available fonts. Serif fonts usually have a hook (commonly known as feet) for all the letters, whereas in sans-serif (sans means without in French), we will not have those hooks. Some of the examples of popular serif fonts are Times New Roman, Bookman, Baskerville, Cambria, Courier, Century, Copper Black, Minion, and New York. Some of the examples of popular sans-serif fonts are Arial, Calibri, and Comic Sans, Helvetica, Geneva, San Francisco, and Ubuntu.</p><p><img src='./assets/css/sansserif.png'></p>"
            },
            {
                "name": "What are conditional comments?",
                "description": "<p>Conditional comments are developed by microsoft. And it only worked with IE browser. The conditional comments help to target IE browser & comments can be written to target the different version of IE 5-IE 9. CSS rules or code embedded inside of the comments will be used by Internet explorer based browser.  Whereas from IE10 & above the support for conditional comments has been dropped.</p><p><img src='./assets/css/conditioncomments.png'></p>"
            },
            {
                "name": "How to write media queries for a device with aspect ratio 16/9?",
                "description": "<p>The aspect ratio is defined as the ratio of width media feature to the ratio of height media features W:H.</p><p><img src='./assets/css/mediaaspectratio.png'></p>"
            },
            {
                "name": "How to style the first line of the paragraph as uppercase?",
                "description": "<p><strong>p:first-line { text-transform: uppercase }</strong></p>"
            },
            {
                "name": "How to render the first letter of a paragraph with red color & red border?",
                "description": "<strong>p::first-letter { <br> &nbsp; border: 1px solid; <br> &nbsp; font-weight: bold; <br> &nbsp; color: red;&nbsp; <br> }</strong>"
            },
            {
                "name": "CSS Vendor prefixes?",
                "description": "<ul><li>-webkit- (Chrome, Safari, newer versions of Opera, almost all iOS browsers (including Firefox for iOS); basically, any WebKit based browser)</li><li>-moz- (Firefox)</li><li>-o- (Old, pre-WebKit, versions of Opera)</li><li>-ms- (Internet Explorer and Microsoft Edge)</li></ul>"
            },
            {
                "name": "Explain CSS sprites, and how you would implement them on a page or site.",
                "description": "<p>CSS sprites combine multiple images into one single larger image.</p><p><strong>Advantages</strong>:</p><ul><li>Reduce the number of HTTP requests for multiple images (only one single request is required per spritesheet). But with HTTP2, loading multiple images is no longer much of an issue.</li><li>Advance downloading of assets that won’t be downloaded until needed, such as images that only appear upon <code>:hover</code> pseudo-states. Blinking wouldn't be seen.</li></ul>"
            },
            {
                "name": "Inherit, Initial and Unset Values for CSS Properties?",
                "description": "<ul><li> <strong>inherit</strong>: Get the property from the parent element.</li><li> <strong>initial</strong>: The default value for the property (the browser default).</li><li> <strong>unset</strong>: Acts as either inherit or initial. It’ll act as inherit if the parent has a value that matches, or else it will act as initial.</li></ul>"
            },
            {
                "name": "Flexbox?",
                "description": "<ul><li>To start using the Flexbox model, you need to first define a flex container. <br><img src='./assets/css/flex-container.png'></li><li> Parent Container Properties<ul><li><strong>flex-direction:</strong> row | row-reverse | column | column-reverse; <br>#This establishes the main-axis, where it defines the direction for the flex items are placed in the flex container.<br><img src='./assets/css/flex-direction.png'></li><li><strong>flex-wrap:</strong> nowrap | wrap | wrap-reverse; <br>#By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap<br><img src='./assets/css/flex-wrap.png'></li><li><strong>flex-flow:</strong> This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container's main and cross axes. The default value is <code>row nowrap</code>.</li><li><strong>justify-content:</strong> flex-start | flex-end | center | space-between | space-around | space-evenly; <br>#This defines the alignment along the main axis. It helps distribute all the free space leftover on the main axis line.<br> <img src='./assets/css/jstify-content.png'></li><li><strong>align-items:</strong> stretch | flex-start | flex-end | center | baseline; <br>#This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).<br><img src='./assets/css/align-items.png'></li><li><strong>align-content:</strong> flex-start | flex-end | center | space-between | space-around | space-evenly | stretch; #This aligns a flex container's lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis.<br><img src='./assets/css/align-content.png'></li></ul></li><li> Children Item Properties<ul><li><strong>order:</strong> property specifies the order of the flex items which means the flex item should be displayed in the which order. Default is 0</li><li><strong>flex-grow:</strong> property specifies how much a flex item will grow relative to the rest of the flex items. Default is 0</li><li><strong>flex-shrink:</strong>property specifies how much a flex item will shrink relative to the rest of the flex items. Default is 1</li><li><strong>flex-basis:</strong>property specifies the initial length of a flex item. Default is auto</li><li><strong>flex:</strong>property is a shorthand property for the <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code> properties</li><li><strong>align-self:</strong> property specifies the alignment for the selected item inside the flexible container. It overrides the default alignment set by the container's <code>align-items</code> property.</li></ul></li></ul><br><br>-- Flex Container properties<br>1. flex-direction (row column row-reverse column-reverse)<br>2. justify-content (flex-start, flex-end, center, space-around, space-between, space-evenly) -  works across main axis<br>3. align-items (flex-start, flex-end, center) -  works across cross axis<br>4. flex-wrap (wrap nowrap wrap-reverse) - specifies items are forced into single line or can be wrapped into multiple lines wrap-reverse changes cross axis direction<br>5. align-content(flex-start, flex-end, center, space-around, space-between, space-evenly) - works with align-item in cross axis, we can manipulate space on cross axis<br><br><br>-- Flex item properties<br>1. align-self (flex-start, flex-end, center stretch) - It works on cross axis to align itself.<br>2. flex-basis -  gives width along main axis and has more priority than css width property.<br>3. flex-grow (number) -  it expands block on ration basis<br>4. flex-shrink (number) - it shrinks block on ration basis<br>5. order (number) - sets the order of the block, default order is 0."
            },
            {
                "name": "What are the different ways to visually hide content (and make it available only for screen readers)?",
                "description": "<ul><li><code>visibility: hidden</code>. However the element is still in the flow of the page, and still takes up space.</li><li><code>width: 0; height: 0</code>. Make the element not take up any space on the screen at all, resulting in not showing it.</li><li><code>position; absolute; left: -99999px</code>. Position it outside of the screen.</li><li><code>text-indent: -9999px</code>. This only works on text within the block elements.</li><li><code>.sr-only</code> class for Bootstrap</li></ul>"
            },
            {
                "name": "what do you mean by shorthand notations in CSS3?",
                "description": "<p>Shorthand notations are also called as shorthand properties in CSS. That lets you set multiple values of CSS properties simultaneously. It's often good to use shorthand notations because it reduces the file size and even improves the performance.</p><p><img src='./assets/css/shorthand.png'></p>"
            },
            
            {
                "name": "In an HTML page there are two <input> elements with default values; one is editable and the other one not editable. Add cyan as the background color for the input element which is not editable using CSS. [Hint: Use pseudo-class]",
                "description": "<p><img src='./assets/css/readonly.png'></p>"
            },
            {
                "name": "Draw a circle using CSS?",
                "description": "<p><code>border-radius: 50%;</code></p>"
            },
            {
                "name": "table-layout property?",
                "description": "<p>The table-layout property in css defines the algorithm used to set the lay out of the table cells, rows, and columns.</p><ul><li>auto - As stated earlier the browsers use an automatic table layout algorithm. The column width is set by the widest unbreakable content in the cells. The content will dictate the layout.</li><li>fixed - The layout is fixed based on the first row. Set the width of those, and the rest of the table follows. If no widths are present on the first row, the column widths are divided equally across the table, regardless of content inside the cells.</li><li>initial - Sets this property to its default value.</li><li>inherit - Inherits this property from its parent element.</li></ul>"
            },
            {
                "name": "Fixing cross browser-specific styling issues?",
                "description": "<ul><li>After identifying the issue and the offending browser, use a separate style sheet that only loads when that specific browser is being used. This technique requires server-side rendering though.</li><li>Use libraries like Bootstrap that already handles these styling issues for you.</li><li>Use <code>autoprefixer</code> to automatically add vendor prefixes to your code.</li><li>Use Reset CSS or Normalize.css.</li></ul>"
            },
            {
                "name": "Which one of [ID, class] selector has higher priority?",
                "description": "<p>In CSS, ID is suggested to be unique for an element whereas the class name is can be the same for many elements. As the ID is unique for the element, ID has higher priority than class in CSS. </p>"
            },
            {
                "name": "Define a two column layout using flexbox?",
                "description": "<p><img src='./assets/css/flex.png'></p>"
            },
            {
                "name": "How to style label associated with the selected radio input and checked checkboxes?",
                "description": "<p>We can use the CSS pseudo-class property :checked on input type radio & checkbox and the adjacent sibling combinator (E + F) E is the first element which is input type radio or checkboxes and F is the next element which is label.</p><p><img src='./assets/css/csscheckbox.png'></p>"
            },
            {
                "name": "How to declare variables in CSS?",
                "description": "<p>CSS variables enables developers to reuse the code, once the variable are defined and it can be reused effectively, which gives good control over stylesheet in terms of code readability, maintenance and bring consistency.</p><p>We can declare the variable via :root pseudo-class and reusing the variable using var followed by variable name in parenthesis and assigning to CSS property.</p><p><img src='./assets/css/rootvar.png'></p>"
            },
            {
                "name": "What is the difference between position:sticky and position:fixed?",
                "description": "<p>The element with position:fixed property will be displayed at the specific offset (top, bottom, left and right) based on the position relative to the viewport.</p><p>It will stay at same place when the page is scrolled.</p><p>Whereas in position:sticky the element behave as relatively positioned element and once the containing block of the element crosses a specified threshold value it act as position:fixed element. So, the element switches its position based on the threshold value specified by top, bottom, left &amp; right co-ordinates value.</p>"
            },
            {
                "name": " How to style hyperlinks which are relative or internal to a webpage?",
                "description": "<p>We can do a pattern match for such urls by</p><p><img src='./assets/css/cssmatch.png'></p>"
            },
            {
                "name": "Difference between border-box and content-box Which box model is more in accordance with w3c box model?",
                "description": "<p>The difference between the two lies how the effective width of the container is calculated. The border-box &amp; content-box belong to box-sizing property. The box-sizing property tell the browser how the effective width of the container to be calculated.</p><p>content-box is based on default css box sizing behavior. The rendered width of the container will include the container width+padding+border. Whereas the border-box tell the browser to include the padding &amp; border values with-in the declared width for e.g. 200 pixels. So, the rendered width will be 200 pixels only.</p><ul> <li><strong>HTML</strong><p><img src='./assets/css/html.png'></p></li><li><strong>CSS</strong><p><img src='./assets/css/css.png'></p></li><li><strong>OUTPUT</strong><p><img src='./assets/css/output2.png'></p></li></ul>"
            },
            {
                "name": "What are counters?",
                "description": "<p>CSS Counters are similar to variables. It allows to number a list of element.<br>It is also supported by vast number of browsers IE, Edge, Firefox, Chrome, Safari &amp; Opera. CSS counters can be used to order </p><p>It can be used in various ways to dynamically manage the information with sequential number with prefix or suffix content. It is a great addon for css authors if they are working on a content which include table of content, chapters heading and the numbering is been prefered to be handled by dynamically, rather fixing the numbers manually at each location/line in the code.</p><ul> <li> content- Used with the ::before and ::after pseudo-elements, to insert generated content </li><li>counter-increment - Increments one or more counter values </li><li>counter-reset - Creates or resets one or more counters </li><li>counter() - Returns the current value of the named counter </li></ul><p><img src='./assets/css/counter.png'></p><p><img src='./assets/css/counter1.png'></p>"
            },
            {
                "name": "How to select all immediate div which is the descendant of class cw-alert, whereas the descendant div with class name .alert-button-container not to be selected. The css rules to applicable for languages who text-direction is right to left?",
                "description": "<p>To select language text direction the selector will be <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">[dir=rtl]</span> and followed by class <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">.cw-alert</span>, and to select the div except class <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">.alert-button-container :not&nbsp;</span>pseudoclass can be used as follows.</p><strong>[dir=rtl] .cw-alert&gt;div:not(.alert-button-container){<br>/* Your code here */<br>}</strong>"
            },
            {
                "name": "What is object-fit:fill property and its other values?",
                "description": "<p><span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">object-fit</span> is the property which handles the picture based on the available width and height.</p><p>Using <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">fill</span> value the aspect ratio (Width:Height) will be maintained and image will not appear distorted or squeezed, it will resized so that the longest of either the height or width can fit in the given dimensions.<br><br>Other values are <span style=\"background:rgba(0,0,0,.05);padding:0 3px;font-family:monospace;\">cover, none, scale-down</span>.</p>"
            },
            {
                "name": "How to draw a triangle using CSS?",
                "description": "<p><strong>&lt;!-- HTML Code --&gt; <br> &lt;div class=\"triangle\"&gt;&lt;/div&gt; <br> /* CSS Code */ <br> .triangle { <br> &nbsp; &nbsp; height: 0; <br> &nbsp; &nbsp; width: 0; <br> &nbsp; &nbsp; border-top: 100px solid transparent; <br> &nbsp; &nbsp; border-bottom: 100px solid transparent; <br> &nbsp; &nbsp; border-right: 100px solid red; <br> }</strong></p>"
            },
            {
                "name": "Write the style to display inner div in center for the below HTML code?",
                "description": "<ul><li><strong>Using Position</strong><p><img src='./assets/css/usingposition.png'></p></li><li><strong>Using Flex</strong><p><img src='./assets/css/flex1.png'></p></li></ul>"
            },
            
            {
                "name": "Mobile first strategy?",
                "description": "<p>It means that we should default and define all the styles for mobile devices, and only add specific responsive rules to other devices later.</p><p>A mobile-first strategy has 2 main advantages:</p><ul><li>It's more performant on mobile devices, since all the rules applied for them don't have to be validated against any media queries.</li><li>It forces to write cleaner code in respect to responsive CSS rules.</li></ul>"
            },
            {
                "name": "Explain the rule set in CSS?",
                "description": "<p>In CSS, rule sets are the complete composition of writing a style to an element. Which comprises of selector along with a pseudo-class or a pseudo-element, declaration block with style properties and values.</p><p><img src='./assets/css/ruleset.jpg'></p>"
            },
            {
                "name": "What are media queries in css",
                "description": "<p>The Media query in CSS is used to create a responsive web design. It means that the view of a web page differs from system to system based on screen or media types.</p><p><strong>Using media queries</strong><br>#1. Using HTML<br><img src='./assets/css/mediaquery.png'><br>#2. Using CSS<br><img src='./assets/css/mediaquery1.png'><br>#3. Using Javascript<br><img src='./assets/css/mediaquery2.png'></p>"
            },
            {
                "name": "Can you explain the difference between a screen and print media query?",
                "description": "<p>A screen media query is used to format a document for display on a screen, such as a computer monitor or a mobile phone. A print media query is used to format a document for printing.</p>"
            },
            {
                "name": "How do you define different styles for multiple devices using media queries?",
                "description": "<p>You can use media queries to target different styles to different devices. For example, you could use a media query to target mobile devices and give them a different style than you would give to desktop devices. To do this, you would first create a separate style sheet for each device. Then, you would use a media query in the head of your HTML document to target the appropriate style sheet to each device.</p>"
            },
            {
                "name": "What is the default size of an image in HTML5?",
                "description": "<p>The default size of an image in HTML5 is 16×16 pixels.</p>"
            },
            {
                "name": "What does min-width media query mean?",
                "description": "<p>A min-width media query is used to apply different styles to a document depending on the minimum width of the browser window. This is useful for responsive design, where you want to change the layout of a page depending on the size of the screen. For example, you might use a min-width media query to make a sidebar appear on a desktop browser, but not on a mobile browser.</p>"
            },
            {
                "name": "Why should we use media queries instead of JavaScript or CSS to adjust layouts",
                "description": "<p>There are several reasons why media queries are preferable to using JavaScript or CSS to adjust layouts. First, media queries are more efficient because they only download the CSS that is needed for the specific device or screen size. Second, media queries are more reliable because they are based on the actual device or screen size, rather than on estimates. Finally, media queries are easier to use because they are based on standard CSS syntax.</p>"
            },
            {
                "name": "What is the best way to add color to your website?",
                "description": "<p>The best way to add color to your website is to use a CSS file to style your HTML elements. You can use CSS to change the color of your text, background, and even images. You can also use CSS to create hover effects and other dynamic styling changes.</p>"
            },
            {
                "name": "What’s the advantage of using CSS over images to create buttons, borders, and gradients?",
                "description": "<p>There are several advantages to using CSS over images to create buttons, borders, and gradients. First, CSS is much more flexible than images, so it can be easily adapted to different screen sizes and resolutions. Second, CSS is much faster to load than images, so it can help improve page load times. Finally, CSS is much easier to maintain than images, so it can save you time and effort in the long run.</p>"
            },
            {
                "name": "Is it possible to display text on top of an image? If yes, then how?",
                "description": "<p>Yes, it is possible to display text on top of an image using media queries. You can use the CSS property “position: absolute” to position the text on top of the image.</p>"
            },
            {
                "name": "What are some ways to optimize images for mobile apps?",
                "description": "<p>One way to optimize images for mobile apps is to use a technique called responsive image design. This involves creating images that can adapt to different screen sizes and resolutions. Another way to optimize images for mobile apps is to use a technique called compression. This involves reducing the file size of an image without reducing its quality.</p>"
            },
            {
                "name": "Can you give me some examples of real-world web applications that use media queries?",
                "description": "<p>Many responsive web design frameworks use media queries to target different screen sizes. Some popular examples include Bootstrap and Foundation. Additionally, many individual websites use media queries to optimize their site for different devices.</p>"
            },
            {
                "name": "What are some of the most popular frameworks used to build responsive websites",
                "description": "<p>Some of the most popular frameworks used to build responsive websites are Foundation, Bootstrap, and Skeleton.</p>"
            },
            {
                "name": "What is the importance of viewport meta tag when using media queries?",
                "description": "<p>The viewport meta tag is used to control the width and scaling of a webpage on different devices. When using media queries, it is important to set the viewport meta tag so that the media query will be applied correctly. Without the viewport meta tag, media queries may not work as intended.</p>"
            },
            {
                "name": "Which one would you prefer – device width or device height?",
                "description": "<p>There is no right or wrong answer to this question, as it depends on the specific needs of the project. If the content is more important than the layout, then device width might be the better option. However, if the layout is more important than the content, then device height might be the better option. Ultimately, it is up to the designer to decide which one is more important in each individual case.</p>"
            },
            {
                "name": "What are responsive design patterns?",
                "description": "<p>Responsive design patterns are layouts that respond to the size of the screen they are being viewed on. This means that the same content can be rearranged and displayed differently depending on whether it is being viewed on a phone, tablet, or desktop computer. Some common responsive design patterns include the column drop, layout shifter, and off-canvas menu.</p>"
            },
            {
                "name": "Can you explain the difference between fixed layout and fluid layout?",
                "description": "<p>A fixed layout has a set width and height, and will not resize no matter what screen size it is viewed on. A fluid layout, on the other hand, will resize itself to fit the width of the screen it is being viewed on. This makes fluid layouts more responsive to different screen sizes.</p>"
            },
            {
                "name": "What are the main challenges involved in creating a responsive web application",
                "description": "<p>The main challenges involved in creating a responsive web application are ensuring that the application can adapt to different screen sizes and resolutions, and that the user interface is easy to use on a variety of devices. Another challenge is optimizing the application for performance on mobile devices, which often have slower internet connections than desktop computers.</p>"
            },
            {
                "name": "Can you provide any tips or tricks to improve performance while using media queries?",
                "description": "<p>One potential issue with using media queries is that they can sometimes be slow to load. This can be improved by using media query conditions that are as specific as possible. For example, rather than using a media query that targets all devices with a screen width of 768px or less, it would be more specific to use a media query that only targets devices with a screen width of 480px or less. This can help improve performance by reducing the number of devices that need to be checked when the media query is executed.</p>"
            },
            {
                "name": "When is it okay to use inline styles? Do they have any benefits over external stylesheets?",
                "description": "<p>In general, it is best to avoid inline styles whenever possible. External stylesheets are much easier to maintain and update, and they can be applied to multiple pages at once. However, there are some situations where inline styles may be unavoidable or even preferable. For example, if you need to override a style on a specific element, or if you want to ensure that a style is applied immediately without requiring a page refresh, then inline styles may be your best option.</p>"
            },
            {
                "name": "What are some common mistakes that developers make while writing media queries",
                "description": "<p>One common mistake is not using the correct units when declaring media query breakpoints. Another is not using media queries at all, which can lead to a website that doesn’t look good on mobile devices. Finally, not testing media queries on different devices can also lead to problems.</p>"
            },
            {
                "name": "What screen resolutions do you use while taking screenshots?",
                "description": "<p>Smartphone: 320px, Tablet: 768px, Netbook: 1024px, Desktop: 1600px</p>"
            },
            {
                "name": "What is DOM (Document Object Model) and how is it linked to CSS?",
                "description": "<p>The <em>Document Object Model (DOM)</em> is a cross-platform and language-independent <em>application programming interface</em>that treats an HTML, XHTML, or XML document as a tree structure wherein each node is an object representing a part of the document. </p><p>With the Document Object Model, programmers can create and build documents, navigate their structure, and add, modify, or delete elements and content. The DOM specifies interfaces which may be used to manage XML or HTML documents. </p><p>When a browser displays a document, it must combine the document's content with its style information. The browser converts HTML and CSS into the DOM (Document Object Model). The DOM represents the document in the computer's memory. It combines the document's content with its style.</p>"
            },
            {
                "name": "Have you ever worked with retina graphics? If so, when and what techniques did you use?",
                "description": "<p><strong><code>Retina</code></strong> is just a marketing term to refer to high resolution screens with a pixel ratio bigger than 1. The key thing to know is that using a pixel ratio means these displays are emulating a lower resolution screen in order to show elements with the same size. Nowadays we consider all mobile devices <code>retina</code> defacto displays.</p><p>Browsers by default render DOM elements according to the device resolution, except for images.</p><p>In order to have crisp, good-looking graphics that make the best of retina displays we need to use high resolution images whenever possible. However using always the highest resolution images will have an impact on performance as more bytes will need to be sent over the wire.</p><p>To overcome this problem, we can use responsive images, as specified in HTML5. It requires making available different resolution files of the same image to the browser and let it decide which image is best, using the html attribute <code><strong>srcset</strong></code> and optionally <code><strong>sizes</strong></code>, for instance:<br><img src='./assets/css/retina.png'></p><p>It is important to note that browsers which don't support HTML5's srcset (i.e. IE11) will ignore it and use src instead. If we really need to support IE11 and we want to provide this feature for performance reasons, we can use a JavaScript polyfill, e.g. Picturefill (link in the references).</p><p>For icons, I would also opt to use SVGs and icon fonts where possible, as they render very crisply regardless of resolution.</p>"
            },
            {
                "name": "What does * { box-sizing: border-box; } do? What are its advantages?",
                "description": "<ul><li>By default, elements have <code>box-sizing: content-box</code> applied, and only the content size is being accounted for.</li><li><code>box-sizing: border-box</code> changes how the width and height of elements are being calculated, <code>border</code> and <code>padding</code> are also being included in the calculation.</li><li>The <code>height</code> of an element is now calculated by the content's height + vertical <code>padding</code> + vertical <code>border</code> width.</li><li>The <code>width</code> of an element is now calculated by the content's width + horizontal padding</code> + horizontal <code>border</code> width.</li></ul><br><img src='./assets/css/boxsizing.png'><br><strong>Result</strong><br><img src='./assets/css/boxsizing1.png'>"
            },
            {
                "name": "Explain the purpose of clearing floats in CSS",
                "description": "<p>The <code>clear</code> CSS property specifies whether an element can be next to floating elements that precede it or must be moved down (cleared) below them.</p><p><em>Clearing floats</em> (or clearfixing) basically forces the containing element to expand to contain its child elements. It thus forces the subsequent elements to appear below it.</p>"
            },
            {
                "name": "Difference between coding a website to be responsive versus using a mobile-first strategy?",
                "description": "<p>Note that these two 2 approaches are not exclusive.</p><p>Making a website responsive means the some elements will respond by adapting its size or other functionality according to the device's screen size, typically the viewport width, through CSS media queries, for example, making the font size smaller on smaller devices.<br><img src='./assets/css/mediaquery3.png'></p><p>A mobile-first strategy is also responsive, however it agrees we should default and define all the styles for mobile devices, and only add specific responsive rules to other devices later. Following the previous example:<br><img src='./assets/css/mediaquery4.png'></p><p>A mobile-first strategy has 2 main advantages:</p><ul><li>It's more performant on mobile devices, since all the rules applied for them don't have to be validated against any media queries.</li><li>It forces to write cleaner code in respect to responsive CSS rules.</li></ul>"
            },
            {
                "name": "Is there any reason you'd want to use translate() instead of absolute positioning, or vice-versa? And why?",
                "description": "<p><code>translate()</code> is a value of CSS <code>transform</code>. Changing <code>transform</code> or <code>opacity</code> does not trigger browser reflow or repaint but does trigger compositions; whereas changing the absolute positioning triggers <code>reflow</code>. <code>transform</code> causes the browser to create a GPU layer for the element but changing absolute positioning properties uses the CPU. Hence <code>translate()</code> is more efficient and will result in shorter paint times for smoother animations.</p><p>When using <code>translate()</code>, the element still occupies its original space (sort of like <code>position: relative</code>), unlike in changing the absolute positioning.</p>"
            },
            {
                "name": "Write down a selector that will match any links end in .zip, .ZIP, .Zip etc...",
                "description": "<p>Use <em>case-insensitive attribute matching</em>, <code>i</code>. This is a new feature in CSS Selectors Level 4.<br><img src='./assets/css/zip.png'></p>"
            },
            {
                "name": "What are common breakpoints?",
                "description": "<p>With a lot of CSS screen sizes in the market, there are no fixed breakpoints present that can be used on all devices. Therefore, it cant be said that there is a standard resolution.</p><ul><li><strong>For Mobile Devices</strong> – 320px — 480px</li><li><strong>iPads Portraits and Tablets</strong> – 481px — 768px</li><li><strong>Laptops and Ipad lanscape</strong> – 769px — 1024px</li><li><strong>Large screens and Desktops</strong> – 1025px — 1200px</li><li><strong>TV and Extra Large Screens</strong> – 1201px and more</li></ul>"
            },
            {
                "name": "What are the first approach or tips to develop responsive website",
                "description": "<ul><li><strong>Move from pixels and inches towards grids</strong> - Previously, websites were based on pixel measurements. Now, however, they are built on what is called a fluid grid. Basically, a fluid grid positions and sets web elements on a site in proportion to the screen size it is displayed on. Instead of making things in a single, specific size set in pixels, elements on a fluid grid will respond and resize to fit the size of the screen.</li><li><strong>Make use of media queries and breakpoints</strong> - With CSS breakpoints in place, the website content will align itself with screen size and displays itself in a way that pleases the eye and facilitates visual consumption.</li><li><strong>Define Typography</strong> - Previously the font-size were in pixels so for responsive design we should adapt respon font sizing. Here, Font size must change with respect to parent container width. This can be done by using rems unit instead of em. It is similar to the em unit but acts relative to the HTML element.</li><li><strong>Always use a viewport</strong> - The viewport meta tag is used to control the width and scaling of a webpage on different devices. When using media queries, it is important to set the viewport meta tag so that the media query will be applied correctly. Without the viewport meta tag, media queries may not work as intended.</li><li><strong>Test Responsiveness on Real Devices</strong></li><li><strong>Optimize the media for mobile</strong></li></ul>"
            }
            
        ]
    },
    {
        "folder": "SCSS",
        "title": "SCSS",
        "url": "/folder/SCSS",
        "icon": "logo-css3",
        "question": [
            {
                "name": "What is Sass?",
                "description": "<p>Sass or Syntactically Awesome StyleSheets is a CSS preprocessor which is a scripting language that extends CSS by allowing developers to write code in one language and then compile it into CSS.</p><p>It allows you to use variables, nested rules, mixins, inline imports, and more, all with a fully CSS-compatible syntax. Sass helps keep large stylesheets well-organized, and get small stylesheets up and running quickly.</p>"
            },
            {
                "name": "List out the key features for SCSS/SASS?",
                "description": "<ul><li>Full CSS3-compatible</li><li>Language extensions such as nesting, variables, and mixins</li><li>Many useful functions for manipulating colors and other values</li><li>Advanced features like control directives for libraries</li><li>Well-formatted, customizable output</li></ul>"
            },
            {
                "name": "List out the data types that Sass supports?",
                "description": "<ul><li>Numbers ( eg; 1,5 ,10px)</li><li>Strings of texts ( g., “foo”, ‘bar’, etc.)</li><li>Colors (blue, #04a3f9)</li><li>Booleans (true or false)</li><li>Nulls (e.g; null)</li><li>List of values, separated by space or commas (g., 1.5em, Arial, Helvetica etc.)</li><li>Maps from one value to another (g., ( key 1: value1, key 2: Value 2))</li></ul>"
            },
            {
                "name": "Explain Difference between Sass and Scss?",
                "description": "<ul><li>Sass is a CSS pre-processor with syntax advancements and an extension of CSS3</li><li>Sass has two syntax</li><li>The first syntax is “SCSS” and it uses the .scss extension</li><li>The other syntax is indented syntax or just “Sass” and it uses the .sass extension</li><li>While Sass has loose syntax with white space and no semicolons, the SCSS resembles more to CSS</li></ul>"
            },
            {
                "name": "@extend / inheritance in Sass?",
                "description": "<p>In Sass, the @EXTEND directive provides a simple way to allow a selector to inherit the styles of another one. It aims at providing a way for styles in  <strong>selector A</strong> to extend the styles from a <strong>selector B</strong>. When doing so, the <strong>selector A</strong> will be added to <strong>selector B</strong> so they both share the same declarations. @EXTEND prevents code bloat by grouping selectors that share the same style into one rule.<br><img src='./assets/css/extend.png'></p><p>CSS output:<br><img src='./assets/css/extend1.png'></p>"
            },
            {
                "name": "Mixins in Sass?",
                "description": "<p>A mixin lets you make groups of CSS declarations that you want to reuse throughout your site. A good use of a mixins is for vendor prefixes. Ex. Background-gradients, box-shadows, text-shadow, border-radius, animations, transform, transitions etc</p>"
            },
            {
                "name": "Map in Sass?",
                "description": "<p>Sass map is a structured data in a hierarchical way and not just a bunch of variables.<br><img src='./assets/css/sass-map.png'></p>"
            },
            {
                "name": "What are the advantages/disadvantages of using CSS preprocessors?",
                "description": "<p><strong>Advantages:</strong></p><ul><li>CSS is made more maintainable.</li><li>Easy to write nested selectors.</li><li>Variables for consistent theming. Can share theme files across different projects.</li><li>Mixins to generate repeated CSS.</li><li>Splitting your code into multiple files. CSS files can be split up too but doing so will require a HTTP request to download each CSS file.</li></ul><p><strong>Disadvantages:</strong></p><ul><li>Requires tools for preprocessing. Re-compilation time can be slow.</li></ul>"
            },
            {
                "name": "SCSS basic features - Variables",
                "description": "<p>Variables are useful for things like colors, fonts, font sizes, and certain dimensions, as you can be sure always using the same ones. Variables in SCSS start with $ sign<br><img src='./assets/css/variable.png'></p>"
            },
            {
                "name": "SCSS basic features - Nesting",
                "description": "<p>Basic nesting refers to the ability to have a declaration inside of a declaration.<br><img src='./assets/css/nesting.png'><br><img src='./assets/css/nesting1.png'></p>"
            },
            {
                "name": "SCSS basic features - Partials",
                "description": "<p>The partial Sass files contain little snippets of CSS that can be included in other Sass files. This is a great way to modularize your CSS and help keep things easier to maintain. A partial is a Sass file named with a leading underscore. You might name it something like <code>_partial.scss</code>. The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file. Sass partials are used with the <code>@use</code> rule.</p>"
            },
            {
                "name": "SCSS basic features - Modules",
                "description": "<p>This rule loads another Sass file as a module, which means we can refer to its variables, mixins, and functions in our Sass file with a namespace based on the filename. Using a file will also include the CSS it generates in your compiled output!<br><img src='./assets/css/modules.png'><br><img src='./assets/css/modules1.png'></p>"
            },
            {
                "name": "SCSS basic features - Mixins",
                "description": "<p>A mixin provide to make groups of CSS declarations that you want to reuse throughout your site. You can even pass in values to make your mixin more flexible.<br><img src='./assets/css/mixins.png'></p>"
            },
            {
                "name": "SCSS basic features - Inheritance",
                "description": "<p>Using <code>@extend</code> lets you share a set of CSS properties from one selector to another.<br><img src='./assets/css/inheritence.png'><br><img src='./assets/css/inheritence1.png'></p>"
            },
            {
                "name": "SCSS basic features - Operators",
                "description": "<p>Sass has a handful of standard math operators like <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, and <code>%</code>. In our example we're going to do some simple math to calculate widths for an aside &amp; article.<br><img src='./assets/css/operators.png'><br><img src='./assets/css/operators1.png'></p>"
            },
            {
                "name": "What is file splitting and why should you use it?",
                "description": "<p>File splitting helps organize your CSS into multiple files, decreasing page load time and making things easier to manage. How you decide to split them up is up to you, but it can be useful to separate files by component. For example, we can have all button styles in a file called <code>_buttons.scss</code> or all your header-specific styles in a file called <code>_header.scss</code>, main file, say _app.scss, and we can import those files by writing @import 'buttons';</p>"
            },
            {
                "name": "Explain what Sass Maps is and what is the use of Sass Maps?",
                "description": "<p>Sass map is a structured data in a hierarchical way and not just a bunch of variables. It can help in organizing the code. Some great use of Sass are</p><ul><li>It is very useful when dealing with layers of elements in your project</li><li>It can be helpful in color management when there is long list of different color and shade</li><li>Use icon map for various social media icons for example: facebook: ‘\\e607’ or twitter: ‘\\e602’</li><li>Unlike other programming libraries, Sass map will consist only of code that is going to be used</li></ul>"
            },
            {
                "name": "Explain when can you use the %placeholders in Sass?",
                "description": "<p>%placeholders in Sass is useful when you want to write styles that were meant to be extended, but you don’t want the base styles to be seen in output CSS styles</p><p>In Short, %placeholder are classes that aren’t output when your SCSS is compiled</p>"
            },
            {
                "name": "Explain what is the use of &combinator ",
                "description": "<p>&amp;combinator concatenates nested selector with the parent selector. It is useful for Pseudo classes such as :hover and :focus</p>"
            },
            {
                "name": "Explain the use of Sass @import function?",
                "description": "<ul><li>It facilitates you to extend the CSS import rule. To do this you need to enable import of Sass and SCSS files.</li><li>It can merge the all the imported files into a single outputted CSS file.</li><li>It is used to virtually match and mix any file.</li><li>It needs a filename to import function.</li><li>It provides document style presentation better than flat CSS.</li><li>It facilitates you to keep your responsive design project more organized.</li></ul>"
            },
            {
                "name": "What is the way to write a placeholder selector in Sass?",
                "description": "<p>In Sass, the placeholder selectors can be used with class or id selector. In standard CSS, these are specified with \"#\" or \".\", but in SASS they are replaced with \"%\". It uses @extend directive to display the result in CSS. For example:<br><img src='./assets/css/placeholder.png'></p>"
            },
            {
                "name": "What is the use of at-root directive in SASS?",
                "description": "The Sass @at-root directive is a collection of nested rules that are used to style block at the root of the document. For example:-"
            },
            {
                "name": "What are Sass cons and pros?",
                "description": "<p><strong>Pros</strong>:</p><ul><li>Sass is easy to learn especially for them who has a background of Python, Ruby or Coffescript and place using functions, writing mixins</li><li>CSS can be easily converted to Sass</li><li>Throughout the project, you don’t have to repeat similar CSS statements using @extend attribute</li><li>It allows to define variables that are usable throughout the entire project</li><li>It keeps your responsive project more organized</li></ul><p><strong>Cons</strong>:</p><ul><li>Requires time to learn new features of preprocessor before using</li><li>You may not be able to use the built-in element inspector feature of the browser</li><li>Troubleshooting can be difficult</li></ul>"
            },
            {
                "name": "How can you refer a parent selector in the SASS?",
                "description": "<p>We can easily select the parent selector by using the &amp; character. It specifies where we should insert the parent selector.</p>"
            },
            {
                "name": "Which directive is used to detect the errors in SASS?",
                "description": "<p>Sass @debug directive is used to detect the errors and display the Sass Script expressions values to the standard error output stream. For example:<br><img src='./assets/css/debug.png'></p>"
            },
            {
                "name": "What is the meaning of DRY-ing out a mixin?",
                "description": "<p><strong>DRY-ing</strong> out a mixin means splitting it into <strong>static</strong> and <strong>dynamic</strong> parts. The dynamic mixin is the one the user is going to call, and the static mixin is only going to contain the pieces that would otherwise get duplicated.<br><img src='./assets/css/mixins.png'></p>"
            },
            {
                "name": "How many output styles are there in Sass?",
                "description": "<p>By default, Sass outputs the CSS in a nested style, which is a style that reflects the document structure. Sass allows to choose between four styles: nested, expanded, compact, and compressed.</p><br><p><strong>:nested</strong> - Nested style is the default Sass style because it reflects the structure of the CSS styles in which each property has its own line, but the indentation is based on how deeply it's nested.</p><strong>sass --watch style.scss:style.css --style nested</strong><br><img src='./assets/css/nested.png'><p><strong>:expanded</strong> - In expanded style properties are indented within the rules, but the rules aren't indendented in any special way like in :nested output style.</p><strong>sass --watch style.scss:style.css --style expanded</strong><br><img src='./assets/css/expanded.png'><p><strong>:compact</strong> - In compact style each rule takes up only one line with every property defined on that line. It takes up less space than :nested and :expanded.</p><strong>sass --watch style.scss:style.css --style  compact</strong><br><img src='./assets/css/compact.png'><p><strong>:compressed</strong> - Compressed styles takes up the minimum amount of space possible. There is no whitespace except space that is necessary to separate selectors and the newline on the end of the document.</p><strong>sass --watch style.scss:style.css --style compressed</strong><br><img src='./assets/css/compressed.png'>"
            }
        ]
    },
    {
        "folder": "JQuery",
        "title": "JQuery",
        "url": "/folder/JQuery",
        "icon": "logo-javascript",
        "question": [
            {
                "name": "What is jQuery?",
                "description": "<p>jQuery is a client side JavaScript framework which helps in to traverse HTML DOM, make animations, add Ajax interaction, manipulate the page content, change the style and provide cool UI effect. It is one of the most popular client side library and as per a survey it runs on every second website.</p><p>Basic syntax is: <code>$(selector).action()</code></p>"
            },
            {
                "name": "Why do we use jQuery?",
                "description": "<ul><li>Easy to use and learn.</li><li>Cross-browser support</li><li>Easy to use for DOM manipulation</li><li>AJAX Capabilities.</li><li>Methods for changing or applying CSS, creating animations.</li><li>Event detection and handling.</li></ul>"
            },
            {
                "name": "Which is the starting point of code execution in jQuery?",
                "description": "<p>The starting point of jQuery code execution is <code>$(document).ready()</code> function which is executed when DOM is loaded.</p>"
            },
            {
                "name": "What does dollar sign ($) means in jQuery?",
                "description": "<p>Dollar Sign is nothing but it's an alias for JQuery. Take a look at below jQuery code.</p>"
            },
            {
                "name": "What is a CDN?",
                "description": "<p>A content delivery network (CDN) is a large network of servers deployed in multiple data centers across the Internet. The goal of a CDN is to serve content to end-users with high availability and high performance.</p><p>Advantages of using CDN:</p><ul><li>It reduces the load from your server.</li><li>It saves bandwidth. jQuery framework will load faster from these CDN.</li><li>The most important benefit is it will be cached, if the user has visited any site which is using jQuery framework from any of these CDN</li></ul><p>There are 3 popular jQuery CDNs i.e. - Google, Microsoft, jQuery.</p>"
            },
            {
                "name": "Difference between document.ready() and body onload() functions?",
                "description": "<p><code>$(document).ready()</code> will trigger a browser specific method as soon as HTML document is loaded[all the elements are loaded] and is accessible. This point is the safest point to bind all the functions/callbacks to DOM elements without breaking, since all DOM elements on HTML are available. It does not wait for associated resources (images) to load.</p><p><code>body.onload()</code> event will be called after all the related resources and images are completely loaded. Using onload() for animation binding or other bindings will cause significant performance delay in case the page contains large images or is being used in a slow connection where loading of images might take time.</p>"
            },
            {
                "name": "Which is the fastest and slowest selector in jQuery?",
                "description": "<p>ID and Element selector are the fastest selectors in jQuery. and Class selectors are the slowest selectors in jQuery.</p>"
            },
            {
                "name": "Difference between $(this) and this in jquery?",
                "description": "<p>this is the DOM object, whereas $(this) is the jQuery wrapper around same.<br>When using this, you can call DOM methods on it, but not jQuery methods. When using $(this), you can call jQuery methods on it, but not DOM methods</p>"
            },
            {
                "name": "jQuery Event Methods?",
                "description": "<p><code>blur(), change(), click(), hover(), keydown(), keypress(), keyup()</code></p>"
            },
            {
                "name": "jQuery Effect Methods?",
                "description": "<p><code>animate(), fadeIn(), fadeOut(), fadeTo(), fadeToggle(), hide(), show(), toggle(), slideDown(), slideUp(), slideToggle()</code></p>"
            },
            {
                "name": "jQuery HTML / CSS Methods?",
                "description": "<p><code>addClass(), removeClass(), toggleClass(), hasClass(), attr(), removeAttr(), append(), prepend()</code></p>"
            },
            {
                "name": "jQuery Ajax Method?",
                "description": "<p><img src='./assets/jquery/ajax-jquery.png'><br><img src='./assets/jquery/ajax-get-jquery.png'><br><img src='./assets/jquery/ajax-getJson-jquery.png'></p>"
            }
        ]
    },
    {
        "folder": "Micro Frontend",
        "title": "Micro Frontend",
        "url": "/folder/Micro Frontend",
        "icon": "apps-outline",
        "question": [
            {
                "name": "What are micro frontends?",
                "description": "<p>Micro frontends are a way of breaking up a too large frontend application into smaller, more manageable pieces. This approach can make development and maintenance more efficient, and allow for greater flexibility in how different parts of the application are implemented.</p><p><img src='./assets/microfrontend/microfrontend.png'></p><p>Say for example we have 6 frontend apps working together to deliver the large application. The communication between these apps can be done with an event bus, window object, or publish/subscribe methods. Each app can be implemented by a separate team and any framework. Each app can talk to their backends or endpoints individually. There is a bootstrap/launch app that loads all the apps and mounts and unmounts in the DOM depending on the user interaction or routing.</p>"
            },
            {
                "name": "What are the different types of micro frontends?",
                "description": "<p>There are two types of micro frontends: those that use iframes and those that use web components. Iframes are the more traditional approach and involve embedding a small piece of HTML code inside of another HTML document. Web components are a newer approach that allows for more flexibility and interactivity between the different micro frontends.</p>"
            },
            {
                "name": "What are some advantages and disadvantages of using micro frontends?",
                "description": "<p>Some advantages of using micro frontends include the ability to break up a large frontend application into smaller, more manageable pieces, Apps are easier to test as with each app there has few unit tests and executes its own unit tests and can be run independently, as well as the ability to allow different teams to work on different parts of the frontend independently. Additionally, micro frontends can improve the overall performance of a frontend application by loading only the necessary code for each page. Each app can be integrated and deployed separately and this makes the CI/CD process a lot easier. When we fix the app or introduce a new feature we don't have to worry about the entire application since all the features are independent.</p><p>Some advantages of using micro frontends include the ability to break up a large frontend application into smaller, more manageable pieces, as well as the ability to allow different teams to work on different parts of the frontend independently. Additionally, micro frontends can improve the overall performance of a frontend application by loading only the necessary code for each page.</p>"
            },
            {
                "name": "How Do We Split Apps in Micro front end",
                "description": "<p><strong>By Feature</strong> - This is the most common method since we can easily divide the features of the app. For example, if there are three features for the app Dashboard, Profile and views we can make each feature as a separate app and mounts and unmounts in the DOM with the help of Launch.js. This Launch.js can be a separate app or just a simple javascript app.</p><p><img src='./assets/microfrontend/byFeature.png'></p><p><strong>By Section</strong> - Some of the apps have so much functionality with each section. We can implement each section as a new app in that scenario.</p><p><img src='./assets/microfrontend/bySection.png'></p><p><strong>By Page</strong> - Some app's functionalities are divided by page. Each page has some functionality that can be independent. We can divide these apps by page We have four pages in the below diagram. we can make four apps out of this.</p><p><img src='./assets/microfrontend/byPage.png'></p><p><strong>By Domain</strong> - Splitting app based on the domain is also one of the most common approaches.</p><p><img src='./assets/microfrontend/byDomain.png'></p>"
            },
            {
                "name": "What are some best practices when developing micro frontend apps?",
                "description": "<p>Some best practices when developing micro frontend apps include:</p><p>– Keep the UI simple and consistent across all micro frontend apps<br>– Make sure each micro frontend app is self-contained and can be deployed independently<br>– Avoid tight coupling between micro frontend apps<br>– Use a shared library for common code that is shared between micro frontend apps</p>"
            },
            {
                "name": "If I asked you to develop a new micro frontend app from scratch, how would you go about doing so?",
                "description": "<p>There are a few different ways to go about developing a micro frontend app from scratch. One approach would be to use a framework like React or Angular to build out the individual components that make up the app. Another approach would be to use a tool like Webpack to bundle together the different components into a single file that can be loaded by the browser. Whichever approach you choose, the goal is to keep the individual components small and self-contained so that they can be easily reused in other micro frontend apps.</p>"
            },
            {
                "name": "How Do You Define Microservices?",
                "description": "<p>Microservice Architecture, is an architectural style that structures an application as a collection of small autonomous services, modeled around a business domain.</p>"
            },
            {
                "name": "List down the advantages of Microservices Architecture?",
                "description": "<ul><li><strong>Independent Development.</strong> All microservices can be easily developed based on their individual functionality</li><li><strong>Independent Deployment.</strong> Based on their services, they can be individually deployed in any application</li><li><strong>Fault Isolation.</strong> Even if one service of the application does not work, the system still continues to function</li><li><strong>Mixed Technology Stack.</strong> Different languages and technologies can be used to build different services of the same application</li><li><strong>Granular Scaling.</strong> Individual components can scale as per need, there is no need to scale all components together</li></ul>"
            },
            {
                "name": "Explain the importance/need of reports and dashboards in microservices",
                "description": "<p>They require heavy investment Microservices demand a great deal of collaboration. Since your teams are working independently, they should be able to synchronize well at all times.</p><p>They need heavy architecture set up – The system is distributed, the architecture is heavily involved.</p><p>They need excessive planning for handling operations overhead – You need to be ready for operations overhead if you are planning to use a microservices architecture.</p><p>They have autonomous staff selection – Skilled professionals are needed who can support microservices that are distributed heterogeneously.</p>"
            },
            {
                "name": "Explain the term Spring Boot-Eureka in Microservices.",
                "description": "<p>Eureka is a term used to describe an application that holds information about the client. It is part of the Spring Cloud bundle. In order to do this, it is necessary to develop the Eureka server and to run it on port 8761 by default.</p>"
            },
            {
                "name": "What do you mean by end-to-end microservices testing?",
                "description": "<p>End-to-end microservice testing is used to ensure the flow of an application through a business transaction. This testing is an uncoordinated and high-cost technique that is done through the user interface.</p>"
            },
            {
                "name": "Explain continuous monitoring.",
                "description": "<p>Continuous monitoring is the technology that is used to identify risk issues and compliance in a company's operational overhead and financial environment. To support efficient and effective operations, it consists of processes, a working system, and people.</p>"
            },
            {
                "name": "What do you mean by Semantic/Synthetic Monitoring?",
                "description": "<p>Semantic Monitoring or Synthetic Monitoring is basically automated testing and application that helps in monitoring errors in business processes. This technology helps to capture errors in transactions, identify performance issues of microservices, and provide an in-depth look at transaction performance.</p>"
            },
            {
                "name": "What do you mean by client certificates?",
                "description": "<p>The client certificate plays an important role in securely authenticating their requests to remote services. This is a type of digital certificate that allows client systems to authenticate requests.</p>"
            },
            {
                "name": "List three common tools used to develop microservices",
                "description": "<ul><li>Hystrix</li><li>Docker </li><li>Wiremock </li></ul>"
            },
            {
                "name": "What do you mean by Cohesion and Coupling?",
                "description": "<p>Both Cohesion and Coupling happen simultaneously where high cohesion describes the relationship between two or more elements of a particular module. On the other hand, Coupling describes the relationship between two or more modules.</p>"
            },
            {
                "name": "What is the use of containers in Microservices?",
                "description": "<p>Container in microservices is like an operating system in which all the codes, layout files, & libraries are run. It is comparatively light in weight. In other words, it consists of a collection of resources and applications to accomplish a specific task.</p><p>There are multiple use cases of the container in microservices such as it provides adequate support to the service oriented architecture and also provides more straightforward deployment of repetitive tasks.</p>"
            },
            {
                "name": "To what extent does Docker play a role in microservices?",
                "description": "<p>The arrival of the docker technology when any developer develops any software in their computer environment, it worked fine but when it comes to production, its shows error because of the difference in a computing environment. This is similar in Microservices also. Docker solves this problem, In this case, In a container, there are multiple docker containers that are responsible for running each microservices. The memory or disk space for a docker container does not need to be allocated beforehand.</p>"
            },
            {
                "name": "How would you implement SSO for Microservice Architecture?",
                "description": "<p>Add identity service and authorize service access through it using tokens. Any service that has protected resources will talk to the Identity service to make sure the credentials (token) it has are valid. If they are not it will redirect the user for authentication. Once the token had been validated then it could be saved in the session so subsequent calls in the user's session did not have to make the additional call. You can also create a scheduled job if tokens need to be refreshed in that session.</p><p>A good way to resolve it is by using the OAuth 2 protocol. In this situation you could authenticate with an OAuth 2.0 endpoint and the token will be added to the HTTP header for calls to your domain. All of the services shall be routed from that domain so you could get the token from the HTTP header.</p><p><img src='./assets/microfrontend/zNbPk.jpg'></p>"
            },
            {
                "name": "What types of microservices tests are used most often?",
                "description": "<p>In computer science, the testing of microservices is relatively complicated. So basically, tests are categorized into 3 categories like bottom level, middle level, and top level test.</p><ul><li>We can consider the bottom level test is dedicated to technology that is a completely automated test.</li><li>Then, a mid-level test deals with the exploratory test that can figure out some stress and usability test.</li><li>Lastly, the top-level test is the acceptance test. Acknowledging the software's capabilities is the purpose of the acceptance tests.</li></ul>"
            },
            {
                "name": "Explain Idempotence?",
                "description": "<p>The idea of idempotency is that a request can be repeated endlessly without having side effects on the backend. It is a very common problem in computer science and especially in microservices architecture.</p>"
            }
        ]
    },
    {
        "folder": "Agile & Scrum",
        "title": "Agile & Scrum",
        "url": "/folder/Agile & Scrum",
        "icon": "analytics-outline",
        "question": [
            {
                "name": "What is Sprint in Scrum?",
                "description": "<p>In the Scrum methodology a <strong>Sprint</strong> is the <strong>basic unit of development</strong>. Scrum sprints correspond to Agile iterations. </p><p>Each Sprint starts with <p><ul><li>a <strong>planning meeting</strong>, where the tasks for the sprint are identified and an estimated commitment for the<strong>sprint goal</strong> is made.</li></ul><p>A Sprint ends with</p><ul><li>a <strong>review or retrospective meeting</strong> where the progress is reviewed and lessons for the next sprint are identified. During each sprint, the team creates finished portions of a product.</li></ul>"
            },
            {
                "name": "What is an Agile iteration?",
                "description": "<p>An <strong>Agile iteration</strong> is a short one to two week period where a team takes most important user stories, builds them completely and deliver as running-tested-software to the customer. Analysis, design, coding, testing happen during an iteration.</p>"
            },
            {
                "name": "Name roles in Scrum",
                "description": "<p>Three essential roles for scrum success are:</p><ul><li><strong>The Product Owner</strong> are the champions for their product. They are focused on understanding business and market requirements, then prioritizing the work to be done by the engineering team accordingly.</li><li><strong>The Scrum Master</strong> are the champion for scrum within their team. They coach the team, the product owner, and the business on the scrum process and look for ways to fine-tune their practice of it.</li><li><strong>The Scrum Team</strong> are the champions for sustainable development practices. Scrum teams are cross-functional, 'the development team' includes testers, designers, and ops engineers in addition to developers.</li></ul>"
            },
            {
                "name": "What is an Epic, User Stories and Task? ",
                "description": "<ul><li><strong>Epic:</strong> A customer described software feature that is itemized in the product backlog is known as epic. Epics are sub-divided into stories.</li><li><strong>User Stories:</strong> From the client perspective user stories define project or business functions, and delivered in a particular sprint.</li><li><strong>Task:</strong> Further down user stories are broken down into different tasks.</li></ul>"
            },
            {
                "name": "What is the Scrum's definition of Done? ",
                "description": "<p>When a Product Backlog item or an set of items is <strong>completed</strong> and that <strong>understanding is shared</strong> all across the Scrum Team the item is considered as <strong>Done</strong>.</p><p>The purpose of each Sprint <strong>is to deliver Increments</strong> of potentially releasable functionality that adhere to the Scrum Team's current definition of <strong>Done</strong>.</p>"
            },
            {
                "name": "Explain what is Spike and Zero Sprint in Agile? What is the purpose of it?",
                "description": "<p><strong>Sprint Zero:</strong> It is introduced to perform some research before initiating the first sprint. Usually this sprint is used during the start of the project for activities like setting development environment, preparing product backlog and so on.</p><p><strong>Spikes:</strong> Spikes are type of stories that are used for activities like research, exploration, design and even prototyping. In between sprints, you can take spikes for the work related to any technical or design issue. Spikes are of two types: <strong>#Technical Spikes</strong> and <strong>Functional Spikes.</strong></p>"
            },
            {
                "name": "Explain what is Refactoring?",
                "description": "<p>To <strong>improve the performance or readability</strong>, the existing code is modified; this is re-factoring.</p><p>During re-factoring the <strong>code functionality remains same</strong>.</p>"
            },
            {
                "name": "What is Scrum?",
                "description": "<p><strong>Scrum</strong> is one of the most popular frameworks for implementing Agile. Many people think scrum and agile are the same thing but they're not. With scrum, the product is built in a series of fixed-length iterations called sprints that give teams a framework for shipping software on a regular cadence.</p>"
            }
        ]
    },
    {
        "folder": "Software Engineering",
        "title": "Software Engineering",
        "url": "/folder/Software Engineering",
        "icon": "laptop-outline",
        "question": [
            {
                "name": "Software Processes",
                "description": "<p>A software process is the set of activities and associated outcome that produce a software product. Software engineers mostly carry out these activities. These are four key process activities, which are common to all software processes. These activities are:</p><ol><li><strong>Software specifications:</strong> The functionality of the software and constraints on its operation must be defined.</li><li><strong>Software development:</strong> The software to meet the requirement must be produced.</li><li><strong>Software validation:</strong> The software must be validated to ensure that it does what the customer wants.</li><li><strong>Software evolution:</strong> The software must evolve to meet changing client needs.</li></ol>"
            },
            {
                "name": "Software Development Life Cycle / SDLC Cycle",
                "description": "<p><img src='./assets/se/sdlc.png'></p>"
            },
            {
                "name": "Stages of SDLC",
                "description": "<p><img src='./assets/se/sdlc.png'></p><ol><li><strong>Stage1: Planning and requirement analysis</strong> - Requirement Analysis is the most important and necessary stage in SDLC. The senior members of the team perform it with inputs from all the stakeholders and domain experts or SMEs in the industry. Planning for the quality assurance requirements and identifications of the risks associated with the projects is also done at this stage. Business analyst and Project organizer set up a meeting with the client to gather all the data like what the customer wants to build, who will be the end user, what is the objective of the product. </li><li><strong>Stage2: Defining Requirements</strong> - Once the requirement analysis is done, the next stage is to certainly represent and document the software requirements and get them accepted from the project stakeholders. This is accomplished through 'SRS'- Software Requirement Specification document which contains all the product requirements to be constructed and developed during the project life cycle.</li><li><strong>Stage3: Designing the Software</strong> - The next phase is about to bring down all the knowledge of requirements, analysis, and design of the software project. This phase is the product of the last two, like inputs from the customer and requirement gathering.</li><li><strong>Stage4: Developing the project</strong> - In this phase, the actual development begins, and the programming is built. The implementation of design begins concerning writing code. Developers have to follow the coding guidelines described by their management and programming tools like compilers, interpreters, debuggers, etc. are used to develop and implement the code.</li><li><strong>Stage5: Testing</strong> - After the code is generated, it is tested against the requirements to make sure that the products are solving the needs addressed and gathered during the requirements stage. During this stage, unit testing, integration testing, system testing, acceptance testing are done.</li><li><strong>Stage6: Deployment</strong> - Once the software is certified, and no bugs or errors are stated, then it is deployed. Then based on the assessment, the software may be released as it is or with suggested enhancement in the object segment. After the software is deployed, then its maintenance begins.</li><li><strong>Stage7: Maintenance</strong> - Once when the client starts using the developed systems, then the real issues come up and requirements to be solved from time to time. This procedure where the care is taken for the developed product is known as maintenance.</li></ol>"
            },
            {
                "name": "SDLC Models",
                "description": "<p><img src='./assets/se/sdlcModels.png'></p><p>Here, are some important phases of SDLC life cycle:</p><p><img src='./assets/se/sdlcModels.png'></p><ol><li><strong>Waterfall Model</strong> - In this method, the whole process of software development is divided into various phases. <br><br>The waterfall model is a continuous software development model in which development is seen as flowing steadily downwards (like a waterfall) through the steps of requirements analysis, design, implementation, testing (validation), integration, and maintenance.</li><li><strong>RAD Model</strong> - Rapid Application Development process is an adoption of the waterfall model; it targets developing software in a short period. The RAD model is based on the concept that a better system can be developed in lesser time by using focus groups to gather system requirements. #Business Modeling, #Data Modeling, #Process Modeling, #Application Generation, #Testing and Turnover</li><li><strong>Spiral Model</strong> - The spiral technique is a combination of rapid prototyping and concurrency in design and development activities. <br><br>Each cycle in the spiral begins with the identification of objectives for that cycle, the different alternatives that are possible for achieving the goals, and the constraints that exist. <br><br>The next step in the cycle is to evaluate these different alternatives based on the objectives and constraints. The focus of evaluation in this step is based on the risk perception for the project. <br><br>The next step is to develop strategies that solve uncertainties and risks. This step may involve activities such as benchmarking, simulation, and prototyping.</li><li><strong>V-Model</strong> - In this type of SDLC model testing and the development, the step is planned in parallel. So, there are verification phases on the side and the validation phase on the other side. V-Model joins by Coding phase.</li><li><strong>Incremental Model</strong> - It is necessarily a series of waterfall cycles. The requirements are divided into groups at the start of the project. For each group, the SDLC model is followed to develop software. The SDLC process is repeated, with each release adding more functionality until all requirements are met. In this method, each cycle act as the maintenance phase for the previous software release. Modification to the incremental model allows development cycles to overlap. After that subsequent cycle may begin before the previous cycle is complete.</li><li><strong>Agile Model</strong> - Agile methodology is a practice which promotes continues interaction of development and testing during the SDLC process of any project. In the Agile method, the entire project is divided into small incremental builds. All of these builds are provided in iterations, and each iteration lasts from one to three weeks. <br><br>Any agile software phase is characterized in a manner that addresses several key assumptions about the bulk of software projects: <br><br># It is difficult to think in advance which software requirements will persist and which will change. It is equally difficult to predict how user priorities will change as the project proceeds. <br><br># For many types of software, design and development are interleaved. That is, both activities should be performed in tandem so that design models are proven as they are created. It is difficult to think about how much design is necessary before construction is used to test the configuration. <br><br># Analysis, design, development, and testing are not as predictable (from a planning point of view) as we might like.</li><li><strong>Big bang model</strong> - Big bang model is focusing on all types of resources in software development and coding, with no or very little planning. The requirements are understood and implemented when they come. <br><br>This model works best for small projects with smaller size development team which are working together. It is also useful for academic software development projects. It is an ideal model where requirements are either unknown or final release date is not given.</li><li><strong>Prototype Model</strong> - The prototyping model starts with the requirements gathering. The developer and the user meet and define the purpose of the software, identify the needs, etc. <br><br>A <strong>'quick design'</strong> is then created. This design focuses on those aspects of the software that will be visible to the user. It then leads to the development of a prototype. The customer then checks the prototype, and any modifications or changes that are needed are made to the prototype. <br><br>Looping takes place in this step, and better versions of the prototype are created. These are continuously shown to the user so that any new changes can be updated in the prototype. This process continue until the customer is satisfied with the system. Once a user is satisfied, the prototype is converted to the actual system with all considerations for quality and security.</li></ol>"
            },
            {
                "name": "Requirement Engineering Process",
                "description": "<p>It is a four-step process, which includes - </p><ul><li>Feasibility Study - The objective behind the feasibility study is to create the reasons for developing the software that is acceptable to users, flexible to change and conformable to established standards.</li><li>Requirement Elicitation and Analysis - This is also known as the gathering of requirements. Here, requirements are identified with the help of customers and existing systems processes, if available.</li><li>Software Requirement Specification - Software requirement specification is a kind of document which is created by a software analyst after the requirements collected from the various sources - the requirement received by the customer written in ordinary language. It is the job of the analyst to write the requirement in technical language so that they can be understood and beneficial by the development team.</li><li>Software Requirement Validation - After requirement specifications developed, the requirements discussed in this document are validated.</li><li>Software Requirement Management - Requirement management is the process of managing changing requirements during the requirements engineering process and system development. New requirements emerge during the process as business needs a change, and a better understanding of the system is developed.</li></ul>"
            },
            {
                "name": "Activities involved for Software Project Management",
                "description": "<ol><li>Project planning and Tracking - It is a set of multiple processes, or we can say that it a task that performed before the construction of the product starts.</li><li>Project Resource Management - In software Development, all the elements are referred to as resources for the project. It can be a human resource, productive tools, and libraries. such as #Create a project team and assign responsibilities to every team member, #Developing a resource plan is derived from the project plan., #Adjustment of resources.</li><li>Scope Management - It describes the scope of the project. Scope management is important because it clearly defines what would do and what would not.</li><li>Estimation Management - If we talk about the size, then Line of code depends upon user or software requirement. If we talk about effort, we should know about the size of the software, because based on the size we can quickly estimate how big team required to produce the software. If we talk about time, when size and efforts are estimated, the time required to develop the software can easily determine. If we talk about cost, it includes all the elements such as: #Size of software, #Quality, #Hardware, #Communication, #Training, Additional Software and tools, #Skilled manpower</li><li>Project Risk Management - Risk management consists of all the activities like identification, analyzing and preparing the plan for predictable and unpredictable risk in the project. such as #The Experienced team leaves the project, and the new team joins it., #Changes in requirement., #Change in technologies and the environment., #Market competition.</li><li>Scheduling Management - Scheduling Management in software refers to all the activities to complete in the specified order and within time slotted to each activity. Project managers define multiple tasks and arrange them keeping various factors in mind.</li><li>Project Communication Management - Communication is an essential factor in the success of the project. It is a bridge between client, organization, team members. From the planning to closure, communication plays a vital role. In all the phases, communication must be clear and understood. Miscommunication can create a big blunder in the project.</li><li>Configuration Management - Configuration management is about to control the changes in software like requirements, design, and development of the product.</li></ol>"
            },
            {
                "name": "Activities involved for Risk Management",
                "description": "<p><img src='./assets/se/risk-management-activities.png'></p><p>The objective of risk assessment is to division the risks in the condition of their loss, causing potential. For risk assessment, first, every risk should be rated in two methods:</p><ul><li>The possibility of a risk coming true (denoted as r). </li><li>The consequence of the issues relates to that risk (denoted as s). </li></ul><p>If all identified risks are set up, then the most likely and damaging risks can be controlled first, and more comprehensive risk abatement methods can be designed for these risks.</p><p><strong>1. Risk Identification:</strong> - There are different types of risks which can affect a software project:</p><ol><li><strong>Technology risks:</strong> Risks that assume from the software or hardware technologies that are used to develop the system.</li><li><strong>People risks:</strong> Risks that are connected with the person in the development team.</li><li><strong>Organizational risks:</strong> Risks that assume from the organizational environment where the software is being developed.</li><li><strong>Tools risks:</strong> Risks that assume from the software tools and other support software used to create the system.</li><li><strong>Requirement risks:</strong> Risks that assume from the changes to the customer requirement and the process of managing the requirements change.</li><li><strong>Estimation risks:</strong> Risks that assume from the management estimates of the resources required to build the system </li></ol><p><strong>2. Risk Analysis:</strong> - During the risk analysis process, you have to consider every identified risk and make a perception of the probability and seriousness of that risk. One has to rely on your perception and experience of previous projects and the problems that arise in them.</p><br><br><p><strong>Risk Control</strong> - It is the process of managing risks to achieve desired outcomes. After all, the identified risks of a plan are determined; the project must be made to include the most harmful and the most likely risks. Different risks need different containment methods. There are three main methods to plan for risk management:</p><ol><li><strong>Avoid the risk:</strong> This may take several ways such as discussing with the client to change the requirements to decrease the scope of the work, giving incentives to the engineers to avoid the risk of human resources turnover, etc.</li><li><strong>Transfer the risk:</strong> This method involves getting the risky element developed by a third party, buying insurance cover, etc.</li><li><strong>Risk reduction:</strong> This means planning method to include the loss due to risk. For instance, if there is a risk that some key personnel might leave, new recruitment can be planned. </li></ol>"
            },
            {
                "name": "Project Scheduling",
                "description": "<p>Project-task scheduling is a significant project planning activity. It comprises deciding which functions would be taken up when. To schedule the project plan, a software project manager wants to do the following:</p><ol><li>Identify all the functions required to complete the project.</li><li>Break down large functions into small activities.</li><li>Determine the dependency among various activities.</li><li>Establish the most likely size for the time duration required to complete the activities.</li><li>Allocate resources to activities.</li><li>Plan the beginning and ending dates for different activities.</li><li>Determine the critical path. A critical way is the group of activities that decide the duration of the project.</li></ol>"
            },
            {
                "name": "Personnel Planning",
                "description": "<p>Personnel Planning deals with staffing. Staffing deals with the appoint personnel for the position that is identified by the organizational structure. It involves:</p><ul><li>Defining requirement for personnel</li><li>Recruiting (identifying, interviewing, and selecting candidates)</li><li>Compensating</li><li>Developing and promoting agent</li></ul><p><strong>Team Structure</strong> - Team structure addresses the issue of arrangement of the individual project teams.</p><p>For personnel planning and scheduling, it is helpful to have efforts and schedule size for the subsystems and necessary component in the system.</p><p>Team structure addresses the issue of arrangement of the individual project teams. There are some possible methods in which the different project teams can be organized. There are primarily three formal team structures: <strong>chief programmer, Ego-less or democratic, and the mixed team organizations</strong></p>"
            },
            {
                "name": "Programming Style",
                "description": "<p>Some general rules or guidelines in respect of programming style:</p><p><strong>1. Clarity and simplicity of Expression:</strong> The programs should be designed in such a manner so that the objectives of the program is clear.</p><p><strong>2. Naming:</strong> In a program, you are required to name the module, processes, and variable, and so on. Care should be taken that the naming style should not be cryptic and non-representative.</p><p><strong>&nbsp; &nbsp; &nbsp; For Example:</strong> a = 3.14 * r * r<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; area of circle = 3.14 * radius * radius;</p><p><strong>3. Control Constructs:</strong> It is desirable that as much as a possible single entry and single exit constructs used.</p><p><strong>4. Information hiding:</strong> The information secure in the data structures should be hidden from the rest of the system where possible. Information hiding can decrease the coupling between modules and make the system more maintainable.</p><p><strong>5. Nesting:</strong> Deep nesting of loops and conditions greatly harm the static and dynamic behavior of a program. It also becomes difficult to understand the program logic, so it is desirable to avoid deep nesting.</p><p><strong>6. User-defined types:</strong> Make heavy use of user-defined data types like enum, class, structure, and union. These data types make your program code easy to write and easy to understand.</p><p><strong>7. Module size:</strong> The module size should be uniform. The size of the module should not be too big or too small. If the module size is too large, it is not generally functionally cohesive. If the module size is too small, it leads to unnecessary overheads.</p><p><strong>8. Module Interface:</strong> A module with a complex interface should be carefully examined.</p><p><strong>9. Side-effects:</strong> When a module is invoked, it sometimes has a side effect of modifying the program state. Such side-effect should be avoided where as possible.</p>"
            },
            {
                "name": "Structured Programming?",
                "description": "<p>We use structured programming because it allows the programmer to understand the program easily. If a program consists of thousands of instructions and an error occurs then it is complicated to find that error in the whole program, but in structured programming, we can easily detect the error and then go to that location and correct it. This saves a lot of time.</p><p><strong>These are the following rules in structured programming:</strong></p><br><br><p><strong>Structured Rule One: Code Block</strong> - If the entry conditions are correct, but the exit conditions are wrong, the error must be in the block. This is not true if the execution is allowed to jump into a block. The error might be anywhere in the program. Debugging under these circumstances is much harder.</p><p><strong>Structure Rule Two: Sequence</strong> - A sequence of blocks is correct if the exit conditions of each block match the entry conditions of the following block. Execution enters each block at the block's entry point and leaves through the block's exit point. The whole series can be regarded as a single block, with an entry point and an exit point.</p><p><strong>Structured Rule Three: Alternation</strong> - If-then-else is frequently called alternation (because there are alternative options). In structured programming, each choice is a code block. If alternation is organized as in the flowchart at right, then there is one entry point (at the top) and one exit point (at the bottom). The structure should be coded so that if the entry conditions are fulfilled, then the exit conditions are satisfied (just like a code block).</p><p><strong>Structured Rule 4: Iteration</strong> - Iteration (while-loop) is organized as at right. It also has one entry point and one exit point. The entry point has conditions that must be satisfied, and the exit point has requirements that will be fulfilled. There are no jumps into the form from external points of the code.</p><p><strong>Structured Rule 5: Nested Structures</strong> - In flowcharting conditions, any code block can be spread into any of the structures. If there is a portion of the flowchart that has a single entry point and a single exit point, it can be summarized as a single code block.</p>"
            },
            {
                "name": "Code Review Checklist & What You Don't",
                "description": "<p><strong>1. Identify Obvious Bugs</strong> - Often, those defects are quite silly: an off-by-one error, a misspelled variable, parameters passed in the wrong order to a method, and so on.</p><p><strong>2. Look for Possible Security Issues</strong> - try to look for possible security issues that could be exploited. e.g. controller actions without protection against CSRF or SQL queries that concatenate user input and become vulnerable to injections.</p><p><strong>3. Look for 'Clever' Code</strong> - Code readability is another vital area you should look into when reviewing code. First, remember that readability is, to a certain extent, subjective. </p><p><strong>4. Check for Code Duplication</strong> - When reviewing code, you'll often spot some low-graded code duplication. Maybe the author planned to extract the duplication to a dedicated method but then forgot to do it.</p><p><strong>5. Check Whether Names Are Descriptive Enough</strong> - When performing a review, look for opportunities to improve the names of variables, constants, class fields and properties, methods, classes, and so on.</p><p><strong>6. Look for Possible Performance Improvements</strong> - One should have automatic checks and production monitoring to detect performance issues. Here, I'm thinking about easy finds like:</p><ul><li>an expensive operation inside a loop</li><li>excessive allocations of objects</li><li>inefficient string concatenations</li><li>inefficient logging</li></ul><p><strong>7. Check the Presence and Quality of Tests</strong> - Automated tests—including but not limited to unit tests—are code and, as such, you should also review them. When reviewing unit tests, check for:</p><ul><li>The presence of tests: Did the author create tests for their change?</li><li>The quality of tests: Do the tests created seem to effectively exercise the system under test? Do they follow agreed-upon best practices?</li><li>Readability: Remember tests are also documentation. They should be simple and easy to understand.</li><li>Naming: Are the tests named according to the team's convention? Is it easy to understand what they're about?</li></ul><p><strong>8. Explain Your Changes</strong> - Sometimes the developers wrote less-than-perfect code because of a lack of knowledge, it's important to take the time to educate them. One of the major benefits of code reviews is that they spread knowledge throughout the team and help less-experienced developers level up their skills. Although each team member will have their areas of expertise, the team will perform better if everyone has a comprehensive understanding of the codebase. <br><br>Increasing knowledge among the team will also improve the overall quality of the codebase, resulting in reduced development costs. In this way, investing in learning is like preemptively paying down technical debt.</p><p><strong>9. Optional: Code Documentation</strong> - By keeping comments in the code itself, this makes updating the documentation much easier and therefore more likely to happen. During the build process, these comments can be used to generate documentation that is then uploaded to a server where they can be accessed by developers on the team. Such a style of documentation is particularly useful for teams creating software that's used by third parties, such as libraries. </p>"
            },
            {
                "name": "What to Remove from Your Code Review Checklist",
                "description": "<p><strong>1. Cosmetic Concerns</strong> - You shouldn't be wasting your time fixing lots of cosmetic/aesthetic issues during your code review. These should be taken care of by an automated tool like a linter or static analyzer. You can configure linters to enforce one of the established coding style guides (AirBnB's is a popular one) or to enforce your company's style. What do I mean by cosmetics? Things like:<ul><li>whether to use tabs or spaces</li><li>the position of opening brackets in code blocks</li><li>whether to leave a space after <strong>if</strong>, <strong>for</strong>, and other keywords</li><li>whether to leave a blank line in certain situations</li><li>snake_case vs camelCase vs PascalCase</li></ul></p><p><strong>2. Testing</strong> - Reviewers shouldn't test changes when performing a code review. When I say test changes, I mean pulling the branch to their machines, executing the application, and manually going to the changes in order to see if everything's working properly.</p><p><strong>3. Anything That Can Be Automated</strong> -  avoid doing anything in a code review that can be automated. For instance, I just talked about how you should review unit tests when performing reviews. Sure, but that review should not include verifying whether the tests cover all possible branches of the code. That would be too time-consuming anyway, but there's an automated way to check that: it's called branch coverage. <br><br>Another example would be compliance or adherence to the tech stack agreed upon. There are ways to automate that, and it should be automated. <br><br>Engineers shouldn't be taking valuable time to ping another about a PR they created 4 days ago. Instead, set Team Goals with LinearB and use our developer workflow bot, WorkerB, to help dev teams course correct when a review has been waiting longer than your agreed-upon timeframe.</p>"
            },
            {
                "name": "What to look for in a code review",
                "description": "<p>In doing a code review, you should make sure that:</p><ul><li>The code is well-designed.</li><li>The functionality is good for the users of the code.</li><li>Any UI changes are sensible and look good.</li><li>Any parallel programming is done safely.</li><li>The code isn't more complex than it needs to be.</li><li>The developer isn't implementing things they <em>might</em> need in the future but don't know they need now.</li><li>Code has appropriate unit tests.</li><li>Tests are well-designed.</li><li>The developer used clear names for everything.</li><li>Comments are clear and useful, and mostly explain <em>why</em> instead of <em>what</em>.</li><li>Code is appropriately documented (generally in g3doc).</li><li>The code conforms to our style guides.</li></ul>"
            },
            {
                "name": "4 Things to do before jump-starting your Angular project",
                "description": "<p><strong>Know your project</strong> - You should understand what type of enterprise app you're developing, how you're going to integrate it, and what functional and non-functional requirements it should meet. It's a good idea to think through the front end and back end here.</p><p><strong>Cherry-pick the tools.</strong> - Applications of Angular are so diverse in part because it's a tool-rich platform. While your choice is never limited, not every tool is a good fit for an enterprise project. Before getting down to writing code, settle on UI frameworks (e.g., Angular Material, PrimeNG), test runners (e.g., Karma, Mocha), and other DevTools (e.g., Augury, Bit).</p><p><strong>Devise a basic structure.</strong> - You should plan your services, parent/child components, and routes before setting your project in motion. With a well-defined structure, you can eliminate redundancy and further the development process.</p><p><strong>Decide who will build it.</strong> - You can either hire Angular developers for your in-house team or outsource your project.</p>"
            },
            {
                "name": "5 Steps to get it off the ground",
                "description": "<p>To design a robust Angular architecture, your developers need to set up its building blocks:</p><ul><li>Modules to box functionality and enable accurate routing</li><li>Components to define directives and app logic</li><li>Templates to organize view elements</li><li>Metadata to govern the correct use of components and templates</li><li>Services to configure functions and data between components</li><li>Dependencies to manage code changes and set your app up for scalability</li></ul><p>Use your basic structure plan to arrange architectural blocks for your Angular project. It can serve as a guide for your developers as they split functionality into modules, define components, and inject dependencies.</p><p>These blocks lay the foundation that allows you to build enterprise applications with Angular without guesswork. Based on them, your team can then:</p><ol><li>Add the required functionality and design an enterprise UI prototype</li><li>Lazy-load your modules</li><li>Implement REST APIs</li><li>Run tests using the CLI and Angular-specific tools</li><li>Deploy your enterprise application</li></ol>"
            },
            {
                "name": "5 tactics that you can use to effectively manage team conflicts.",
                "description": "<p><strong>1. Setup a conflict-welcoming team culture</strong> - You can paraphrase different ideas from different team members and provide a debate-friendly space for everyone. <strong>Promote technical arguments in the way opposing ideas ignite discussion</strong></p><p><strong>2. Appreciate people who go the extra mile</strong> - Suppose there are different opinions for a project's technical architecture, and two engineers have contradictory ideas about it. One individual might do research by himself and present a new design solution proving his valid argument further. <br><br>As a tech lead, you can appreciate his/her efforts and give a shoutout, so others also take the initiative to go the extra mile. By doing so, better ideas can be brainstormed — the more the better!</p><p><strong>3. Give responsibilities by forming sub-teams</strong> - Suppose you notice a submodule or a component of the project, which leads to many controversial arguments. In that case, my suggestion is to form a sub-team and give responsibility to them to enhance the application by addressing the grey area you observe. <strong>You may manage the conflict keeping it under a healthy margin and allowing sub-teams to derive practical solutions for the problematic scenarios.</strong></p><p><strong>4. Define a common goal to remind your team frequently</strong> - As a team, it is essential to have a clear, achievable goal defined, but not just limited to documentations. When every team member is working toward a common goal, it makes your job so much easier. If you can inspire your team to achieve common goals, they will try different paths to reach them, which is what you want from them. Hence, it helps everyone to synchronize with team dynamics and work together, delivering high throughput.</p><p><strong>5. Know how to stop a conflict — Don't text; use voice</strong> - If you feel the limit of a healthier conflict and now the arguments are going more into personal spaces, raise your voice to break the flow. One should use their voice but never text or send an email expecting others to change their behaviours. If you want to pass a message to someone expecting to summon a conflict, always go and talk to them in person, or give them a call but DON'T text them. This advice will make your work so much easier when it comes to controlling team arguments.</p><br><br><p><strong>Final Conclusion</strong> - However, at the end of the day, make sure that every person in your team feels good about each other and feels proud to be a part of your fantastic team!</p>"
            },
            {
                "name": "How to Build a Successful Team",
                "description": "<ol><li>Set organization goals and start planning</li><li>Define the roles within your team</li><li>Maximize the skills of your team member</li><li>Embrace diversity - Give your team members time and space to express themselves, especially in areas related to diversity. This communication will help you best understand how you can meet their needs and realize skills and capabilities you may have overlooked.</li><li>Set expectations from day one</li><li>Allow your team to take risks and experiment</li><li>Celebrate successes and failures</li><li>Promote individual development</li><li>Avoid micromanagement - Allow people the freedom and self-determination they need to get their work done, based on what's appropriate for the role. Let your team complete tasks with some autonomy and have regular meetings or requirements for people to report that status, As an added benefit, this will free you up to finish your own projects more quickly and effectively.</li><li>Motivate your team with positivity</li><li>Establish strong leadership</li><li>Create a team culture</li><li>Foster connections within the team - Team building exercises</li><li>Communicate frequently and effectively</li></ol>"
            }
        ]
    },
    {
        "folder": "HR",
        "title": "HR",
        "url": "/folder/HR",
        "icon": "people-circle-outline",
        "question": [
            {
                "name": "Why should we hire you",
                "description": "<p>Honestly, I almost feel like the job description suited my profile. I have the 8 years of programming experience you’re looking for, a track record of successful projects, and proven expertise in agile development processes. In the past 1 and half year, I have developed my communication skills from working directly with senior managers, bussiness development team, which means I am well prepared to work on high-profile, cross-department projects. I have the experience to start contributing from day one and I am truly excited about the prospect of getting started.</p><p>I’m excited about the opportunity to work with a fast growing company. I’m also the type of employee that likes to hit the ground running and jump into projects as soon as possible. So, over the next five years, I see myself taking on as many complex assignments as the position would allow. By the end of that period, I want to say that I’ve delivered a good product and a lasting client relationships. I’ve had amazing mentors and managers in my past positions, so I’d like to be able to provide similar guidance, potentially taking on a leadership role.</p>"
            },
            {
                "name": "Why do you want to work for this company?",
                "description": "<p>I was delighted to see on your website that your featured employees are talking about how great it is to work for your company. These days so many people seem to despise where they work for one reason or another. It's wonderful to see that your employees are proud to talk about how much they love their jobs.</p>"
            },
            {
                "name": "Where do you see yourself in 5 years",
                "description": "<p>Firstly I want to look for opportunities to expand my responsibilities within this role to work towards my goal. Over the next few years, I want to explore and develop skills in project management. In five years, I want to have gained experience in leading projects for major clients.</p>"
            },
            {
                "name": "Do you consider yourself successful?",
                "description": "<p>I feel successful with continuous progress. I want to recognize myself as someone with a progressive attitude who does his best and gives 100% to attain goals.  To me, success is not just my personal achievements but also by the efforts of the people around me.</p>"
            },
            {
                "name": "What would you consider your greatest strengths & weakness?",
                "description": "<p>My strength is my ability to convert negative work environment into positive. At the same time, developing a supportive team. I am also capable of keeping many projects on track and ensuring deadlines are met. As far as my weakness is concerned, I get impatient sometimes in order to get everything done very quickly. To tackle the problem, I am trying to re-consider the to-do list and prioritize the tasks.</p>"
            },
            {
                "name": "What motivates you?",
                "description": "<p>Responsibility towards work motivates me the lot. But subsequent recognition of my efforts gives me the more encouragement for my next efforts.</p>"
            },
            {
                "name": "What have you learned from mistakes on the job?",
                "description": "<p>I learned that without proper coordination, even the simplest task could cause problems in a project. I had this problem during my first job. From that time on, I made sure every I think follows every detail and coordination.</p>"
            },
            {
                "name": "Are you willing to work overtime? Prepare for night shift and work on Weekends?",
                "description": "<p>I understand that being asked to work for an extended number of hours comes with a good reason in the first place, so I’m ok with it. It an extra effort means something for the company. I’ll be happy to do it.<p>"
            },
            {
                "name": "How would you be an asset to this company?",
                "description": "<p>My skills in [key skill for the position] are outstanding. I have earned a lot of awards and certifications from my past employers. As an employee, I handle pressure with ease and can work with minimal supervision.</p>"
            },
            {
                "name": "",
                "description": ""
            },
            {
                "name": "How long would you expect to work for us in case you are hired?",
                "description": "<p>I would like to be in this company for a long time. For as long as management sees me as an asset, I am willing to stay.</p>"
            }
        ]
    }
]